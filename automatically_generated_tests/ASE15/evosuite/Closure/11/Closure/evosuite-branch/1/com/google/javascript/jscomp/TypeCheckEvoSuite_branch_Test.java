/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:30:23 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.MemoizedScopeCreator;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class TypeCheckEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
  }

  @Test
  public void test1()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      String string0 = "j/QAAnKR,r1i2;";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
      
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isComma());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(0.0, double0, 0.01D);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
  }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(typedScopeCreator0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(memoizedScopeCreator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, (ScopeCreator) memoizedScopeCreator0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(nodeTraversal0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      
      Node node0 = Node.newString(compilerOptions0.aliasStringsBlacklist);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(node0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertTrue(boolean0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAdd());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, scopeCreator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      
      int int0 = 120;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(120, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(120, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(120, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(491640, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertNotNull(node0);
      
      boolean boolean0 = typeCheck0.visitName(nodeTraversal0, node0, node0);
      assertFalse(boolean0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(120, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(120, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(120, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(491640, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(nodeTraversal0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      
      int int0 = 120;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(120, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(491640, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(120, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(120, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertNotNull(node0);
      
      nodeTraversal0.traverse(node0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(120, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(491640, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(120, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(120, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(120, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typedScopeCreator0);
      
      MemoizedScopeCreator memoizedScopeCreator0 = new MemoizedScopeCreator(typedScopeCreator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(memoizedScopeCreator0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, (ScopeCreator) memoizedScopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(nodeTraversal0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSType[] jSTypeArray0 = new JSType[8];
      Node node0 = jSTypeRegistry0.createParameters(jSTypeArray0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(8, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(node0);
      
      nodeTraversal0.traverse(node0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(8, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isStringKey());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      MemoizedScopeCreator memoizedScopeCreator0 = cleanupPasses0.getTypedScopeCreator();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNull(memoizedScopeCreator0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0, (ScopeCreator) memoizedScopeCreator0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(nodeTraversal0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      double double0 = 3428.926157597124;
      Node node0 = Node.newNumber(double0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(39, node0.getType());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertNotNull(node0);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(39, node0.getType());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
  }

  @Test
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      boolean boolean0 = true;
      TypeCheck typeCheck1 = typeCheck0.reportMissingProperties(boolean0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertSame(typeCheck1, typeCheck0);
      assertSame(typeCheck0, typeCheck1);
      assertNotNull(typeCheck1);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      String string0 = "L<CharMa+tcher.NONE";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(node0);
      
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertSame(typeCheck0, typeCheck1);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
  }

  @Test
  public void test8()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      double double0 = 3428.926157597124;
      Node node0 = Node.newNumber(double0);
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Scope scope0 = typeCheck0.processForTesting(node0, node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(loggerErrorManager0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(cleanupPasses0);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      
      TypeCheck typeCheck0 = cleanupPasses0.makeTypeCheck(compiler0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      
      String string0 = "L<CharMa+tcher.NONE";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      
      NodeTraversal.traverse((AbstractCompiler) compiler0, node0, (NodeTraversal.Callback) typeCheck0);
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("[testcode]", node0.getSourceFileName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVoid());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
  }
}
