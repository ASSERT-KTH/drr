/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:57:12 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.SimpleSlot;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NamedTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "null";
      int int0 = 2069;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertNotNull(namedType0);
      
      boolean boolean0 = true;
      NamedType namedType1 = null;
      SimpleSlot simpleSlot0 = new SimpleSlot(string0, (JSType) namedType1, boolean0);
      assertEquals("null", simpleSlot0.getName());
      assertEquals(true, simpleSlot0.isTypeInferred());
      assertNotNull(simpleSlot0);
      
      JSType jSType0 = namedType0.getTypedefType(simpleErrorReporter0, simpleSlot0, string0);
      assertEquals("null", simpleSlot0.getName());
      assertEquals(true, simpleSlot0.isTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionType());
      assertNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      int int0 = (-2184);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean0 = false;
      jSTypeRegistry0.setLastGeneration(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = (NamedType)namedType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) namedType0);
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(true, namedType1.isResolved());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertNotNull(namedType1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Cycle detected in inheritance chain of type ";
      int int0 = (-355);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      String string1 = "null";
      assertNotSame(string1, string0);
      
      boolean boolean0 = false;
      jSTypeRegistry0.setLastGeneration(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = new NamedType(jSTypeRegistry0, string1, string1, int0, int0);
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(namedType1);
      
      NamedType namedType2 = (NamedType)namedType1.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) namedType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(true, namedType1.isResolved());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, namedType2.isResolved());
      assertEquals(false, namedType2.isNullType());
      assertEquals(false, namedType2.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType2.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType2.hasCachedValues());
      assertEquals(false, namedType2.isFunctionType());
      assertEquals(false, namedType2.isEnumElementType());
      assertEquals(false, namedType2.isTemplateType());
      assertEquals(false, namedType2.isUnionType());
      assertEquals(false, namedType2.isNominalConstructor());
      assertEquals(false, namedType2.isEnumType());
      assertEquals(false, namedType2.isStringValueType());
      assertEquals(false, namedType2.isFunctionPrototypeType());
      assertEquals(false, namedType2.isNumberValueType());
      assertEquals(false, namedType2.isRecordType());
      assertEquals(false, namedType2.isParameterizedType());
      assertEquals(false, namedType2.isBooleanValueType());
      assertNotSame(namedType0, namedType1);
      assertNotSame(namedType0, namedType2);
      assertNotSame(namedType1, namedType0);
      assertSame(namedType1, namedType2);
      assertNotSame(namedType2, namedType0);
      assertSame(namedType2, namedType1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(namedType0.equals((Object)namedType1));
      assertFalse(namedType0.equals((Object)namedType2));
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(namedType2.equals((Object)namedType0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(namedType2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2114);
      String string0 = "prototype";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertNotNull(noType0);
      
      jSTypeRegistry0.forwardDeclareType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = (NoResolvedType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noType0);
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertNotNull(noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Cycle detected in inheritance chain of type ";
      int int0 = (-355);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertNotNull(namedType0);
      
      String string1 = "null";
      assertNotSame(string1, string0);
      
      NamedType namedType1 = new NamedType(jSTypeRegistry0, string1, string1, int0, int0);
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(namedType1);
      
      NullType nullType0 = (NullType)namedType1.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) namedType0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isResolved());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(true, namedType1.isResolved());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isParameterizedType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertNotSame(namedType1, namedType0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(namedType0, namedType1);
      assertFalse(namedType1.equals((Object)namedType0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(namedType0.equals((Object)namedType1));
      assertNotNull(nullType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2114);
      String string0 = "prototype";
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isParameterizedType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertNotNull(namedType0);
      
      Node node0 = null;
      boolean boolean1 = namedType0.defineInferredProperty(string0, (JSType) recordType0, node0);
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isParameterizedType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = namedType0.defineProperty(string0, namedType0, boolean1, node0);
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isParameterizedType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2114);
      String string0 = "prototype";
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isParameterizedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(recordType0);
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertNotNull(namedType0);
      
      Node node0 = null;
      boolean boolean1 = namedType0.defineInferredProperty(string0, (JSType) recordType0, node0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isParameterizedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertFalse(boolean0 == boolean1);
      assertNotNull(noType0);
      
      jSTypeRegistry0.forwardDeclareType(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      
      NoResolvedType noResolvedType0 = (NoResolvedType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isParameterizedType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumType());
      assertFalse(boolean0 == boolean1);
      assertNotNull(noResolvedType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "Cycle detected in inheritance chain of type ";
      int int0 = (-355);
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertNotNull(namedType0);
      
      UnknownType unknownType0 = (UnknownType)JSType.safeResolve(namedType0, simpleErrorReporter0, namedType0);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertNotNull(unknownType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2114);
      String string0 = "prototype";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      String string1 = namedType0.toAnnotationString();
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("prototype", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2114);
      String string0 = "prototype";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(namedType0);
      
      boolean boolean1 = namedType0.isNamedType();
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = (-2114);
      String string0 = "prototype";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertNotNull(namedType0);
      
      int int1 = namedType0.hashCode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isParameterizedType());
      assertEquals((-598792926), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }
}
