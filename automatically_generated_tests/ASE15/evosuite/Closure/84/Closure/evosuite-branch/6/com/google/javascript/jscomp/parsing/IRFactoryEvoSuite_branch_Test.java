/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:19:41 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlElemRef;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 37;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(37, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(37, astRoot0.getAbsolutePosition());
      
      String string0 = "illid declemenwVt}re";
      ReturnStatement returnStatement0 = new ReturnStatement(int0, int0);
      assertNotNull(returnStatement0);
      assertNull(returnStatement0.getJsDoc());
      assertEquals(37, returnStatement0.getLength());
      assertEquals(4, returnStatement0.getType());
      assertEquals(37, returnStatement0.getAbsolutePosition());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(37, returnStatement0.getPosition());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(0, returnStatement0.depth());
      assertEquals("4", returnStatement0.toString());
      
      astRoot0.addChildrenToFront((Node) returnStatement0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(37, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(37, astRoot0.getAbsolutePosition());
      assertNull(returnStatement0.getJsDoc());
      assertEquals(37, returnStatement0.getLength());
      assertEquals(4, returnStatement0.getType());
      assertEquals(37, returnStatement0.getAbsolutePosition());
      assertEquals(-1, returnStatement0.getLineno());
      assertEquals(37, returnStatement0.getPosition());
      assertEquals(false, returnStatement0.hasChildren());
      assertEquals(0, returnStatement0.depth());
      assertEquals("4", returnStatement0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(37, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(37, astRoot0.getAbsolutePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-1182);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1182, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1182, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      
      String string0 = "=c\"A";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertNotNull(arrayLiteral0);
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(1, arrayLiteral0.getLength());
      
      astRoot0.addChildrenToBack((Node) arrayLiteral0);
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1182, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1182, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1182, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1182, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 160;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(160, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(160, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      
      String string0 = "`;\n";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(160, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(160, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 109;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(109, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(109, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      
      String string0 = "ivlid duet=VlmVtare@";
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(109, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(109, comment0.getPosition());
      assertEquals(109, comment0.getAbsolutePosition());
      assertEquals("ivlid duet=VlmVtare@", comment0.getValue());
      assertEquals(false, comment0.isParsed());
      
      astRoot0.setJsDocNode(comment0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(109, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(109, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("ivlid duet=VlmVtare@", astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(109, comment0.getLength());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(109, comment0.getPosition());
      assertEquals(109, comment0.getAbsolutePosition());
      assertEquals("ivlid duet=VlmVtare@", comment0.getValue());
      assertEquals(false, comment0.isParsed());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(109, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(109, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("ivlid duet=VlmVtare@", astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals("[]", treeSet0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 456;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(456, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(456, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      String string0 = com.google.javascript.rhino.Node.tokenToName(int0);
      assertNotNull(string0);
      assertEquals("<unknown=456>", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral();
      assertNotNull(arrayLiteral0);
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals("65", arrayLiteral0.toString());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(false, arrayLiteral0.hasChildren());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      arrayLiteral0.setIsDestructuring(boolean0);
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals("65", arrayLiteral0.toString());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(true, arrayLiteral0.isDestructuring());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(false, arrayLiteral0.hasChildren());
      
      astRoot0.addChildrenToBack((Node) arrayLiteral0);
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(-1, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals("65", arrayLiteral0.toString());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(true, arrayLiteral0.isDestructuring());
      assertEquals(-1, arrayLiteral0.getPosition());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(456, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(456, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = (-1182);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1182, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1182, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertNotNull(numberLiteral0);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals((-1182.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals((-1182.0), numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getValue());
      
      astRoot0.addChildToFront((Node) numberLiteral0);
      assertNull(numberLiteral0.getJsDoc());
      assertEquals((-1182.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals((-1182.0), numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getValue());
      assertEquals(-1182, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1182, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      
      String string0 = "=c\"A";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1182, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1182, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = 1827;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1827, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1827, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      
      String string0 = "UY";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      XmlElemRef xmlElemRef0 = new XmlElemRef(int0);
      assertNotNull(xmlElemRef0);
      assertEquals(1827, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(1827, xmlElemRef0.getPosition());
      
      Name name0 = xmlElemRef0.getNamespace();
      assertNull(name0);
      assertEquals(1827, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(1827, xmlElemRef0.getPosition());
      
      FunctionNode functionNode0 = new FunctionNode(int0, name0);
      assertNotNull(functionNode0);
      assertEquals(1827, functionNode0.getPosition());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isSetter());
      assertEquals("", functionNode0.getName());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getLp());
      assertNull(functionNode0.getEncodedSource());
      assertNull(functionNode0.getSourceName());
      assertEquals(109, functionNode0.getType());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(1827, functionNode0.getAbsolutePosition());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(1, functionNode0.getLength());
      assertEquals(0, functionNode0.depth());
      assertEquals(1827, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(1827, xmlElemRef0.getPosition());
      
      astRoot0.addChildrenToFront((Node) functionNode0);
      assertEquals(1827, functionNode0.getPosition());
      assertEquals(false, functionNode0.isExpressionClosure());
      assertEquals(0, functionNode0.getRegexpCount());
      assertEquals(false, functionNode0.hasChildren());
      assertEquals(false, functionNode0.isSetter());
      assertEquals("", functionNode0.getName());
      assertEquals(false, functionNode0.isGetter());
      assertEquals(-1, functionNode0.getLp());
      assertNull(functionNode0.getEncodedSource());
      assertNull(functionNode0.getSourceName());
      assertEquals(109, functionNode0.getType());
      assertEquals(-1, functionNode0.getRp());
      assertEquals(-1, functionNode0.getEncodedSourceStart());
      assertEquals(-1, functionNode0.getBaseLineno());
      assertEquals("109", functionNode0.toString());
      assertEquals(0, functionNode0.getParamCount());
      assertEquals(false, functionNode0.requiresActivation());
      assertEquals(false, functionNode0.getIgnoreDynamicScope());
      assertEquals(false, functionNode0.isGenerator());
      assertEquals(false, functionNode0.isGetterOrSetter());
      assertEquals(1827, functionNode0.getAbsolutePosition());
      assertEquals(0, functionNode0.getFunctionType());
      assertEquals(0, functionNode0.getFunctionCount());
      assertNull(functionNode0.getJsDoc());
      assertEquals(-1, functionNode0.getEndLineno());
      assertEquals(-1, functionNode0.getEncodedSourceEnd());
      assertEquals(-1, functionNode0.getLineno());
      assertEquals(1, functionNode0.getLength());
      assertEquals(0, functionNode0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1827, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1827, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(1827, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(1827, xmlElemRef0.getPosition());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      int int0 = 0;
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertNotNull(astRoot1);
      assertEquals("0", astRoot1.toString());
      assertEquals(0, astRoot1.getType());
      assertEquals(1, astRoot1.getLength());
      assertNull(astRoot1.getJsDoc());
      assertEquals(-1, astRoot1.getEndLineno());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(0, astRoot1.depth());
      assertNull(astRoot1.getSourceName());
      assertEquals(-1, astRoot1.getPosition());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(-1, astRoot1.getAbsolutePosition());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("0", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertSame(astRoot1, astRoot0);
      assertSame(astRoot0, astRoot1);
      
      String string0 = "0SH2c!.v";
      Config config0 = null;
      boolean boolean0 = false;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(124, node0.getType());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("0", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertSame(astRoot0, astRoot1);
  }
}
