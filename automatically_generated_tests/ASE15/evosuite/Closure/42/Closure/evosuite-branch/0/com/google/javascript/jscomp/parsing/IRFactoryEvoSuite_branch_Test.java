/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:54:41 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.IfStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      String string0 = "|eWSrMZ203_U\\.W";
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertEquals("66", objectLiteral0.toString());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(1, objectLiteral0.getLength());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.hasChildren());
      assertNotNull(objectLiteral0);
      
      int int0 = 181;
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(181, objectProperty0.getPosition());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(0, objectProperty0.depth());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      assertEquals("103", objectProperty0.toString());
      assertNotNull(objectProperty0);
      
      objectLiteral0.addElement(objectProperty0);
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(182, objectProperty0.getPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(1, objectProperty0.depth());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      assertEquals("103", objectProperty0.toString());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(1, objectLiteral0.getLength());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.hasChildren());
      
      astRoot0.addChildToFront((Node) objectLiteral0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(1, objectLiteral0.getLength());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.hasChildren());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("|eWSrMZ203_U\\.W", simpleSourceFile0.toString());
      assertEquals("|eWSrMZ203_U\\.W", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertNotNull(astRoot0);
      
      String string0 = "|eWS)rMZ2#703LU\\.W";
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(1, objectLiteral0.getLength());
      assertNotNull(objectLiteral0);
      
      astRoot0.addChildToFront((Node) objectLiteral0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(1, objectLiteral0.getLength());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("|eWS)rMZ2#703LU\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2#703LU\\.W", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals("|eWS)rMZ2#703LU\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2#703LU\\.W", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals("|eWS)rMZ2#703LU\\.W", node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isRegExp());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNotNull(astRoot0);
      
      int int0 = 330;
      String string0 = "interfacXe";
      Name name0 = new Name(int0, int0, string0);
      assertEquals(330, name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(10, name0.getLength());
      assertEquals("interfacXe", name0.getIdentifier());
      assertEquals("interfacXe", name0.getString());
      assertEquals(-1, name0.getLineno());
      assertEquals(0, name0.depth());
      assertEquals(10, name0.length());
      assertEquals(330, name0.getPosition());
      assertNull(name0.getJsDoc());
      assertEquals(false, name0.hasChildren());
      assertNotNull(name0);
      
      astRoot0.addChild((AstNode) name0);
      assertEquals(330, name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertEquals(1, name0.depth());
      assertEquals(39, name0.getType());
      assertEquals(10, name0.getLength());
      assertEquals("interfacXe", name0.getIdentifier());
      assertEquals("interfacXe", name0.getString());
      assertEquals(-1, name0.getLineno());
      assertEquals(10, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals(331, name0.getPosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(341, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("interfacXe", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("interfacXe", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals("interfacXe", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isAdd());
      assertEquals("interfacXe", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("interfacXe", simpleSourceFile0.toString());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(341, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      int int0 = 330;
      String string0 = "interface";
      Name name0 = new Name(int0, int0, string0);
      assertEquals(false, name0.hasChildren());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(330, name0.getAbsolutePosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(9, name0.getLength());
      assertEquals("interface", name0.getIdentifier());
      assertEquals("interface", name0.getString());
      assertEquals(9, name0.length());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.depth());
      assertEquals(330, name0.getPosition());
      assertNotNull(name0);
      
      astRoot0.addChild((AstNode) name0);
      assertEquals(false, name0.hasChildren());
      assertEquals(331, name0.getPosition());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(330, name0.getAbsolutePosition());
      assertEquals(-1, name0.getLineno());
      assertEquals(9, name0.getLength());
      assertEquals("interface", name0.getIdentifier());
      assertEquals("interface", name0.getString());
      assertEquals(9, name0.length());
      assertEquals(1, name0.depth());
      assertEquals(39, name0.getType());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(340, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("interface", simpleSourceFile0.toString());
      assertEquals("interface", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      int int0 = 0;
      ContinueStatement continueStatement0 = new ContinueStatement(int0);
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-1, continueStatement0.getLineno());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLength());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      assertNotNull(continueStatement0);
      
      astRoot0.addChildToBack((Node) continueStatement0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(-1, continueStatement0.getLineno());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(-1, continueStatement0.getLength());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      
      String string0 = "<G^Cu+L}9";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("<G^Cu+L}9", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals("<G^Cu+L}9", node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.toString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNotNull(astRoot0);
      
      String string0 = "|eWS)rMZ2#703LU\\.W";
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getPosition());
      assertNotNull(objectLiteral0);
      
      int int0 = 181;
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals("103", objectProperty0.toString());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(181, objectProperty0.getPosition());
      assertEquals(false, objectProperty0.isSetter());
      assertNotNull(objectProperty0);
      
      objectLiteral0.addElement(objectProperty0);
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals("103", objectProperty0.toString());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(182, objectProperty0.getPosition());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(1, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isSetter());
      
      astRoot0.addChildToFront((Node) objectLiteral0);
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("|eWS)rMZ2#703LU\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2#703LU\\.W", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      String string0 = "<G^Cu+L}9";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.getName());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.getName());
      assertEquals("<G^Cu+L}9", simpleSourceFile0.toString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDebugger());
      assertEquals("<G^Cu+L}9", node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNotNull(astRoot0);
      
      String string0 = "|eWS)rMZ2703_U\\.W";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals("|eWS)rMZ2703_U\\.W", node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.toString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-2415);
      IfStatement ifStatement0 = new IfStatement(int0);
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(-2415, ifStatement0.getPosition());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(-1, ifStatement0.getRp());
      assertEquals(0, ifStatement0.depth());
      assertEquals("112", ifStatement0.toString());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(-1, ifStatement0.getLp());
      assertEquals(-2415, ifStatement0.getAbsolutePosition());
      assertEquals(112, ifStatement0.getType());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(1, ifStatement0.getLength());
      assertNotNull(ifStatement0);
      
      AstRoot astRoot0 = ifStatement0.getAstRoot();
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(-2415, ifStatement0.getPosition());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(-1, ifStatement0.getRp());
      assertEquals(0, ifStatement0.depth());
      assertEquals("112", ifStatement0.toString());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(-1, ifStatement0.getLp());
      assertEquals(-2415, ifStatement0.getAbsolutePosition());
      assertEquals(112, ifStatement0.getType());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(1, ifStatement0.getLength());
      assertNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "inteface";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNotNull(astRoot0);
      
      String string0 = "|eWS)rMZ2703_U\\.W";
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getLineno());
      assertNotNull(objectLiteral0);
      
      int int0 = 181;
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals(181, objectProperty0.getPosition());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getLineno());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(false, objectProperty0.hasChildren());
      assertNotNull(objectProperty0);
      
      objectLiteral0.addElement(objectProperty0);
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(182, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(1, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getLineno());
      
      astRoot0.addChildToFront((Node) objectLiteral0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getLineno());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      objectProperty0.setIsGetter();
      assertEquals(true, objectProperty0.isGetter());
      assertEquals("151", objectProperty0.toString());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(151, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(182, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(1, objectProperty0.depth());
      assertEquals(false, objectProperty0.hasChildren());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertNotNull(astRoot0);
      
      int int0 = 16;
      String string0 = "interface";
      Name name0 = new Name(int0, int0, string0);
      assertEquals("interface", name0.getString());
      assertEquals("interface", name0.getIdentifier());
      assertEquals(-1, name0.getLineno());
      assertEquals("39", name0.toString());
      assertEquals(9, name0.getLength());
      assertNull(name0.getJsDoc());
      assertEquals(39, name0.getType());
      assertEquals(16, name0.getPosition());
      assertEquals(16, name0.getAbsolutePosition());
      assertEquals(0, name0.depth());
      assertEquals(false, name0.hasChildren());
      assertEquals(9, name0.length());
      assertNotNull(name0);
      
      astRoot0.addChild((AstNode) name0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(26, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("interface", name0.getString());
      assertEquals("interface", name0.getIdentifier());
      assertEquals(-1, name0.getLineno());
      assertEquals("39", name0.toString());
      assertEquals(9, name0.getLength());
      assertEquals(1, name0.depth());
      assertNull(name0.getJsDoc());
      assertEquals(39, name0.getType());
      assertEquals(17, name0.getPosition());
      assertEquals(16, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(9, name0.length());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("interface", simpleSourceFile0.getName());
      assertEquals("interface", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("interface", simpleSourceFile0.getName());
      assertEquals("interface", simpleSourceFile0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(26, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals("interface", node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(132, node0.getType());
      assertEquals(26, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      String string0 = "inerfc{e";
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals("66", objectLiteral0.toString());
      assertNotNull(objectLiteral0);
      
      astRoot0.addChildToFront((Node) objectLiteral0);
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("inerfc{e", simpleSourceFile0.toString());
      assertEquals("inerfc{e", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      int int0 = 0;
      ObjectLiteral objectLiteral1 = (ObjectLiteral)objectLiteral0.setType(int0);
      assertSame(objectLiteral0, objectLiteral1);
      assertSame(objectLiteral1, objectLiteral0);
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(0, objectLiteral0.depth());
      assertEquals("0", objectLiteral0.toString());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(0, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(false, objectLiteral1.hasChildren());
      assertEquals(0, objectLiteral1.depth());
      assertEquals("0", objectLiteral1.toString());
      assertEquals(-1, objectLiteral1.getPosition());
      assertNull(objectLiteral1.getJsDoc());
      assertEquals(0, objectLiteral1.getType());
      assertEquals(-1, objectLiteral1.getLineno());
      assertEquals(-1, objectLiteral1.getAbsolutePosition());
      assertEquals(false, objectLiteral1.isDestructuring());
      assertEquals(1, objectLiteral1.getLength());
      assertNotNull(objectLiteral1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isFromExterns());
      assertEquals("inerfc{e", node0.getSourceFileName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVar());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals("inerfc{e", simpleSourceFile0.toString());
      assertEquals("inerfc{e", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertNotNull(astRoot0);
      
      String string0 = "|eW{)r\\Z2703_U\\.W";
      ObjectLiteral objectLiteral0 = new ObjectLiteral();
      assertEquals(0, objectLiteral0.depth());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      assertNotNull(objectLiteral0);
      
      int int0 = 181;
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals(0, objectProperty0.depth());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals("103", objectProperty0.toString());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getPosition());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertNotNull(objectProperty0);
      
      objectLiteral0.addElement(objectProperty0);
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals("103", objectProperty0.toString());
      assertEquals(1, objectProperty0.depth());
      assertEquals(182, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      
      objectProperty0.setIsSetter();
      assertEquals(152, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(true, objectProperty0.isSetter());
      assertEquals(1, objectProperty0.depth());
      assertEquals(182, objectProperty0.getPosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(181, objectProperty0.getLength());
      assertEquals(181, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals("152", objectProperty0.toString());
      assertEquals(false, objectProperty0.hasChildren());
      
      astRoot0.addChildToFront((Node) objectLiteral0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(-1, objectLiteral0.getAbsolutePosition());
      assertEquals(-1, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(-1, objectLiteral0.getLineno());
      
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("|eW{)r\\Z2703_U\\.W", simpleSourceFile0.getName());
      assertEquals("|eW{)r\\Z2703_U\\.W", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertNotNull(astRoot0);
      
      String string0 = "|eWS)rMZ2703_U\\.W";
      int int0 = 172;
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertEquals("103", objectProperty0.toString());
      assertEquals(172, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(172, objectProperty0.getAbsolutePosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(103, objectProperty0.getType());
      assertEquals(172, objectProperty0.getPosition());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNotNull(objectProperty0);
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.getName());
      assertEquals("|eWS)rMZ2703_U\\.W", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      astRoot0.addChildToFront((Node) objectProperty0);
      assertEquals("103", objectProperty0.toString());
      assertEquals(172, objectProperty0.getLength());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(172, objectProperty0.getAbsolutePosition());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(103, objectProperty0.getType());
      assertEquals(172, objectProperty0.getPosition());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 103
         //
      }
  }
}
