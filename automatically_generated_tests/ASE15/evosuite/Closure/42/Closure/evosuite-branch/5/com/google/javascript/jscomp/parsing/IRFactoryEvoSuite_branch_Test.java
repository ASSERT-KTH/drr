/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:46:36 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.FunctionCall;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.Scope;
import com.google.javascript.rhino.head.ast.ThrowStatement;
import com.google.javascript.rhino.head.ast.XmlMemberGet;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = (-771);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-771, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNotNull(astRoot0);
      
      String string0 = null;
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNull(simpleSourceFile0.toString());
      assertNull(simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      FunctionCall functionCall0 = new FunctionCall(int0, int0);
      assertEquals(-1, functionCall0.getRp());
      assertEquals(-1, functionCall0.getLineno());
      assertEquals(-771, functionCall0.getAbsolutePosition());
      assertEquals("38", functionCall0.toString());
      assertEquals(-771, functionCall0.getLength());
      assertEquals(38, functionCall0.getType());
      assertEquals(false, functionCall0.hasChildren());
      assertEquals(-771, functionCall0.getPosition());
      assertNull(functionCall0.getJsDoc());
      assertEquals(-1, functionCall0.getLp());
      assertEquals(0, functionCall0.depth());
      assertNotNull(functionCall0);
      
      astRoot0.addChild((AstNode) functionCall0);
      assertEquals(0, functionCall0.getPosition());
      assertEquals(-1, functionCall0.getRp());
      assertEquals(-1, functionCall0.getLineno());
      assertEquals(1, functionCall0.depth());
      assertEquals(-771, functionCall0.getAbsolutePosition());
      assertEquals("38", functionCall0.toString());
      assertEquals(-771, functionCall0.getLength());
      assertEquals(38, functionCall0.getType());
      assertEquals(false, functionCall0.hasChildren());
      assertNull(functionCall0.getJsDoc());
      assertEquals(-1, functionCall0.getLp());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-771, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-771, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getEncodedSource());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = (-776);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(136, astRoot0.getType());
      assertEquals(-776, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-776, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(astRoot0);
      
      BreakStatement breakStatement0 = new BreakStatement();
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(false, breakStatement0.hasChildren());
      assertNotNull(breakStatement0);
      
      astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) breakStatement0);
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-776, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-776, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      
      boolean boolean0 = false;
      String string0 = "#";
      Name name0 = new Name(int0, string0);
      assertEquals(-776, name0.getPosition());
      assertEquals(0, name0.depth());
      assertEquals(1, name0.length());
      assertEquals(1, name0.getLength());
      assertEquals(39, name0.getType());
      assertEquals(-1, name0.getLineno());
      assertEquals("#", name0.getString());
      assertEquals(-776, name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getJsDoc());
      assertEquals("#", name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertNotNull(name0);
      
      breakStatement0.setBreakLabel(name0);
      assertEquals(1, name0.length());
      assertEquals(1, name0.getLength());
      assertEquals(-775, name0.getPosition());
      assertEquals(39, name0.getType());
      assertEquals(-1, name0.getLineno());
      assertEquals(1, name0.depth());
      assertEquals("#", name0.getString());
      assertEquals(-776, name0.getAbsolutePosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getJsDoc());
      assertEquals("#", name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(false, breakStatement0.hasChildren());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("#", simpleSourceFile0.toString());
      assertEquals("#", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(config0);
      
      Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOr());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals("#", node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("#", simpleSourceFile0.toString());
      assertEquals("#", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(136, astRoot0.getType());
      assertEquals(-776, astRoot0.getPosition());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-776, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNotNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = (-797);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-797, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-797, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      BreakStatement breakStatement0 = new BreakStatement();
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals("120", breakStatement0.toString());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      assertNotNull(breakStatement0);
      
      astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) breakStatement0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(0, breakStatement0.depth());
      assertEquals("120", breakStatement0.toString());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(-1, breakStatement0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-797, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-797, astRoot0.getPosition());
      
      boolean boolean0 = true;
      String string0 = "#";
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("#", simpleSourceFile0.toString());
      assertEquals("#", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVoid());
      assertEquals("#", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-797, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-797, astRoot0.getPosition());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("#", simpleSourceFile0.toString());
      assertEquals("#", simpleSourceFile0.getName());
      assertNotNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = (-771);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-771, astRoot0.getPosition());
      assertNotNull(astRoot0);
      
      String string0 = null;
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNull(simpleSourceFile0.toString());
      assertNull(simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      String string1 = "T152.Q";
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string1, config0, (ErrorReporter) toolErrorReporter0);
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNull(simpleSourceFile0.toString());
      assertNull(simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-771, astRoot0.getPosition());
      assertNotNull(node0);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = (-797);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-797, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-797, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      boolean boolean0 = true;
      String string0 = "#";
      Name name0 = new Name(int0, string0);
      assertEquals(-1, name0.getLineno());
      assertEquals(0, name0.depth());
      assertEquals("#", name0.getIdentifier());
      assertEquals(-797, name0.getAbsolutePosition());
      assertEquals(1, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(-797, name0.getPosition());
      assertEquals(39, name0.getType());
      assertEquals("#", name0.getString());
      assertEquals(1, name0.getLength());
      assertEquals(false, name0.hasChildren());
      assertNotNull(name0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("#", simpleSourceFile0.toString());
      assertEquals("#", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      String string1 = "lB1a?bM,{uA";
      assertNotSame(string1, string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string1);
      assertNotSame(string1, string0);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-797, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(-797, comment0.getPosition());
      assertEquals("lB1a?bM,{uA", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(-797, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertNotNull(comment0);
      assertFalse(string1.equals((Object)string0));
      
      ThrowStatement throwStatement0 = new ThrowStatement(int0, (AstNode) name0);
      assertNotSame(string0, string1);
      assertEquals(50, throwStatement0.getType());
      assertEquals(-797, throwStatement0.getPosition());
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(-1, throwStatement0.getLineno());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(-797, throwStatement0.getAbsolutePosition());
      assertEquals("50", throwStatement0.toString());
      assertEquals(0, throwStatement0.depth());
      assertEquals(1, throwStatement0.getLength());
      assertEquals(-1, name0.getLineno());
      assertEquals("#", name0.getIdentifier());
      assertEquals(1, name0.depth());
      assertEquals(-797, name0.getAbsolutePosition());
      assertEquals(1, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.getPosition());
      assertEquals("#", name0.getString());
      assertEquals(1, name0.getLength());
      assertEquals(false, name0.hasChildren());
      assertNotNull(throwStatement0);
      assertFalse(string0.equals((Object)string1));
      
      astRoot0.addChildToBack((com.google.javascript.rhino.head.Node) throwStatement0);
      assertNotSame(string0, string1);
      assertEquals(50, throwStatement0.getType());
      assertEquals(-797, throwStatement0.getPosition());
      assertEquals(false, throwStatement0.hasChildren());
      assertEquals(-1, throwStatement0.getLineno());
      assertNull(throwStatement0.getJsDoc());
      assertEquals(-797, throwStatement0.getAbsolutePosition());
      assertEquals("50", throwStatement0.toString());
      assertEquals(0, throwStatement0.depth());
      assertEquals(1, throwStatement0.getLength());
      assertEquals(-1, name0.getLineno());
      assertEquals("#", name0.getIdentifier());
      assertEquals(1, name0.depth());
      assertEquals(-797, name0.getAbsolutePosition());
      assertEquals(1, name0.length());
      assertNull(name0.getJsDoc());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.getPosition());
      assertEquals("#", name0.getString());
      assertEquals(1, name0.getLength());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-797, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-797, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertFalse(string0.equals((Object)string1));
      
      name0.setJsDocNode(comment0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(-1, name0.getLineno());
      assertEquals("#", name0.getIdentifier());
      assertEquals(1, name0.depth());
      assertEquals(-797, name0.getAbsolutePosition());
      assertEquals(1, name0.length());
      assertEquals("39", name0.toString());
      assertEquals("lB1a?bM,{uA", name0.getJsDoc());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.getPosition());
      assertEquals("#", name0.getString());
      assertEquals(1, name0.getLength());
      assertEquals(false, name0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-797, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(-797, comment0.getPosition());
      assertEquals("lB1a?bM,{uA", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(-797, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string1, config0, (ErrorReporter) toolErrorReporter0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("#", simpleSourceFile0.toString());
      assertEquals("#", simpleSourceFile0.getName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals("#", node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-797, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-797, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(node0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test5()  throws Throwable  {
      String string0 = "public";
      EmptyExpression emptyExpression0 = new EmptyExpression();
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNotNull(emptyExpression0);
      
      AstRoot astRoot0 = emptyExpression0.getAstRoot();
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNull(astRoot0);
      
      StaticSourceFile staticSourceFile0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test6()  throws Throwable  {
      int int0 = (-771);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-771, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertNotNull(astRoot0);
      
      EmptyExpression emptyExpression0 = new EmptyExpression();
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getPosition());
      assertNotNull(emptyExpression0);
      
      astRoot0.addChild((AstNode) emptyExpression0);
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(771, astRoot0.getLength());
      assertEquals(-771, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals("128", emptyExpression0.toString());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.depth());
      assertEquals(770, emptyExpression0.getPosition());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertEquals(false, emptyExpression0.hasChildren());
      
      String string0 = null;
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNull(simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNull(simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test7()  throws Throwable  {
      int int0 = (-793);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-793, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-793, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertNotNull(astRoot0);
      
      Scope scope0 = new Scope();
      assertEquals(0, scope0.depth());
      assertEquals("129", scope0.toString());
      assertEquals(false, scope0.hasChildren());
      assertEquals(-1, scope0.getPosition());
      assertEquals(129, scope0.getType());
      assertEquals(-1, scope0.getLineno());
      assertEquals(-1, scope0.getAbsolutePosition());
      assertNull(scope0.getJsDoc());
      assertEquals(1, scope0.getLength());
      assertNotNull(scope0);
      
      astRoot0.addChild((AstNode) scope0);
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(793, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-793, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-793, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, scope0.depth());
      assertEquals("129", scope0.toString());
      assertEquals(792, scope0.getPosition());
      assertEquals(false, scope0.hasChildren());
      assertEquals(129, scope0.getType());
      assertEquals(-1, scope0.getLineno());
      assertEquals(-1, scope0.getAbsolutePosition());
      assertNull(scope0.getJsDoc());
      assertEquals(1, scope0.getLength());
      
      String string0 = null;
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNull(simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNull(simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test8()  throws Throwable  {
      int int0 = (-758);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-758, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-758, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      boolean boolean0 = true;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      XmlMemberGet xmlMemberGet0 = new XmlMemberGet();
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getAbsolutePosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(0, xmlMemberGet0.depth());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(1, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      assertEquals(-1, xmlMemberGet0.getPosition());
      assertNotNull(xmlMemberGet0);
      
      astRoot0.addChild((AstNode) xmlMemberGet0);
      assertEquals(-758, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-758, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(758, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(xmlMemberGet0.getJsDoc());
      assertEquals(-1, xmlMemberGet0.getLineno());
      assertEquals(-1, xmlMemberGet0.getAbsolutePosition());
      assertEquals(1, xmlMemberGet0.depth());
      assertEquals(757, xmlMemberGet0.getPosition());
      assertEquals("143", xmlMemberGet0.toString());
      assertEquals(false, xmlMemberGet0.hasChildren());
      assertEquals(-1, xmlMemberGet0.getOperatorPosition());
      assertEquals(1, xmlMemberGet0.getLength());
      assertEquals(143, xmlMemberGet0.getType());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      String string0 = "eWMinKutes";
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, context0.generateObserverCount);
      assertFalse(context0.generateObserverCount);
      assertEquals("eWMinKutes", simpleSourceFile0.getName());
      assertEquals("eWMinKutes", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(simpleSourceFile0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertFalse(context0.generateObserverCount);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(toolErrorReporter0);
      
      Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInc());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(758, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals("eWMinKutes", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-758, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-758, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.depth());
      assertEquals(758, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("eWMinKutes", simpleSourceFile0.getName());
      assertEquals("eWMinKutes", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(node0);
  }

  @Test
  public void test9()  throws Throwable  {
      int int0 = (-771);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-771, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNotNull(astRoot0);
      
      String string0 = null;
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNull(simpleSourceFile0.getName());
      assertNull(simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.rhino.head.Node.newNumber((double) int0);
      assertEquals((-771.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals((-771.0), numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0, numberLiteral0.depth());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildToBack((com.google.javascript.rhino.head.Node) numberLiteral0);
      assertEquals((-771.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals((-771.0), numberLiteral0.getNumber(), 0.01D);
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals("40", numberLiteral0.toString());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-771, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-771, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      // Undeclared exception!
      try {
        Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
