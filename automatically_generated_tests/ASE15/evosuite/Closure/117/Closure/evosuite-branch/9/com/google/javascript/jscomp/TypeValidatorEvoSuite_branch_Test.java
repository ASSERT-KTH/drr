/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:56:26 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.CreateSyntheticBlocks;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.InlineSimpleMethods;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class TypeValidatorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      JSType jSType0 = null;
      int int0 = (-215);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-215, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      
      String string0 = "";
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, node0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1, jSError0.getCharno());
      assertEquals(-1, jSError0.getLineNumber());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-215, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      assertEquals(-1, jSError0.getCharno());
      assertEquals(-1, jSError0.getLineNumber());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-215, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      
      // Undeclared exception!
      try {
        boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) typeValidator_TypeMismatch0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      JSType jSType0 = null;
      String string0 = null;
      int int0 = (-9);
      DiagnosticType diagnosticType0 = CreateSyntheticBlocks.INVALID_MARKER_USAGE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[6];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(CheckLevel.WARNING, jSError0.getDefaultLevel());
      assertEquals(-9, jSError0.getCharno());
      assertEquals(-9, jSError0.getLineNumber());
      assertEquals(0, jSError0.getNodeLength());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      assertEquals(CheckLevel.WARNING, jSError0.getDefaultLevel());
      assertEquals(-9, jSError0.getCharno());
      assertEquals(-9, jSError0.getLineNumber());
      assertEquals(0, jSError0.getNodeLength());
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) stringArray0[0]);
      assertFalse(boolean0);
      assertEquals(CheckLevel.WARNING, jSError0.getDefaultLevel());
      assertEquals(-9, jSError0.getCharno());
      assertEquals(-9, jSError0.getLineNumber());
      assertEquals(0, jSError0.getNodeLength());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 27;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      boolean boolean0 = false;
      typeValidator0.setShouldReport(boolean0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(36, jSTypeNativeArray0[0].ordinal());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isRecordType());
      
      String string0 = "com.google.common.collect.AllEqualOrdering";
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isRecordType());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-211);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      boolean boolean0 = true;
      String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertEquals("?", string0);
      assertNotNull(string0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-200);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 27;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(36, jSTypeNativeArray0[0].ordinal());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      
      String string0 = "'vgLRJ/N";
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, string0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Scope scope0 = Scope.createGlobalScope(node0);
      assertNotNull(scope0);
      assertEquals(false, scope0.isLocal());
      assertEquals(0, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      
      CompilerInput compilerInput0 = null;
      Scope.Var scope_Var0 = scope0.declare(string0, node0, jSType0, compilerInput0, boolean0);
      assertNotNull(scope_Var0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, scope0.isLocal());
      assertEquals(1, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      // Undeclared exception!
      try {
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(string0, compilerInput0, node0, node0, scope_Var0, string0, jSType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 33;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(33, node0.getType());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      boolean boolean0 = node0.isContinue();
      assertFalse(boolean0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(33, node0.getType());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      String string0 = null;
      SourceAst sourceAst0 = null;
      String string1 = "Cannot do {0} access on a {1}";
      SyntheticAst syntheticAst0 = new SyntheticAst(string1);
      assertNotNull(syntheticAst0);
      
      InputId inputId0 = syntheticAst0.getInputId();
      assertNotNull(inputId0);
      assertEquals("Cannot do {0} access on a {1}", inputId0.getIdName());
      
      CompilerInput compilerInput0 = new CompilerInput(sourceAst0, inputId0, boolean0);
      assertNotNull(compilerInput0);
      assertEquals("Cannot do {0} access on a {1}", inputId0.getIdName());
      assertEquals("Cannot do {0} access on a {1}", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals("Cannot do {0} access on a {1}", compilerInput0.toString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(33, node0.getType());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      
      Scope.Var scope_Var0 = null;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      // Undeclared exception!
      try {
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(string0, compilerInput0, node0, node0, scope_Var0, string1, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 27;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(27, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(36, jSTypeNativeArray0[0].ordinal());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplatizedType());
      
      typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(27, node0.getType());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplatizedType());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 27;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(36, jSTypeNativeArray0[0].ordinal());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isNominalConstructor());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isNominalConstructor());
      
      typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isNominalConstructor());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 27;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeRegistry0.resetForTypeCheck();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(36, jSTypeNativeArray0[0].ordinal());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      
      // Undeclared exception!
      try {
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-201);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      
      boolean boolean0 = node0.isObjectLit();
      assertFalse(boolean0);
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      assertNotNull(jSType0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      
      String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertEquals("?", string0);
      assertNotNull(string0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, string0, jSType0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 27;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(36, jSTypeNativeArray0[0].ordinal());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(27, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-200);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, functionType0, node0, string0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-201);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-200);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isInc());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, string0, functionType0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isInc());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-201);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      
      boolean boolean0 = node0.isObjectLit();
      assertFalse(boolean0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      assertNotNull(jSType0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      
      String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertEquals("?", string0);
      assertNotNull(string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      typeValidator0.expectString(nodeTraversal0, node0, jSType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-211);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      
      boolean boolean0 = node0.isObjectLit();
      assertFalse(boolean0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      assertNotNull(jSType0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      
      String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertEquals("?", string0);
      assertNotNull(string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-211, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-201);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      String string0 = " `";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, string0);
      assertTrue(boolean0);
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isExprResult());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
  }

  @Test
  public void test18()  throws Throwable  {
      JSType jSType0 = null;
      int int0 = (-215);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(-215, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      
      String string0 = "";
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, node0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(-215, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(-1, jSError0.getCharno());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-1, jSError0.getLineNumber());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(-215, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(-1, jSError0.getCharno());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-1, jSError0.getLineNumber());
      
      String string1 = typeValidator_TypeMismatch0.toString();
      assertEquals("(null, null)", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(-215, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(-1, jSError0.getCharno());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-1, jSError0.getLineNumber());
  }

  @Test
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = (-201);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      
      boolean boolean0 = node0.isObjectLit();
      assertFalse(boolean0);
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      
      JSType jSType0 = globalNamespace0.getTypeOfThis();
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      
      String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertEquals("?", string0);
      assertNotNull(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
      
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, string0);
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(-201, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNull());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-200);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isStringKey());
      
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, string0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(-200, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-200);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-200, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabelName());
      
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, string0);
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-200, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-200);
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-200, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTry());
      
      String string0 = "";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      InlineSimpleMethods inlineSimpleMethods0 = new InlineSimpleMethods(compiler0);
      assertNotNull(inlineSimpleMethods0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = inlineSimpleMethods0.getActingCallback();
      assertNotNull(nodeTraversal_Callback0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, closureCodingConvention0);
      assertNotNull(typedScopeCreator0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0, (ScopeCreator) typedScopeCreator0);
      assertNotNull(nodeTraversal0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-200, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getWarningCount());
  }
}
