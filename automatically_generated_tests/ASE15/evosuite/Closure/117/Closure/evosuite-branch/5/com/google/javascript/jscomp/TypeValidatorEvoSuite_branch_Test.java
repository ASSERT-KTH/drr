/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:12:34 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CleanupPasses;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerInput;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.InferJSDocInfo;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceAst;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.TemplatizedType;
import com.google.javascript.rhino.jstype.UnionType;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypeValidatorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = (-3381);
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.MISSING_PROVIDE_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[10];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-3381, jSError0.getLineNumber());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(-3381, jSError0.getCharno());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-3381, jSError0.getLineNumber());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(-3381, jSError0.getCharno());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) typeValidator_TypeMismatch0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals(-3381, jSError0.getLineNumber());
      assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      assertEquals(-3381, jSError0.getCharno());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      JSType jSType0 = null;
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSType0);
      //  // Unstable assertion: assertNull(templatizedType0);
      
      DiagnosticType diagnosticType0 = TypeCheck.EXPECTED_THIS_TYPE;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[4];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      //  // Unstable assertion: assertNotNull(jSError0);
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, templatizedType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) templatizedType0);
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = false;
      typeValidator0.setShouldReport(boolean0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("?", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, string1);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      
      boolean boolean0 = true;
      String string0 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string0);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals("?", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDebugger());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.optimizeParameters);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      
      FunctionType functionType1 = JSType.toMaybeFunctionType((JSType) functionType0);
      assertNotNull(functionType1);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isTemplatizedType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNoObjectType());
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType1);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isTemplatizedType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNoObjectType());
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
  }

  @Test
  public void test05()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.foldConstants);
      assertNotNull(jSTypeRegistry0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      CompilerInput compilerInput0 = new CompilerInput((SourceAst) syntheticAst0, compilerOptions0.inputDelimiter, compilerOptions0.checkControlStructures);
      assertNotNull(compilerInput0);
      assertEquals("// Input %num%", compilerInput0.toString());
      assertEquals("// Input %num%", compilerInput0.getName());
      assertEquals(false, compilerInput0.isExtern());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      
      Scope.Var scope_Var0 = null;
      // Undeclared exception!
      try {
        Scope.Var scope_Var1 = typeValidator0.expectUndeclaredVariable(compilerOptions0.checkMissingGetCssNameBlacklist, compilerInput0, node0, node0, scope_Var0, compilerOptions0.locale, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWhile());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWhile());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GLOBAL_THIS;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = ObjectType.cast(jSType0);
      assertNotNull(objectType0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isTemplatizedType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(true, objectType0.matchesObjectContext());
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(true, objectType0.isNominalType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isConstructor());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectSuperType(nodeTraversal0, node0, objectType0, objectType0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isTemplatizedType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(true, objectType0.matchesObjectContext());
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(true, objectType0.isNominalType());
      assertEquals(true, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isConstructor());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isResolved());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNumber());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test08()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetterDef());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.removeUnusedPrototypeProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType0, compilerOptions0.renamePrefixNamespace, functionType0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetterDef());
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
  }

  @Test
  public void test09()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, int0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeTryCatchFinally);
  }

  @Test
  public void test10()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isUnionType());
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, compilerOptions0.renamePrefix);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDelProp());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isUnionType());
      assertTrue(boolean0);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
  }

  @Test
  public void test11()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isString());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isString());
      assertEquals("?", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      
      boolean boolean1 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, functionType0, functionType0, node0, string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isString());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test12()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAssign());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.markAsCompiled);
      assertNotNull(jSTypeRegistry0);
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAssign());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
  }

  @Test
  public void test13()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateArguments());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, unionType0, string0, unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isTypeOf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      String string0 = "JSC_EVENTFULOBJET_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals("?", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, string1, functionType0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test15()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals("?", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, string1, jSType0);
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test16()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(39, node0.getType());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, compilerOptions0.inputDelimiter);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChangeTime());
      assertEquals(39, node0.getType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.disambiguateProperties);
  }

  @Test
  public void test17()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = node0.wasEmptyNode();
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(boolean0);
      
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals("?", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, functionType0, string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test18()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInc());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, unionType0, string0);
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test19()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, compilerOptions0.aliasStringsBlacklist);
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
  }

  @Test
  public void test20()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("?", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalConstructor());
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, string1);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCast());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test21()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      String string0 = "JSC_EVENTFULOBJET_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals("?", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      
      typeValidator0.expectNumber(nodeTraversal0, node0, functionType0, string1);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isWhile());
      assertEquals(true, node0.isString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test22()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertNotNull(string1);
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("?", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isFunctionType());
      
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isFunctionType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test23()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
      
      typeValidator0.expectString(nodeTraversal0, node0, jSType0, compilerOptions0.aliasStringsBlacklist);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.foldConstants);
  }

  @Test
  public void test24()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectAnyObject(nodeTraversal0, node0, unionType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssign());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test25()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      
      typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(true, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
  }

  @Test
  public void test26()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
  }

  @Test
  public void test27()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.foldConstants);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      typeValidator0.expectActualObject(nodeTraversal0, node0, unionType0, compilerOptions0.syntheticBlockStartMarker);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isParamList());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
  }

  @Test
  public void test28()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isNumber());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ARRAY_TYPE;
      JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, compilerOptions0.syntheticBlockStartMarker);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplatizedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSType0.matchesObjectContext());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isNumber());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
  }

  @Test
  public void test29()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, unionType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCast());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertNotNull(defaultPassConfig0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      CompilerOptions compilerOptions0 = defaultPassConfig0.options;
      assertNotNull(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      CleanupPasses cleanupPasses0 = new CleanupPasses(compilerOptions0);
      assertNotNull(cleanupPasses0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      InferJSDocInfo inferJSDocInfo0 = cleanupPasses0.makeInferJsDocInfo(compiler0);
      assertNotNull(inferJSDocInfo0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) inferJSDocInfo0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      double double0 = 0.0;
      int int0 = 0;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLineno());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, compilerOptions0.convertToDottedProperties);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, unionType0, compilerOptions0.instrumentationTemplate);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplatizedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLineno());
      assertTrue(boolean0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
  }

  @Test
  public void test31()  throws Throwable  {
      JSType jSType0 = null;
      TemplatizedType templatizedType0 = JSType.toMaybeTemplatizedType(jSType0);
      //  // Unstable assertion: assertNull(templatizedType0);
      
      DiagnosticType diagnosticType0 = TypeCheck.EXPECTED_THIS_TYPE;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[4];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      //  // Unstable assertion: assertNotNull(jSError0);
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, templatizedType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      String string0 = typeValidator_TypeMismatch0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals("(null, null)", string0);
  }

  @Test
  public void test32()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test
  public void test33()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, string0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test34()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      String string0 = "JSC_EVENTFUL_OBJECT_PURELY_LOCAL";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isAssign());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      
      NodeTraversal.Callback nodeTraversal_Callback0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, nodeTraversal_Callback0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertNotNull(tightenTypes0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      FunctionType functionType1 = (FunctionType)ObjectType.cast((JSType) functionType0);
      assertNotNull(functionType1);
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isTemplatizedType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplatizedType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      
      // Undeclared exception!
      try {
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType1, functionType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
