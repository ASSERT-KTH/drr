/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:10:30 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.FunctionCall;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.RegExpLiteral;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.nio.charset.Charset;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(134, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      
      FunctionCall functionCall0 = new FunctionCall();
      assertNotNull(functionCall0);
      assertNull(functionCall0.getJsDoc());
      assertEquals(-1, functionCall0.getPosition());
      assertEquals(38, functionCall0.getType());
      assertEquals(1, functionCall0.getLength());
      assertEquals(-1, functionCall0.getLineno());
      assertEquals(-1, functionCall0.getAbsolutePosition());
      assertEquals("38", functionCall0.toString());
      assertEquals(false, functionCall0.hasChildren());
      assertEquals(-1, functionCall0.getLp());
      assertEquals(0, functionCall0.depth());
      assertEquals(-1, functionCall0.getRp());
      
      astRoot0.addChild((AstNode) functionCall0);
      assertEquals(0, astRoot0.depth());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(134, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-134, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(functionCall0.getJsDoc());
      assertEquals(-135, functionCall0.getPosition());
      assertEquals(38, functionCall0.getType());
      assertEquals(1, functionCall0.depth());
      assertEquals(1, functionCall0.getLength());
      assertEquals(-1, functionCall0.getLineno());
      assertEquals(-1, functionCall0.getAbsolutePosition());
      assertEquals("38", functionCall0.toString());
      assertEquals(false, functionCall0.hasChildren());
      assertEquals(-1, functionCall0.getLp());
      assertEquals(-1, functionCall0.getRp());
      
      String string0 = "NY3DLCE|^e47#";
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(134, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(134, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isQuotedString());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ErrorReporter errorReporter0 = null;
      // Undeclared exception!
      try {
        Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      
      String string0 = "NY3DLCE|^e47#";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNotNull(regExpLiteral0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      
      regExpLiteral0.setValue(string0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      regExpLiteral0.setFlags(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      assertEquals("", regExpLiteral0.getFlags());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      
      astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) regExpLiteral0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      assertEquals("", regExpLiteral0.getFlags());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      
      ErrorReporter errorReporter0 = null;
      Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(string0, string1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVar());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isLabelName());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isGetElem());
      assertEquals(true, node1.isScript());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getSourcePosition());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isParamList());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isThis());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isNot());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isNull());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isOr());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isVoid());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      
      String string0 = "NY3DLCE|^e47#";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNotNull(regExpLiteral0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals(134, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getValue());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      
      regExpLiteral0.setValue(string0);
      assertNull(regExpLiteral0.getFlags());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      
      regExpLiteral0.setFlags(string0);
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getFlags());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      
      astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) regExpLiteral0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getFlags());
      assertEquals(134, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals("NY3DLCE|^e47#", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      ErrorReporter errorReporter0 = null;
      Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isFalse());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isRegExp());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isNumber());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isGetProp());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isDec());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isLabelName());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isBreak());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
  }

  @Test
  public void test3()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      
      String string0 = "7e";
      Name name0 = new Name(int0, string0);
      assertNotNull(name0);
      assertEquals(0, name0.depth());
      assertEquals(134, name0.getAbsolutePosition());
      assertEquals(2, name0.length());
      assertEquals(-1, name0.getLineno());
      assertEquals(2, name0.getLength());
      assertEquals("39", name0.toString());
      assertEquals("7e", name0.getString());
      assertEquals("7e", name0.getIdentifier());
      assertEquals(134, name0.getPosition());
      assertNull(name0.getJsDoc());
      assertEquals(39, name0.getType());
      assertEquals(false, name0.hasChildren());
      
      astRoot0.addChild((AstNode) name0);
      assertEquals(134, name0.getAbsolutePosition());
      assertEquals(2, name0.length());
      assertEquals(-1, name0.getLineno());
      assertEquals(2, name0.getLength());
      assertEquals("39", name0.toString());
      assertEquals("7e", name0.getString());
      assertEquals("7e", name0.getIdentifier());
      assertEquals(1, name0.depth());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.getPosition());
      assertEquals(39, name0.getType());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(2, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      
      Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isComma());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isTypeOf());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isFor());
      assertEquals(true, node1.hasOneChild());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isArrayLit());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isDelProp());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isParamList());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isThis());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isNew());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isTrue());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVoid());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(2, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
  }

  @Test
  public void test4() {}
//   @Test
//   public void test4()  throws Throwable  {
//       String string0 = "t\\QX_9hP";
//       boolean boolean0 = false;
//       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
//       //  // Unstable assertion: assertNotNull(simpleSourceFile0);
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals("t\\QX_9hP", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals("t\\QX_9hP", simpleSourceFile0.getName());
//       
//       Locale locale0 = Locale.CHINA;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       int int0 = 231;
//       AstRoot astRoot0 = new AstRoot(int0);
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(231, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       BreakStatement breakStatement0 = new BreakStatement(int0, int0);
//       //  // Unstable assertion: assertNotNull(breakStatement0);
//       //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
//       //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(231, breakStatement0.getLength());
//       //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
//       //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
//       //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
//       //  // Unstable assertion: assertEquals(231, breakStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
//       //  // Unstable assertion: assertEquals(231, breakStatement0.getPosition());
//       
//       astRoot0.addChild((AstNode) breakStatement0);
//       //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
//       //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(231, breakStatement0.getLength());
//       //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
//       //  // Unstable assertion: assertEquals(1, breakStatement0.depth());
//       //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
//       //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
//       //  // Unstable assertion: assertEquals(231, breakStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, breakStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(231, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals("t\\QX_9hP", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals("t\\QX_9hP", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(true, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals("t\\QX_9hP", node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(2147483647, node0.getSourceOffset());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      
      String string0 = "NY3DLCE|^e47#";
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      ErrorReporter errorReporter0 = null;
      Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetProp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCatch());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isCatch());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isName());
      assertEquals(true, node1.isScript());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isThrow());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isContinue());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isAdd());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(1, node1.getLength());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isIf());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isOr());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(136, astRoot0.getType());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      
      String string0 = "7e";
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNotNull(regExpLiteral0);
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(134, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      
      regExpLiteral0.setValue(string0);
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(134, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals("7e", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      
      astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) regExpLiteral0);
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(134, regExpLiteral0.getPosition());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals("7e", regExpLiteral0.getValue());
      assertEquals(134, regExpLiteral0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isFor());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isFor());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isTry());
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isLabelName());
      assertEquals(true, node1.isScript());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isIf());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isGetProp());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isThrow());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isName());
      assertEquals(0, node1.getLength());
      assertEquals(1, node1.getChildCount());
      assertEquals(132, node1.getType());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isEmpty());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(136, astRoot0.getType());
      assertEquals(134, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
  }

  @Test
  public void test7()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 134;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      
      String string0 = "7e";
      Name name0 = new Name(int0, string0);
      assertNotNull(name0);
      assertNull(name0.getJsDoc());
      assertEquals("7e", name0.getString());
      assertEquals("7e", name0.getIdentifier());
      assertEquals(134, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, name0.getLineno());
      assertEquals(0, name0.depth());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(2, name0.length());
      assertEquals(134, name0.getPosition());
      assertEquals(2, name0.getLength());
      
      astRoot0.addChild((AstNode) name0);
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(2, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.getPosition());
      assertEquals("7e", name0.getString());
      assertEquals("7e", name0.getIdentifier());
      assertEquals(134, name0.getAbsolutePosition());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, name0.getLineno());
      assertEquals("39", name0.toString());
      assertEquals(39, name0.getType());
      assertEquals(2, name0.length());
      assertEquals(1, name0.depth());
      assertEquals(2, name0.getLength());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      
      StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
      assertNull(staticSourceFile0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      assertEquals(2147483647, node1.getSourceOffset());
      assertEquals(false, node1.isHook());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isGetterDef());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isContinue());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isParamList());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isExprResult());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isOr());
      assertEquals(true, node1.isScript());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isCase());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isNew());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-2147483514, node0.getSourceOffset());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, astRoot0.depth());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(134, astRoot0.getPosition());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(2, astRoot0.getLength());
      assertEquals(134, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
  }

  @Test
  public void test8() {}
//   @Test
//   public void test8()  throws Throwable  {
//       String string0 = "";
//       boolean boolean0 = false;
//       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
//       //  // Unstable assertion: assertNotNull(simpleSourceFile0);
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals("", simpleSourceFile0.toString());
//       
//       Locale locale0 = Locale.CHINA;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       int int0 = 69;
//       AstRoot astRoot0 = new AstRoot(int0);
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(69, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(69, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       
//       AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
//       //  // Unstable assertion: assertSame(astRoot0, astRoot1);
//       //  // Unstable assertion: assertSame(astRoot1, astRoot0);
//       //  // Unstable assertion: assertNotNull(astRoot1);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(69, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(69, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals("69", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(69, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(69, astRoot1.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot1.depth());
//       //  // Unstable assertion: assertEquals(0, astRoot1.getRegexpCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getLineno());
//       //  // Unstable assertion: assertEquals(69, astRoot1.getPosition());
//       //  // Unstable assertion: assertEquals(false, astRoot1.isInStrictMode());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot1.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, astRoot1.hasChildren());
//       //  // Unstable assertion: assertNull(astRoot1.getSourceName());
//       //  // Unstable assertion: assertEquals(1, astRoot1.getLength());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getEncodedSourceEnd());
//       //  // Unstable assertion: assertNull(astRoot1.getEncodedSource());
//       //  // Unstable assertion: assertEquals("69", astRoot1.toString());
//       //  // Unstable assertion: assertEquals(69, astRoot1.getType());
//       //  // Unstable assertion: assertEquals(0, astRoot1.getFunctionCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot1.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(0, astRoot1.getParamCount());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       // Undeclared exception!
//       try {
//         Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test9() {}
//   @Test
//   public void test9()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       //  // Unstable assertion: assertFalse(boolean0);
//       
//       String string0 = ">";
//       AstRoot astRoot0 = new AstRoot();
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       
//       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
//       //  // Unstable assertion: assertNotNull(simpleSourceFile0);
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals(">", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(">", simpleSourceFile0.toString());
//       
//       JSDocInfo jSDocInfo0 = new JSDocInfo();
//       //  // Unstable assertion: assertNotNull(jSDocInfo0);
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isIdGenerator());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
//       //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
//       
//       Set<String> set0 = jSDocInfo0.getModifies();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isIdGenerator());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
//       //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
//       
//       double double0 = (-2797.7941347);
//       NumberLiteral numberLiteral0 = (NumberLiteral)com.google.javascript.rhino.head.Node.newNumber(double0);
//       //  // Unstable assertion: assertNotNull(numberLiteral0);
//       //  // Unstable assertion: assertEquals(1, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals((-2797.7941347), numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertEquals((-2797.7941347), numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       
//       astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) numberLiteral0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(1, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals((-2797.7941347), numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertEquals((-2797.7941347), numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isIdGenerator());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
//       //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
//       
//       Context context0 = Context.getCurrentContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertEquals(false, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals(">", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(">", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(2147483647, node0.getSourceOffset());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(">", node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(true, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isIdGenerator());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
//       //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
//       //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
//       //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
//       //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }
}
