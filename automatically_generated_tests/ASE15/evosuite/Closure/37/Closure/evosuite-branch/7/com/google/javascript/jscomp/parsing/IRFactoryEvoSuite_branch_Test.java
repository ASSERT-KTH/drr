/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 00:15:22 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.BreakStatement;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.IfStatement;
import com.google.javascript.rhino.head.ast.Label;
import com.google.javascript.rhino.head.ast.LabeledStatement;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NewExpression;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.ObjectLiteral;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      
      int int0 = 0;
      SwitchCase switchCase0 = new SwitchCase(int0, int0);
      assertNotNull(switchCase0);
      assertEquals(0, switchCase0.getPosition());
      assertEquals(0, switchCase0.getLength());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(0, switchCase0.getPosition());
      assertEquals(0, switchCase0.getLength());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "%G";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      IfStatement ifStatement0 = new IfStatement(int0, int0);
      assertNotNull(ifStatement0);
      assertNull(ifStatement0.getJsDoc());
      assertEquals(0, ifStatement0.getLength());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(-1, ifStatement0.getRp());
      assertEquals(0, ifStatement0.depth());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getLp());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(112, ifStatement0.getType());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      
      switchCase0.addStatement((AstNode) ifStatement0);
      assertEquals(0, switchCase0.getPosition());
      assertEquals(0, switchCase0.getLength());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(0, ifStatement0.getLength());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(1, ifStatement0.depth());
      assertEquals(-1, ifStatement0.getRp());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getLp());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(112, ifStatement0.getType());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      
      NewExpression newExpression0 = new NewExpression();
      assertNotNull(newExpression0);
      assertEquals(-1, newExpression0.getPosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      
      List<AstNode> list0 = newExpression0.getArguments();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(-1, newExpression0.getPosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      
      switchCase0.setStatements(list0);
      assertEquals(0, switchCase0.getPosition());
      assertEquals(0, switchCase0.getLength());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertNull(switchCase0.getJsDoc());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(-1, newExpression0.getPosition());
      assertEquals("30", newExpression0.toString());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(30, newExpression0.getType());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(-1, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, node0.isAssign());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      
      int int0 = 0;
      SwitchCase switchCase0 = new SwitchCase(int0, int0);
      assertNotNull(switchCase0);
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertEquals(0, switchCase0.depth());
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.getLength());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getPosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(0, switchCase0.getAbsolutePosition());
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertEquals(0, switchCase0.depth());
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.getLength());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getPosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "%G";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      IfStatement ifStatement0 = new IfStatement(int0, int0);
      assertNotNull(ifStatement0);
      assertEquals(-1, ifStatement0.getLp());
      assertEquals(0, ifStatement0.depth());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(0, ifStatement0.getLength());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      assertEquals(112, ifStatement0.getType());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getRp());
      
      switchCase0.addStatement((AstNode) ifStatement0);
      assertEquals(-1, ifStatement0.getLp());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(1, ifStatement0.depth());
      assertEquals(0, ifStatement0.getLength());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      assertEquals(112, ifStatement0.getType());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getRp());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertEquals(0, switchCase0.depth());
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.getLength());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(0, switchCase0.getPosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(0, switchCase0.getAbsolutePosition());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      
      int int0 = 0;
      SwitchCase switchCase0 = new SwitchCase(int0, int0);
      assertNotNull(switchCase0);
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.depth());
      assertEquals(0, switchCase0.getLength());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertEquals(0, switchCase0.getPosition());
      assertEquals(true, switchCase0.isDefault());
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(0, switchCase0.getAbsolutePosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.depth());
      assertEquals(0, switchCase0.getLength());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertEquals(0, switchCase0.getPosition());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "%G";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isTypeOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(132, node0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertNotNull(labeledStatement0);
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(0, labeledStatement0.depth());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(false, labeledStatement0.hasChildren());
      
      Node node0 = null;
      astRoot0.addChildBefore((Node) labeledStatement0, node0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(1, labeledStatement0.getLength());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(0, labeledStatement0.depth());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(false, labeledStatement0.hasChildren());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "const";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      
      StaticSourceFile staticSourceFile0 = null;
      int int0 = 19;
      String string0 = "invalid assignment target";
      BreakStatement breakStatement0 = new BreakStatement(int0);
      assertNotNull(breakStatement0);
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(0, breakStatement0.depth());
      assertEquals(120, breakStatement0.getType());
      assertEquals(19, breakStatement0.getPosition());
      assertEquals(19, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      
      astRoot0.addChild((AstNode) breakStatement0);
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(1, breakStatement0.depth());
      assertEquals(20, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(19, breakStatement0.getAbsolutePosition());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(21, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isRegExp());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isContinue());
      assertEquals(21, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(21, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "\n * @";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int0 = 0;
      ObjectLiteral objectLiteral0 = new ObjectLiteral(int0);
      assertNotNull(objectLiteral0);
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      
      astRoot0.addChildToBack((Node) objectLiteral0);
      assertEquals(-1, objectLiteral0.getLineno());
      assertEquals(false, objectLiteral0.isDestructuring());
      assertEquals(0, objectLiteral0.getPosition());
      assertEquals("66", objectLiteral0.toString());
      assertEquals(0, objectLiteral0.depth());
      assertNull(objectLiteral0.getJsDoc());
      assertEquals(1, objectLiteral0.getLength());
      assertEquals(false, objectLiteral0.hasChildren());
      assertEquals(66, objectLiteral0.getType());
      assertEquals(0, objectLiteral0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(136, astRoot0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SwitchCase switchCase0 = new SwitchCase();
      assertNotNull(switchCase0);
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.depth());
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1, switchCase0.getAbsolutePosition());
      assertEquals(-1, switchCase0.getPosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(true, switchCase0.isDefault());
      
      AstRoot astRoot0 = switchCase0.getAstRoot();
      assertNull(astRoot0);
      assertEquals(115, switchCase0.getType());
      assertEquals(0, switchCase0.depth());
      assertEquals(1, switchCase0.getLength());
      assertEquals(-1, switchCase0.getAbsolutePosition());
      assertEquals(-1, switchCase0.getPosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals("115", switchCase0.toString());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(true, switchCase0.isDefault());
      
      String string0 = "exp/";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("exp/", simpleSourceFile0.getName());
      assertEquals("exp/", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      
      StaticSourceFile staticSourceFile0 = null;
      int int0 = 19;
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      String string0 = "invalid assignment target";
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(19, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(19, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(19, comment0.getPosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals("invalid assignment target", comment0.getValue());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      
      astRoot0.setJsDocNode(comment0);
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("invalid assignment target", astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(19, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(19, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(19, comment0.getPosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals("invalid assignment target", comment0.getValue());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
      assertNotNull(node0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("invalid assignment target", astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTypeOf());
      assertEquals(1, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      
      StaticSourceFile staticSourceFile0 = null;
      int int0 = (-3);
      String string0 = "invalid assignment target";
      BreakStatement breakStatement0 = new BreakStatement(int0);
      assertNotNull(breakStatement0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-3, breakStatement0.getPosition());
      assertEquals(120, breakStatement0.getType());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-3, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      
      astRoot0.addChild((AstNode) breakStatement0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(-2, breakStatement0.getPosition());
      assertEquals(1, breakStatement0.depth());
      assertEquals(120, breakStatement0.getType());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-3, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getPosition());
      
      Name name0 = new Name(int0);
      assertNotNull(name0);
      assertEquals(false, name0.hasChildren());
      assertEquals(1, name0.getLength());
      assertEquals(0, name0.depth());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.length());
      assertEquals(-1, name0.getLineno());
      assertNull(name0.getString());
      assertNull(name0.getJsDoc());
      assertEquals(-3, name0.getAbsolutePosition());
      assertEquals(-3, name0.getPosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      
      breakStatement0.setBreakLabel(name0);
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(-2, breakStatement0.getPosition());
      assertEquals(1, breakStatement0.depth());
      assertEquals(120, breakStatement0.getType());
      assertEquals(false, breakStatement0.hasChildren());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-3, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(false, name0.hasChildren());
      assertEquals(1, name0.getLength());
      assertEquals(-4, name0.getAbsolutePosition());
      assertEquals(39, name0.getType());
      assertEquals(0, name0.length());
      assertEquals(-1, name0.getLineno());
      assertEquals(2, name0.depth());
      assertNull(name0.getString());
      assertNull(name0.getJsDoc());
      assertEquals(-1, name0.getPosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getIdentifier());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      LabeledStatement labeledStatement0 = new LabeledStatement();
      assertNotNull(labeledStatement0);
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(1, labeledStatement0.getLength());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals("133", labeledStatement0.toString());
      
      Node node0 = null;
      astRoot0.addChildBefore((Node) labeledStatement0, node0);
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(1, labeledStatement0.getLength());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals("133", labeledStatement0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      
      int int0 = (-93);
      Label label0 = new Label(int0, int0);
      assertNotNull(label0);
      assertEquals(-93, label0.getAbsolutePosition());
      assertEquals(false, label0.hasChildren());
      assertEquals(-93, label0.getLength());
      assertNull(label0.getJsDoc());
      assertEquals(-93, label0.getPosition());
      assertEquals("130", label0.toString());
      assertEquals(130, label0.getType());
      assertEquals(0, label0.depth());
      assertNull(label0.getName());
      assertEquals(-1, label0.getLineno());
      
      labeledStatement0.addLabel(label0);
      assertEquals(-93, label0.getAbsolutePosition());
      assertEquals(false, label0.hasChildren());
      assertEquals(-93, label0.getLength());
      assertEquals(1, label0.depth());
      assertNull(label0.getJsDoc());
      assertEquals("130", label0.toString());
      assertEquals(-92, label0.getPosition());
      assertEquals(130, label0.getType());
      assertNull(label0.getName());
      assertEquals(-1, label0.getLineno());
      assertEquals(0, labeledStatement0.depth());
      assertEquals(-1, labeledStatement0.getAbsolutePosition());
      assertEquals(1, labeledStatement0.getLength());
      assertNull(labeledStatement0.getJsDoc());
      assertEquals(133, labeledStatement0.getType());
      assertEquals(false, labeledStatement0.hasChildren());
      assertEquals(-1, labeledStatement0.getPosition());
      assertEquals(-1, labeledStatement0.getLineno());
      assertEquals("133", labeledStatement0.toString());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "com.google.javascript.rhino.Node";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node1 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      
      int int0 = 0;
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertNotNull(astRoot1);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertEquals("0", astRoot0.toString());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getType());
      assertEquals(-1, astRoot1.getAbsolutePosition());
      assertEquals(0, astRoot1.depth());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals("0", astRoot1.toString());
      assertNull(astRoot1.getJsDoc());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals(0, astRoot1.getParamCount());
      assertEquals(-1, astRoot1.getEndLineno());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(1, astRoot1.getLength());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(-1, astRoot1.getPosition());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(-1, astRoot1.getLineno());
      assertNull(astRoot1.getSourceName());
      assertEquals(0, astRoot1.getType());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "GETPROPNOWARN";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported syntax: EOF
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      
      int int0 = (-188);
      SwitchCase switchCase0 = new SwitchCase(int0, int0);
      assertNotNull(switchCase0);
      assertEquals(true, switchCase0.isDefault());
      assertEquals(0, switchCase0.depth());
      assertEquals(-188, switchCase0.getLength());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(-1, switchCase0.getLineno());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-188, switchCase0.getAbsolutePosition());
      assertEquals(-188, switchCase0.getPosition());
      assertEquals(false, switchCase0.hasChildren());
      
      astRoot0.addChildrenToBack((Node) switchCase0);
      assertEquals(true, switchCase0.isDefault());
      assertEquals(0, switchCase0.depth());
      assertEquals(-188, switchCase0.getLength());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(-1, switchCase0.getLineno());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-188, switchCase0.getAbsolutePosition());
      assertEquals(-188, switchCase0.getPosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "2M";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      NewExpression newExpression0 = new NewExpression(int0, int0);
      assertNotNull(newExpression0);
      assertEquals(-188, newExpression0.getPosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      assertEquals(-188, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(-188, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertNull(newExpression0.getJsDoc());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      astRoot0.addChildBefore((Node) newExpression0, (Node) switchCase0);
      assertEquals(-188, newExpression0.getPosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      assertEquals(-188, newExpression0.getLength());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(-1, newExpression0.getRp());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(-188, newExpression0.getAbsolutePosition());
      assertEquals(0, newExpression0.depth());
      assertNull(newExpression0.getJsDoc());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(0, switchCase0.depth());
      assertEquals(-188, switchCase0.getLength());
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(-1, switchCase0.getLineno());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-188, switchCase0.getAbsolutePosition());
      assertEquals(-188, switchCase0.getPosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getPosition());
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AstRoot astRoot0 = new AstRoot();
      assertNotNull(astRoot0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      
      int int0 = (-19);
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertNotNull(numberLiteral0);
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals((-19.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals((-19.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("40", numberLiteral0.toString());
      
      astRoot0.addChildToFront((Node) numberLiteral0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals((-19.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals((-19.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals(40, numberLiteral0.getType());
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getValue());
      assertEquals(0, numberLiteral0.depth());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals("40", numberLiteral0.toString());
      
      StaticSourceFile staticSourceFile0 = null;
      String string0 = "YG[)pK9 ";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Context context0 = new Context();
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVar());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
  }
}
