/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:13:07 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.StringLiteral;
import com.google.javascript.rhino.head.ast.SwitchCase;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 21;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(21, astRoot0.getPosition());
      assertEquals(21, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      SwitchCase switchCase0 = new SwitchCase(int0, int0);
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(21, switchCase0.getLength());
      assertEquals(21, switchCase0.getPosition());
      assertEquals(21, switchCase0.getAbsolutePosition());
      assertNull(switchCase0.getJsDoc());
      assertNotNull(switchCase0);
      
      astRoot0.addChildToBack((Node) switchCase0);
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(21, switchCase0.getLength());
      assertEquals(21, switchCase0.getPosition());
      assertEquals(21, switchCase0.getAbsolutePosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(21, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(21, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      
      String string0 = "\n  @";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      switchCase0.addStatement((AstNode) astRoot0);
      assertEquals(115, switchCase0.getType());
      assertEquals("115", switchCase0.toString());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(0, switchCase0.depth());
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(1, switchCase0.getLength());
      assertEquals(21, switchCase0.getPosition());
      assertEquals(21, switchCase0.getAbsolutePosition());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.depth());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(21, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getParamCount());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = (-19);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-19, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-19, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      SwitchCase switchCase0 = new SwitchCase(int0, int0);
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(115, switchCase0.getType());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-19, switchCase0.getLength());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-19, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(-19, switchCase0.getPosition());
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      assertNotNull(switchCase0);
      
      astRoot0.addChildToBack((Node) switchCase0);
      assertEquals(-1, switchCase0.getLineno());
      assertEquals(115, switchCase0.getType());
      assertNull(switchCase0.getJsDoc());
      assertEquals(-19, switchCase0.getLength());
      assertEquals(true, switchCase0.isDefault());
      assertEquals(-19, switchCase0.getAbsolutePosition());
      assertEquals(false, switchCase0.hasChildren());
      assertEquals(-19, switchCase0.getPosition());
      assertEquals(0, switchCase0.depth());
      assertEquals("115", switchCase0.toString());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-19, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-19, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      
      String string0 = "\n  @";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-19, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-19, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.isScript());
      assertEquals("\n  @", node0.getSourceFileName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isInc());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 21;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(21, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(21, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertNotNull(astRoot0);
      
      String string0 = "\n  @";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNot());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals("\n  @", node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(21, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(21, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = (-984);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-984, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-984, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNotNull(astRoot0);
      
      String string0 = "To\"At-&9D^y";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("To\"At-&9D^y", simpleSourceFile0.getName());
      assertEquals("To\"At-&9D^y", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("To\"At-&9D^y", simpleSourceFile0.getName());
      assertEquals("To\"At-&9D^y", simpleSourceFile0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-984, astRoot0.getAbsolutePosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(-984, astRoot0.getPosition());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, node0.isCatch());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals("To\"At-&9D^y", node0.getSourceFileName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetterDef());
      assertEquals(true, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTrue());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StaticSourceFile staticSourceFile0 = null;
      Config config0 = null;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      AstRoot astRoot0 = null;
      String string0 = "Unsupported syntax: ";
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, staticSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 149;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(149, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(149, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "vKuN?|7Z";
      boolean boolean0 = true;
      StringLiteral stringLiteral0 = new StringLiteral(int0, int0);
      assertEquals(0, stringLiteral0.depth());
      assertEquals(149, stringLiteral0.getLength());
      assertNull(stringLiteral0.getValue());
      assertEquals(149, stringLiteral0.getAbsolutePosition());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(149, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertNull(stringLiteral0.getJsDoc());
      assertNotNull(stringLiteral0);
      
      astRoot0.addChildrenToBack((Node) stringLiteral0);
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(149, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(149, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(149, stringLiteral0.getLength());
      assertNull(stringLiteral0.getValue());
      assertEquals(149, stringLiteral0.getAbsolutePosition());
      assertEquals("41", stringLiteral0.toString());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(41, stringLiteral0.getType());
      assertEquals(149, stringLiteral0.getPosition());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(false, stringLiteral0.hasChildren());
      assertNull(stringLiteral0.getJsDoc());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("vKuN?|7Z", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("vKuN?|7Z", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 96;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(96, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(96, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNotNull(astRoot0);
      
      String string0 = "alreadc s_ecified useForVull";
      boolean boolean0 = false;
      EmptyExpression emptyExpression0 = new EmptyExpression(int0, int0);
      assertEquals(96, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(96, emptyExpression0.getAbsolutePosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(96, emptyExpression0.getPosition());
      assertNotNull(emptyExpression0);
      
      astRoot0.addChildrenToFront((Node) emptyExpression0);
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(96, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(96, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(96, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(96, emptyExpression0.getAbsolutePosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(96, emptyExpression0.getPosition());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("alreadc s_ecified useForVull", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("alreadc s_ecified useForVull", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(136, astRoot0.getType());
      assertEquals(96, astRoot0.getPosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(96, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("alreadc s_ecified useForVull", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("alreadc s_ecified useForVull", simpleSourceFile0.getName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNot());
      assertEquals("alreadc s_ecified useForVull", node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThrow());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isParamList());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int int0 = 149;
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(149, astRoot0.getPosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(149, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertNotNull(astRoot0);
      
      String string0 = "2g.I4Q44";
      boolean boolean0 = true;
      Name name0 = (Name)Node.newString(int0, string0);
      assertEquals("2g.I4Q44", name0.getString());
      assertEquals(149, name0.getType());
      assertEquals("149", name0.toString());
      assertEquals("2g.I4Q44", name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, name0.getLineno());
      assertNull(name0.getJsDoc());
      assertEquals(-1, name0.getAbsolutePosition());
      assertEquals(0, name0.depth());
      assertEquals(8, name0.length());
      assertEquals(8, name0.getLength());
      assertEquals(-1, name0.getPosition());
      assertNotNull(name0);
      
      astRoot0.addChildrenToBack((Node) name0);
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(149, astRoot0.getPosition());
      assertEquals(149, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals("2g.I4Q44", name0.getString());
      assertEquals(149, name0.getType());
      assertEquals("149", name0.toString());
      assertEquals("2g.I4Q44", name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertEquals(-1, name0.getLineno());
      assertNull(name0.getJsDoc());
      assertEquals(-1, name0.getAbsolutePosition());
      assertEquals(0, name0.depth());
      assertEquals(8, name0.length());
      assertEquals(8, name0.getLength());
      assertEquals(-1, name0.getPosition());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("2g.I4Q44", simpleSourceFile0.toString());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("2g.I4Q44", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported syntax: TO_OBJECT
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = (-19);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-19, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-19, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "\n  @";
      boolean boolean0 = false;
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals((-19.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals((-19.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertNotNull(numberLiteral0);
      
      astRoot0.addChildToFront((Node) numberLiteral0);
      assertEquals(1, numberLiteral0.getLength());
      assertNull(numberLiteral0.getValue());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals((-19.0), numberLiteral0.getNumber(), 0.01D);
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals((-19.0), numberLiteral0.getDouble(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-19, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-19, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("\n  @", simpleSourceFile0.getName());
      assertEquals("\n  @", simpleSourceFile0.toString());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals("\n  @", node0.getSourceFileName());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThis());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(-19, astRoot0.getPosition());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-19, astRoot0.getAbsolutePosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getParamCount());
      assertFalse(context0.generateObserverCount);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = (-984);
      AstRoot astRoot0 = new AstRoot(int0);
      assertEquals(-984, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-984, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertNotNull(astRoot0);
      
      String string0 = "To\"At-$9D^y";
      ObjectProperty objectProperty0 = new ObjectProperty();
      assertEquals(-1, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(-1, objectProperty0.getPosition());
      assertEquals(0, objectProperty0.depth());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      assertNotNull(objectProperty0);
      
      astRoot0.addChild((AstNode) objectProperty0);
      assertEquals(984, astRoot0.getLength());
      assertEquals(-984, astRoot0.getPosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-984, astRoot0.getAbsolutePosition());
      assertEquals(true, astRoot0.hasChildren());
      assertNull(astRoot0.getJsDoc());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, objectProperty0.getAbsolutePosition());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(1, objectProperty0.getLength());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(103, objectProperty0.getType());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals("103", objectProperty0.toString());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(983, objectProperty0.getPosition());
      assertEquals(1, objectProperty0.depth());
      assertEquals(false, objectProperty0.hasChildren());
      assertNull(objectProperty0.getJsDoc());
      
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertEquals("To\"At-$9D^y", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("To\"At-$9D^y", simpleSourceFile0.getName());
      assertNotNull(simpleSourceFile0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 103
         //
      }
  }
}
