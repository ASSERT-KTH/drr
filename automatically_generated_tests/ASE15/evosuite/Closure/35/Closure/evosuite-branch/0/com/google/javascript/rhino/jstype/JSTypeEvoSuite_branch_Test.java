/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:12:38 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.IndexedType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class JSTypeEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = null;
      StaticScope<JSType> staticScope0 = null;
      JSType jSType1 = JSType.safeResolve(jSType0, simpleErrorReporter0, staticScope0);
      assertNull(jSType1);
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "UrDZDT8IM%ip5h";
      int int0 = 343;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)namedType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noResolvedType0.getSource();
      assertNull(node0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = jSTypeRegistry0.createArrowType(node0, noResolvedType0);
      assertNotNull(arrowType0);
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.matchesObjectContext());
      
      ArrowType arrowType1 = (ArrowType)arrowType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) namedType0);
      assertNotNull(arrowType1);
      assertSame(arrowType1, arrowType0);
      assertSame(arrowType0, arrowType1);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(true, namedType0.isResolved());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, arrowType1.isAllType());
      assertEquals(false, arrowType1.isBooleanValueType());
      assertEquals(false, arrowType1.isStringValueType());
      assertEquals(false, arrowType1.isRecordType());
      assertEquals(false, arrowType1.isNoResolvedType());
      assertEquals(false, arrowType1.isFunctionType());
      assertEquals(false, arrowType1.isCheckedUnknownType());
      assertEquals(false, arrowType1.isNumberValueType());
      assertEquals(true, arrowType1.isResolved());
      assertEquals(false, arrowType1.isInterface());
      assertEquals(false, arrowType1.isNoObjectType());
      assertEquals(false, arrowType1.isOrdinaryFunction());
      assertEquals(false, arrowType1.matchesObjectContext());
      assertEquals(false, arrowType1.isNullType());
      assertEquals(false, arrowType1.isNominalConstructor());
      assertEquals(false, arrowType1.isEnumType());
      assertEquals(false, arrowType1.isTemplateType());
      assertEquals(false, arrowType1.isVoidType());
      assertEquals(false, arrowType1.isNominalType());
      assertEquals(false, arrowType1.isUnionType());
      assertEquals(false, arrowType1.isFunctionPrototypeType());
      assertEquals(false, arrowType1.isConstructor());
      assertEquals(false, arrowType1.isEnumElementType());
      assertEquals(false, arrowType1.isNoType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(true, arrowType0.isResolved());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.matchesObjectContext());
  }

  @Test
  public void test02()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)booleanType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = errorFunctionType0.canTestForShallowEqualityWith((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 7152;
      String string0 = "${M";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = JSType.isSubtypeHelper(namedType0, namedType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = noResolvedType0.differsFrom((JSType) noResolvedType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, noResolvedType0.isStringValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "    ";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 2;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      
      boolean boolean1 = noResolvedType0.differsFrom((JSType) namedType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isUnionType());
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionType());
      
      boolean boolean0 = instanceObjectType0.differsFrom((JSType) noType0);
      assertTrue(boolean0);
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isFunctionType());
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "${M";
      int int0 = 2793;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      
      boolean boolean1 = namedType0.differsFrom((JSType) stringType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNoType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isResolved());
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = voidType0.getTypesUnderShallowInequality((JSType) noResolvedType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNominalType());
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality((JSType) nullType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNominalType());
  }

  @Test
  public void test10()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "M`UKkGxzdKp$o:oj";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isCheckedUnknownType());
      
      JSType.TypePair jSType_TypePair0 = nullType0.getTypesUnderShallowInequality((JSType) errorFunctionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isCheckedUnknownType());
  }

  @Test
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)booleanType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noObjectType0, noObjectType0);
      assertNotNull(parameterizedType0);
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = parameterizedType0.getTypesUnderShallowInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
  }

  @Test
  public void test12()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "M`UKkGxzdKp$o:oj";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalType((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
  }

  @Test
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      boolean boolean0 = true;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
      
      StringType stringType1 = (StringType)stringType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(stringType1);
      assertSame(stringType1, stringType0);
      assertSame(stringType0, stringType1);
      assertEquals(false, stringType1.isResolved());
      assertEquals(false, stringType1.isFunctionPrototypeType());
      assertEquals(false, stringType1.isNumberValueType());
      assertEquals(false, stringType1.isVoidType());
      assertEquals(false, stringType1.isAllType());
      assertEquals(false, stringType1.isNoObjectType());
      assertEquals(false, stringType1.isInterface());
      assertEquals(false, stringType1.isNominalType());
      assertEquals(false, stringType1.isNoType());
      assertEquals(false, stringType1.isConstructor());
      assertEquals("string", stringType1.getDisplayName());
      assertEquals(false, stringType1.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType1.isStringValueType());
      assertEquals(true, stringType1.matchesNumberContext());
      assertEquals(false, stringType1.isNoResolvedType());
      assertEquals(false, stringType1.isNullType());
      assertEquals(false, stringType1.isTemplateType());
      assertEquals(false, stringType1.isBooleanValueType());
      assertEquals(false, stringType1.isCheckedUnknownType());
      assertEquals(false, stringType1.isOrdinaryFunction());
      assertEquals(false, stringType1.isUnionType());
      assertEquals(false, stringType1.isEnumElementType());
      assertEquals(true, stringType1.matchesStringContext());
      assertEquals(false, stringType1.isNominalConstructor());
      assertEquals(false, stringType1.isFunctionType());
      assertEquals(false, stringType1.isEnumType());
      assertEquals(true, stringType1.matchesObjectContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNominalConstructor());
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      
      NoType noType0 = (NoType)noResolvedType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "${M";
      int int0 = 2793;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isResolved());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noResolvedType0, (JSType) templateType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, templateType0.isResolved());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionType());
      
      NamedType namedType1 = (NamedType)JSType.getLeastSupertype(parameterizedType0, namedType0);
      assertNotNull(namedType1);
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, templateType0.isResolved());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality((JSType) noResolvedType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      
      UnknownType unknownType0 = (UnknownType)noResolvedType0.getGreatestSubtype((JSType) templateType0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isAllType());
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "${M";
      int int0 = 2793;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)namedType0.getGreatestSubtype((JSType) templateType0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test19()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "M`UKkGxzdKp$o:oj";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)JSType.getGreatestSubtype(errorFunctionType0, errorFunctionType0);
      assertNotNull(errorFunctionType1);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(true, errorFunctionType1.isNominalConstructor());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)JSType.getLeastSupertype(noResolvedType0, noResolvedType0);
      assertNotNull(noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isNominalConstructor());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(false, noResolvedType1.hasCachedValues());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test21()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "M`UKkGxzdKp$o:oj";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createOptionalType((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      
      UnionType unionType1 = (UnionType)errorFunctionType0.getLeastSupertype((JSType) unionType0);
      assertNotNull(unionType1);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test
  public void test22()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "M`UKkGxzdKp$o:oj";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = allType0.canTestForShallowEqualityWith((JSType) errorFunctionType0);
      assertTrue(boolean0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test23()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = arrowType0.canTestForShallowEqualityWith((JSType) errorFunctionType0);
      assertFalse(boolean0);
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test24()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNullType());
      
      boolean boolean0 = errorFunctionType0.isGlobalThisType();
      assertFalse(boolean0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderEquality((JSType) arrowType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNullType());
  }

  @Test
  public void test25()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)booleanType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderInequality((JSType) noType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
      
      JSType.TypePair jSType_TypePair0 = noType0.getTypesUnderEquality((JSType) instanceObjectType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumElementType());
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noType0, (JSType) noType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TernaryValue ternaryValue0 = parameterizedType0.testForEqualityHelper(noResolvedType0, noType0);
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TernaryValue ternaryValue0 = templateType0.testForEqualityHelper(allType0, errorFunctionType0);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("unknown", ternaryValue0.toString());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderInequality((JSType) noResolvedType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals("string", stringType0.getDisplayName());
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "${M";
      int int0 = 2793;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TernaryValue ternaryValue0 = namedType0.testForEqualityHelper(namedType0, namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(2, ternaryValue0.ordinal());
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TernaryValue ternaryValue0 = stringType0.testForEquality((JSType) allType0);
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isInterface());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(2, ternaryValue0.ordinal());
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = noResolvedType0.canAssignTo((JSType) noResolvedType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      
      String string0 = "zjCJDvN1O7{~3h\\u";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, instanceObjectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      
      String string1 = parameterizedType0.toAnnotationString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("function (new:zjCJDvN1O7{~3h\\u, *=, *=, *=): zjCJDvN1O7{~3h\\u.<?>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = booleanType0.findPropertyType(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(jSType0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesNumberContext());
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = noType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "q";
      JSType jSType0 = arrowType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNominalType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      ObjectType objectType0 = null;
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, objectType0, objectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
      
      boolean boolean0 = indexedType0.equals((Object) objectType0);
      assertFalse(boolean0);
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isResolved());
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSType jSType0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
      
      boolean boolean0 = JSType.isEquivalent((JSType) noType0, jSType0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isCheckedUnknownType());
  }

  @Test
  public void test38()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      
      boolean boolean0 = JSType.isEquivalent((JSType) arrowType0, (JSType) errorFunctionType0);
      assertFalse(boolean0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isCheckedUnknownType());
  }

  @Test
  public void test39()  throws Throwable  {
      JSType jSType0 = null;
      boolean boolean0 = JSType.isEquivalent(jSType0, jSType0);
      assertTrue(boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumType());
      
      NullType nullType1 = (NullType)JSType.getGreatestSubtype(nullType0, nullType0);
      assertNotNull(nullType1);
      assertSame(nullType1, nullType0);
      assertSame(nullType0, nullType1);
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(false, nullType1.isConstructor());
      assertEquals("null", nullType1.getDisplayName());
      assertEquals(false, nullType1.isNominalConstructor());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals(false, nullType1.isInterface());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(false, nullType1.isVoidType());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(false, nullType1.isNominalType());
      assertEquals(false, nullType1.isEnumElementType());
      assertEquals(false, nullType1.isCheckedUnknownType());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals(false, nullType1.isResolved());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(false, nullType1.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType1.isFunctionPrototypeType());
      assertEquals(false, nullType1.isNoResolvedType());
      assertEquals(false, nullType1.isEnumType());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(false, nullType1.isUnionType());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(false, nullType1.isOrdinaryFunction());
      assertEquals(false, nullType1.isAllType());
      assertEquals(true, nullType1.isNullable());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEnumType());
  }

  @Test
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "    ";
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isResolved());
      
      int int0 = 2;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      
      boolean boolean1 = stringType0.equals((Object) namedType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isResolved());
  }

  @Test
  public void test42()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, noType0);
      assertNotNull(indexedType0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(true, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
      
      boolean boolean0 = indexedType0.isNominalConstructor();
      assertTrue(boolean0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(true, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getReferenceName());
  }

  @Test
  public void test43()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = noType0.isNominalConstructor();
      assertFalse(boolean0);
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test44()  throws Throwable  {
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSTypeArray0[2]);
      assertNull(functionType0);
  }

  @Test
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[9];
      jSTypeArray0[8] = (JSType) noResolvedType0;
      assertNotNull(jSTypeArray0[8]);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSTypeArray0[8].isNumberValueType());
      assertEquals(false, jSTypeArray0[8].isTemplateType());
      assertEquals(false, jSTypeArray0[8].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[8].isNoObjectType());
      assertEquals(false, jSTypeArray0[8].isCheckedUnknownType());
      assertEquals(true, jSTypeArray0[8].isNoResolvedType());
      assertEquals(false, jSTypeArray0[8].isBooleanValueType());
      assertEquals(true, jSTypeArray0[8].matchesObjectContext());
      assertEquals(false, jSTypeArray0[8].isEnumType());
      assertEquals(false, jSTypeArray0[8].isInterface());
      assertEquals(false, jSTypeArray0[8].isAllType());
      assertEquals(false, jSTypeArray0[8].isVoidType());
      assertEquals(true, jSTypeArray0[8].isConstructor());
      assertEquals(false, jSTypeArray0[8].isStringValueType());
      assertEquals(false, jSTypeArray0[8].isRecordType());
      assertEquals(false, jSTypeArray0[8].isFunctionType());
      assertEquals(false, jSTypeArray0[8].isNullType());
      assertEquals(false, jSTypeArray0[8].isNominalType());
      assertEquals(false, jSTypeArray0[8].isNominalConstructor());
      assertEquals(false, jSTypeArray0[8].isNoType());
      assertEquals(false, jSTypeArray0[8].isResolved());
      assertEquals(false, jSTypeArray0[8].isUnionType());
      assertEquals(false, jSTypeArray0[8].isEnumElementType());
      assertEquals(false, jSTypeArray0[8].isOrdinaryFunction());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, jSTypeArray0);
      assertNotNull(functionType0);
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = noResolvedType0.isArrayType();
      assertFalse(boolean0);
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noResolvedType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TernaryValue ternaryValue0 = instanceObjectType0.testForEquality((JSType) noObjectType0);
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "${M";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = templateType0.hasDisplayName();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isEnumType());
      assertEquals("${M", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = templateType0.hasDisplayName();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isNominalConstructor());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)numberType0.dereference();
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test50()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      
      // Undeclared exception!
      try {
        boolean boolean0 = allType0.isNullable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isUnionType());
      
      boolean boolean1 = unknownType0.isOrdinaryFunction();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isUnionType());
  }

  @Test
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = noResolvedType0.isNumberObjectType();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      
      String string0 = "zjCJDvN1O7{~3h\\u";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      
      NoObjectType noObjectType0 = (NoObjectType)JSType.getGreatestSubtype(instanceObjectType0, errorFunctionType0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
  }

  @Test
  public void test54()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
      
      boolean boolean0 = noObjectType0.isRegexpType();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isInterface());
  }

  @Test
  public void test55()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      
      boolean boolean0 = booleanType0.isNumberValueType();
      assertFalse(boolean0);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
  }

  @Test
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = noType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      
      boolean boolean1 = arrowType0.matchesObjectContext();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
  }

  @Test
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      
      boolean boolean1 = noResolvedType0.isStringValueType();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
  }

  @Test
  public void test58()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      
      ArrowType arrowType0 = noResolvedType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      
      boolean boolean1 = arrowType0.matchesStringContext();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
  }

  @Test
  public void test59()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
      
      boolean boolean0 = stringType0.isNamedType();
      assertFalse(boolean0);
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isFunctionType());
  }

  @Test
  public void test60()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
      
      boolean boolean0 = numberType0.matchesUint32Context();
      assertTrue(boolean0);
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionType());
  }

  @Test
  public void test61()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      
      voidType0.matchConstraint((ObjectType) unknownType0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoResolvedType());
  }

  @Test
  public void test62()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      
      JSDocInfo jSDocInfo0 = instanceObjectType0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
  }

  @Test
  public void test63()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      
      Node node0 = noResolvedType0.getSource();
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node0, noResolvedType0);
      assertNotNull(arrowType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNominalConstructor());
      
      boolean boolean1 = arrowType0.matchesInt32Context();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNominalConstructor());
  }

  @Test
  public void test64()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      
      boolean boolean1 = noResolvedType0.isTheObjectType();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
  }

  @Test
  public void test65()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)nullType0.dereference();
      assertNotNull(noType0);
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
  }

  @Test
  public void test66()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNullable());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNullable());
      
      boolean boolean1 = instanceObjectType0.isEnumType();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNullable());
  }

  @Test
  public void test67()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = (UnionType)booleanType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = unionType0.hasDisplayName();
      assertFalse(boolean0);
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test68()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertNotNull(voidType0);
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      
      JSType jSType0 = voidType0.unboxesTo();
      assertNull(jSType0);
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
  }

  @Test
  public void test69()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "M`UKkGxzdKp$o:oj";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      boolean boolean0 = errorFunctionType0.canAssignTo((JSType) arrowType0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      IndexedType indexedType0 = new IndexedType(jSTypeRegistry0, errorFunctionType0, instanceObjectType0);
      assertNotNull(indexedType0);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(true, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      boolean boolean1 = indexedType0.canTestForEqualityWith((JSType) errorFunctionType0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, indexedType0.isNullType());
      assertEquals(false, indexedType0.isTemplateType());
      assertEquals(false, indexedType0.hasCachedValues());
      assertEquals(false, indexedType0.isUnionType());
      assertEquals(true, indexedType0.isFunctionType());
      assertEquals(true, indexedType0.isNominalConstructor());
      assertEquals(false, indexedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, indexedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, indexedType0.isRecordType());
      assertEquals(false, indexedType0.isFunctionPrototypeType());
      assertEquals(false, indexedType0.isBooleanValueType());
      assertEquals(false, indexedType0.isEnumElementType());
      assertEquals(false, indexedType0.isResolved());
      assertEquals(false, indexedType0.isNumberValueType());
      assertEquals(false, indexedType0.isStringValueType());
      assertEquals(false, indexedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
  }

  @Test
  public void test70()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = stringType0.canBeCalled();
      assertFalse(boolean0);
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test71()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
      
      boolean boolean0 = numberType0.isBooleanObjectType();
      assertFalse(boolean0);
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
  }

  @Test
  public void test72()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      
      boolean boolean0 = errorFunctionType0.isTemplateType();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
  }

  @Test
  public void test73()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
      
      boolean boolean0 = numberType0.isFunctionPrototypeType();
      assertFalse(boolean0);
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesStringContext());
  }

  @Test
  public void test74() {}
//   @Test
//   public void test74()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       int int0 = 7152;
//       String string0 = "${M";
//       NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
//       assertNotNull(namedType0);
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(false, namedType0.isFunctionPrototypeType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isEnumElementType());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isEnumType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isNominalConstructor());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string1 = namedType0.toDebugHashCodeString();
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertEquals("{proxy:{9}}", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(false, namedType0.isBooleanValueType());
//       assertEquals(false, namedType0.isNullType());
//       assertEquals(false, namedType0.isFunctionPrototypeType());
//       assertEquals(false, namedType0.isUnionType());
//       assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, namedType0.isEnumElementType());
//       assertEquals(false, namedType0.isStringValueType());
//       assertEquals(false, namedType0.isEnumType());
//       assertEquals(false, namedType0.isTemplateType());
//       assertEquals(false, namedType0.isRecordType());
//       assertEquals(false, namedType0.isResolved());
//       assertEquals(false, namedType0.isNominalConstructor());
//       assertEquals(false, namedType0.isVoidType());
//       assertEquals(false, namedType0.isFunctionType());
//       assertEquals(false, namedType0.isNumberValueType());
//       assertEquals(false, namedType0.hasCachedValues());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//   }

  @Test
  public void test75()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalType());
      
      boolean boolean0 = stringType0.isBooleanValueType();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalType());
  }

  @Test
  public void test76()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
      
      boolean boolean0 = numberType0.isInstanceType();
      assertFalse(boolean0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isAllType());
  }

  @Test
  public void test77()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      
      boolean boolean0 = noType0.isCheckedUnknownType();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
  }

  @Test
  public void test78()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ArrowType arrowType0 = errorFunctionType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isInterface());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality((JSType) arrowType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isNominalConstructor());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.matchesObjectContext());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isInterface());
  }

  @Test
  public void test79()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      
      numberType0.clearResolved();
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
  }

  @Test
  public void test80()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = errorFunctionType0.isStringObjectType();
      assertFalse(boolean0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test81()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 7152;
      String string0 = "${M";
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) namedType0, (JSType) namedType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = parameterizedType0.isString();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test82()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      
      boolean boolean1 = instanceObjectType0.isNumber();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isNominalConstructor());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
  }

  @Test
  public void test83()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesObjectContext());
      
      boolean boolean0 = allType0.isNominalConstructor();
      assertFalse(boolean0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesObjectContext());
  }

  @Test
  public void test84()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      
      StringType stringType1 = (StringType)stringType0.collapseUnion();
      assertNotNull(stringType1);
      assertSame(stringType0, stringType1);
      assertSame(stringType1, stringType0);
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(true, stringType1.matchesNumberContext());
      assertEquals(false, stringType1.isFunctionPrototypeType());
      assertEquals(false, stringType1.isEnumType());
      assertEquals(false, stringType1.isConstructor());
      assertEquals(false, stringType1.isOrdinaryFunction());
      assertEquals(false, stringType1.isBooleanValueType());
      assertEquals(false, stringType1.isVoidType());
      assertEquals(false, stringType1.isCheckedUnknownType());
      assertEquals(false, stringType1.isNoResolvedType());
      assertEquals(false, stringType1.isNullType());
      assertEquals(false, stringType1.isNumberValueType());
      assertEquals(false, stringType1.isInterface());
      assertEquals(false, stringType1.isNoObjectType());
      assertEquals(false, stringType1.isTemplateType());
      assertEquals(false, stringType1.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertEquals(true, stringType1.matchesObjectContext());
      assertEquals(false, stringType1.isUnionType());
      assertEquals(true, stringType1.matchesStringContext());
      assertEquals(false, stringType1.isEnumElementType());
      assertEquals(false, stringType1.isResolved());
      assertEquals(false, stringType1.isNoType());
      assertEquals(true, stringType1.isStringValueType());
      assertEquals(false, stringType1.isRecordType());
      assertEquals(false, stringType1.isFunctionType());
      assertEquals("string", stringType1.getDisplayName());
      assertEquals(false, stringType1.isNominalConstructor());
      assertEquals(false, stringType1.isAllType());
  }

  @Test
  public void test85()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = errorFunctionType0.isDateType();
      assertFalse(boolean0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      
      UnionType unionType0 = (UnionType)booleanType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
      
      String string1 = unionType0.toStringHelper(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(boolean|function (new:, *=, *=, *=): )", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isUnionType());
  }
}
