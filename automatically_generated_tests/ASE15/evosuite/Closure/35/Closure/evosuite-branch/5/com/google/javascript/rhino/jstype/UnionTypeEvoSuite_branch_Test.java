/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 01:17:03 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.LinkedList;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-418);
      boolean boolean0 = false;
      String string0 = "";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNullType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      
      unionType0.matchConstraint((ObjectType) noObjectType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNullType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      
      NoType noType0 = (NoType)unionType0.autobox();
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionType());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isFunctionType());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.offer((JSType) noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2, linkedList0.size());
      assertEquals("[*, None]", linkedList0.toString());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      AllType allType1 = (AllType)unionType0.collapseUnion();
      assertNotNull(allType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2, linkedList0.size());
      assertEquals("[*, None]", linkedList0.toString());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, allType1.isConstructor());
      assertEquals(false, allType1.isVoidType());
      assertEquals(false, allType1.isInterface());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(false, allType1.isFunctionPrototypeType());
      assertEquals(false, allType1.isCheckedUnknownType());
      assertEquals(false, allType1.isEnumElementType());
      assertEquals(false, allType1.isNominalType());
      assertEquals(false, allType1.isObject());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals(false, allType1.isOrdinaryFunction());
      assertEquals(true, allType1.isAllType());
      assertEquals(true, allType1.hasDisplayName());
      assertEquals(false, allType1.isNominalConstructor());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isNoType());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertEquals(false, allType1.isUnionType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isEnumType());
      assertEquals("<Any Type>", allType1.getDisplayName());
      assertEquals(false, allType1.isNoResolvedType());
      assertEquals(false, allType1.isFunctionType());
      assertNotSame(allType1, allType0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(allType1.equals((Object)allType0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      
      AllType allType0 = (AllType)unionType1.collapseUnion();
      assertNotNull(allType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNumberValueType());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      
      NoType noType0 = (NoType)unionType0.autobox();
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      
      boolean boolean1 = linkedList0.offer((JSType) noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(1, linkedList0.size());
      assertEquals("[None]", linkedList0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      NoType noType1 = (NoType)unionType0.collapseUnion();
      assertNotNull(noType1);
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isNoResolvedType());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, linkedList0.size());
      assertEquals("[None]", linkedList0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertSame(noType1, noType0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-286);
      boolean boolean0 = true;
      String string0 = "";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
      
      UnknownType unknownType0 = (UnknownType)unionType0.collapseUnion();
      assertNotNull(unknownType0);
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = true;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
//       assertNotNull(priorityQueue0);
//       assertEquals("[]", priorityQueue0.toString());
//       assertEquals(0, priorityQueue0.size());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
//       assertNotNull(unionType0);
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("[]", priorityQueue0.toString());
//       assertEquals(0, priorityQueue0.size());
//       
//       NoType noType0 = new NoType(jSTypeRegistry0);
//       assertNotNull(noType0);
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isReturnTypeInferred());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(false, noType0.isStringValueType());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isNullType());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNoResolvedType());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isNominalConstructor());
//       assertEquals(false, noType0.isEnumElementType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isEnumType());
//       assertEquals(0, noType0.getExtendedInterfacesCount());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isFunctionPrototypeType());
//       assertEquals(true, noType0.isObject());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isCheckedUnknownType());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isNominalType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       boolean boolean1 = priorityQueue0.add((JSType) noType0);
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isReturnTypeInferred());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(false, noType0.isStringValueType());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isNullType());
//       assertNull(noType0.getTemplateTypeName());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(false, noType0.isNoResolvedType());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.canBeCalled());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isNominalConstructor());
//       assertEquals(false, noType0.isEnumElementType());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isEnumType());
//       assertEquals(0, noType0.getExtendedInterfacesCount());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isFunctionPrototypeType());
//       assertEquals(true, noType0.isObject());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isCheckedUnknownType());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(false, noType0.isNominalType());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(1, priorityQueue0.size());
//       assertEquals("[None]", priorityQueue0.toString());
//       assertTrue(boolean1);
//       assertTrue(boolean1 == boolean0);
//       assertTrue(boolean0 == boolean1);
//       
//       String string0 = unionType0.toDebugHashCodeString();
//       assertNotNull(string0);
//       assertEquals(false, unionType0.isNominalConstructor());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isConstructor());
//       assertEquals(false, unionType0.isEnumType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isFunctionPrototypeType());
//       assertEquals(false, unionType0.isNoResolvedType());
//       assertEquals(false, unionType0.isNominalType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEnumElementType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isCheckedUnknownType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isOrdinaryFunction());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isInterface());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(1, priorityQueue0.size());
//       assertEquals("[None]", priorityQueue0.toString());
//       assertEquals("{(function (this:me, {9}): me)}", string0);
//       assertTrue(boolean0 == boolean1);
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertFalse(boolean0 == boolean1);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType1 = (UnionType)unionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noType0);
      assertNotNull(unionType1);
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-286);
      boolean boolean0 = true;
      String string0 = "";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0 == boolean1);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertTrue(boolean0 == boolean1);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = priorityQueue0.add((JSType) unionType1);
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean1 == boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) unionType1);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) noType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) noType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertFalse(boolean0 == boolean1);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) booleanType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals("EMPTY", booleanLiteralSet0.toString());
      assertEquals(0, booleanLiteralSet0.ordinal());
      assertEquals("EMPTY", booleanLiteralSet0.name());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalConstructor());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      NoType noType1 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean1);
      assertNotNull(noType1);
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isResolved());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isVoidType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isAllType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.isConstructor());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertNotSame(noType1, noType0);
      assertNotSame(noType0, noType1);
      assertTrue(boolean1 == boolean0);
      assertFalse(noType1.equals((Object)noType0));
      assertFalse(noType0.equals((Object)noType1));
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      
      boolean boolean1 = unionType0.isString();
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "Ga' siov@H`!|L";
      int int0 = 1260;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      
      boolean boolean1 = unionType0.isSubtype((JSType) namedType0);
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(true, namedType0.isObject());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      NoType noType0 = (NoType)unionType0.autobox();
      assertNotNull(noType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = linkedList0.offer((JSType) noType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2, linkedList0.size());
      assertEquals("[*, None]", linkedList0.toString());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      
      String string0 = unionType0.toString();
      assertNotNull(string0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2, linkedList0.size());
      assertEquals("[*, None]", linkedList0.toString());
      assertEquals("(*|None)", string0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      
      NoType noType0 = (NoType)unionType0.autobox();
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isInterface());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      AllType allType1 = (AllType)unionType0.getRestrictedUnion((JSType) noType0);
      assertNotNull(allType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(true, allType1.hasDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isCheckedUnknownType());
      assertEquals(true, allType1.isAllType());
      assertEquals(false, allType1.isNominalType());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals(false, allType1.isNominalConstructor());
      assertEquals(false, allType1.isOrdinaryFunction());
      assertEquals(false, allType1.isNoType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(false, allType1.isVoidType());
      assertEquals(false, allType1.isEnumType());
      assertEquals(false, allType1.isObject());
      assertEquals(false, allType1.isFunctionType());
      assertEquals(false, allType1.isFunctionPrototypeType());
      assertEquals(false, allType1.isUnionType());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(false, allType1.isInterface());
      assertEquals(false, allType1.isNoResolvedType());
      assertEquals(false, allType1.isEnumElementType());
      assertEquals(false, allType1.isConstructor());
      assertEquals("<Any Type>", allType1.getDisplayName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertNotSame(allType1, allType0);
      assertFalse(allType1.equals((Object)allType0));
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertNotNull(noType0);
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-286);
      boolean boolean0 = true;
      String string0 = "";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertTrue(boolean0 == boolean1);
      
      NamedType namedType1 = (NamedType)unionType0.getRestrictedUnion((JSType) booleanType0);
      assertNotNull(namedType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(true, namedType1.isObject());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertSame(namedType1, namedType0);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.contains((JSType) prototypeObjectType0);
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = unionType0.contains((JSType) noType0);
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertNotNull(noObjectType0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isEnumType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = priorityQueue0.add((JSType) unionType1);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertTrue(boolean1);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      
      UnionType unionType2 = (UnionType)unionType0.getLeastSupertype((JSType) unionType0);
      assertNotNull(unionType2);
      assertEquals(false, unionType2.isFunctionType());
      assertEquals(false, unionType2.isResolved());
      assertEquals(false, unionType2.isNullType());
      assertEquals(false, unionType2.isNominalConstructor());
      assertEquals(false, unionType2.isNominalType());
      assertEquals(false, unionType2.isBooleanValueType());
      assertEquals(false, unionType2.isOrdinaryFunction());
      assertEquals(false, unionType2.isEnumElementType());
      assertEquals(false, unionType2.isAllType());
      assertEquals(false, unionType2.isTemplateType());
      assertEquals(false, unionType2.isConstructor());
      assertEquals(false, unionType2.isNoType());
      assertEquals(false, unionType2.isInterface());
      assertEquals(false, unionType2.isNoResolvedType());
      assertEquals(false, unionType2.isRecordType());
      assertEquals(false, unionType2.isStringValueType());
      assertEquals(false, unionType2.isCheckedUnknownType());
      assertEquals(false, unionType2.isEnumType());
      assertEquals(false, unionType2.isVoidType());
      assertEquals(false, unionType2.isFunctionPrototypeType());
      assertEquals(false, unionType2.isNoObjectType());
      assertEquals(true, unionType2.isUnionType());
      assertEquals(false, unionType2.isNumberValueType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertNotSame(unionType2, unionType1);
      assertSame(unionType2, unionType0);
      assertNotSame(unionType0, unionType1);
      assertSame(unionType0, unionType2);
      assertFalse(unionType2.equals((Object)unionType1));
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) booleanType0);
      assertNotNull(unionType1);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertNotSame(unionType1, unionType0);
      assertFalse(unionType1.equals((Object)unionType0));
      
      boolean boolean1 = unionType0.isEquivalentTo((JSType) unionType1);
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isVoidType());
      assertFalse(boolean1);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      EnumType enumType0 = unionType0.toMaybeEnumType();
      assertNull(enumType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      boolean boolean1 = unionType0.isEquivalentTo((JSType) enumType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, noType0, unionType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)parameterizedType0.getNativeType(jSTypeNative0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(errorFunctionType0);
      assertNotNull(noObjectType0);
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isNominalConstructor());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
      
      NoType noType0 = (NoType)unionType0.meet(unionType1);
      assertNotNull(noType0);
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(unionType1.equals((Object)unionType0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      NoType noType0 = (NoType)unionType0.autobox();
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      NoType noType1 = (NoType)unionType0.meet(noType0);
      assertNotNull(noType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isNullType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isNominalType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.isNullable());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertNull(noType1.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(true, noType1.isObject());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isBooleanValueType());
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      AllType allType1 = (AllType)unionType0.meet(unionType0);
      assertNotNull(allType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(true, allType1.isAllType());
      assertEquals(false, allType1.isCheckedUnknownType());
      assertEquals(false, allType1.isConstructor());
      assertEquals(false, allType1.isNoType());
      assertEquals(false, allType1.isOrdinaryFunction());
      assertEquals(false, allType1.isVoidType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(false, allType1.isFunctionType());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertEquals(false, allType1.isEnumElementType());
      assertEquals(false, allType1.isNominalConstructor());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(false, allType1.isFunctionPrototypeType());
      assertEquals(true, allType1.hasDisplayName());
      assertEquals(false, allType1.isObject());
      assertEquals("<Any Type>", allType1.getDisplayName());
      assertEquals(false, allType1.isNominalType());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isEnumType());
      assertEquals(false, allType1.isNoResolvedType());
      assertEquals(false, allType1.isInterface());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isUnionType());
      assertNotSame(allType1, allType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(allType1.equals((Object)allType0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertTrue(boolean0 == boolean1);
      
      PrototypeObjectType prototypeObjectType1 = (PrototypeObjectType)unionType0.getLeastSupertype((JSType) prototypeObjectType0);
      assertNotNull(prototypeObjectType1);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, prototypeObjectType1.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType1.isFunctionType());
      assertEquals(false, prototypeObjectType1.isInterface());
      assertEquals(false, prototypeObjectType1.isNoResolvedType());
      assertEquals(false, prototypeObjectType1.isStringValueType());
      assertEquals(false, prototypeObjectType1.isNoObjectType());
      assertEquals(false, prototypeObjectType1.isNominalConstructor());
      assertEquals(false, prototypeObjectType1.isUnionType());
      assertEquals(false, prototypeObjectType1.isEnumType());
      assertEquals(false, prototypeObjectType1.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType1.isEnumElementType());
      assertEquals(false, prototypeObjectType1.isTemplateType());
      assertEquals(true, prototypeObjectType1.isObject());
      assertEquals(false, prototypeObjectType1.isAllType());
      assertEquals(false, prototypeObjectType1.isNoType());
      assertEquals(false, prototypeObjectType1.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType1.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType1.isVoidType());
      assertEquals(false, prototypeObjectType1.isNullType());
      assertEquals(false, prototypeObjectType1.isBooleanValueType());
      assertEquals(false, prototypeObjectType1.isRecordType());
      assertEquals(false, prototypeObjectType1.isResolved());
      assertEquals(false, prototypeObjectType1.isNominalType());
      assertEquals(false, prototypeObjectType1.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNominalConstructor());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertSame(prototypeObjectType1, prototypeObjectType0);
      assertSame(prototypeObjectType0, prototypeObjectType1);
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "Ga' siov@H`!|L";
      int int0 = 1260;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals("[Ga' siov@H`!|L]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[Ga' siov@H`!|L]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean0 == boolean1);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertFalse(boolean0 == boolean1);
      
      NamedType namedType1 = (NamedType)unionType0.getLeastSupertype((JSType) noType0);
      assertNotNull(namedType1);
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(true, namedType1.isObject());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("[Ga' siov@H`!|L]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertSame(namedType1, namedType0);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertFalse(boolean0 == boolean1);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) noType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "Ga' siov@H`!|L";
      int int0 = 1260;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType1 = (NamedType)namedType0.getLeastSupertype((JSType) unionType0);
      assertNotNull(namedType1);
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(true, namedType1.isObject());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isFunctionPrototypeType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isEnumType());
      assertEquals(false, namedType1.isNominalConstructor());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(namedType0, namedType1);
      assertSame(namedType1, namedType0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-418);
      boolean boolean0 = false;
      String string0 = "";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = JSType.isSubtypeHelper(unionType0, unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.isNullable();
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertFalse(boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.isNullable();
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = priorityQueue0.add((JSType) unionType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      
      TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) unionType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      NoType noType1 = (NoType)unionType0.restrictByNotNullOrUndefined();
      assertNotNull(noType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType1.isRecordType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(true, noType1.matchesStringContext());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isResolved());
      assertEquals(true, noType1.isNoType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(true, noType1.matchesObjectContext());
      assertNull(noType1.getReferenceName());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isNullType());
      assertEquals(true, noType1.isObject());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertNotSame(noType1, noType0);
      assertFalse(noType1.equals((Object)noType0));
      assertTrue(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoType noType1 = (NoType)unionType0.autobox();
      assertNotNull(noType1);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.isObject());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isFunctionType());
      assertNull(noType1.getReferenceName());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isNullType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isResolved());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(noType1, noType0);
      assertTrue(boolean0 == boolean1);
      assertFalse(noType1.equals((Object)noType0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.canBeCalled();
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesObjectContext());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.canBeCalled();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertFalse(boolean2);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-286);
      boolean boolean0 = false;
      String string0 = "bc|$<M[5YbF,)xUK<G9";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      
      boolean boolean1 = priorityQueue0.add((JSType) namedType0);
      assertEquals("[bc|$<M[5YbF,)xUK<G9]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[bc|$<M[5YbF,)xUK<G9]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.canAssignTo((JSType) booleanType0);
      assertEquals("[bc|$<M[5YbF,)xUK<G9]", priorityQueue0.toString());
      assertEquals(1, priorityQueue0.size());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.canAssignTo((JSType) noType0);
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "|c";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      NoType noType1 = (NoType)unionType0.findPropertyType(string0);
      assertNotNull(noType1);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(0, noType1.getExtendedInterfacesCount());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(true, noType1.isNullable());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isTemplateType());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isNoResolvedType());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(true, noType1.isObject());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isNominalConstructor());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isEnumType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isAllType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isResolved());
      assertEquals(false, noType1.isFunctionType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(false, noType1.isRecordType());
      assertNotSame(noType1, noType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(noType1.equals((Object)noType0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "(";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isConstructor());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isConstructor());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertFalse(boolean0 == boolean1);
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) noType0);
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isObject());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.matchesObjectContext();
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[None]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createOptionalNullableType((JSType) unionType0);
      assertNotNull(unionType1);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean1 = priorityQueue0.add((JSType) unionType1);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      
      boolean boolean2 = unionType0.matchesObjectContext();
      assertEquals(1, priorityQueue0.size());
      assertEquals("[(null|undefined)]", priorityQueue0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertFalse(boolean2);
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.matchesStringContext();
      assertEquals(1, priorityQueue0.size());
      assertEquals("[boolean]", priorityQueue0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertTrue(boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      String string0 = "i_Q#$L({<DF1^[X^";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = priorityQueue0.add((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isNominalConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[function (new:i_Q#$L({<DF1^[X^, *=, *=, *=): i_Q#$L({<DF1^[X^]", priorityQueue0.toString());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[function (new:i_Q#$L({<DF1^[X^, *=, *=, *=): i_Q#$L({<DF1^[X^]", priorityQueue0.toString());
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.matchesStringContext();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(1, priorityQueue0.size());
      assertEquals("[function (new:i_Q#$L({<DF1^[X^, *=, *=, *=): i_Q#$L({<DF1^[X^]", priorityQueue0.toString());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)unionType0.autobox();
      assertNotNull(noType0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = linkedList0.offer((JSType) noType0);
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(1, linkedList0.size());
      assertEquals("[None]", linkedList0.toString());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.matchesInt32Context();
      assertEquals(1, linkedList0.size());
      assertEquals("[None]", linkedList0.toString());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNominalType());
      
      boolean boolean1 = linkedList0.add((JSType) allType0);
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNominalType());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      boolean boolean2 = unionType0.matchesInt32Context();
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(1, linkedList0.size());
      assertEquals("[*]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      //  // Unstable assertion: assertNotNull(priorityQueue0);
      //  // Unstable assertion: assertEquals("[]", priorityQueue0.toString());
      //  // Unstable assertion: assertEquals(0, priorityQueue0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("[]", priorityQueue0.toString());
      //  // Unstable assertion: assertEquals(0, priorityQueue0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      
      int int0 = unionType0.hashCode();
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("[]", priorityQueue0.toString());
      //  // Unstable assertion: assertEquals(0, priorityQueue0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(2085753828, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedList0);
      assertNotNull(unionType0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowEquality((JSType) allType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isInterface());
  }
}
