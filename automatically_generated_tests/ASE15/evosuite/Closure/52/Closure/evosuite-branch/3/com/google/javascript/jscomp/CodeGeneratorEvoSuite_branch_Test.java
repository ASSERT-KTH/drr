/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:34:55 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = ")bd]>_7J 1";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/)bd]>_7J 1/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "i,d<!-->wfD/i";
      char char0 = 'j';
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      String string1 = CodeGenerator.strEscape(string0, char0, string0, string0, string0, charsetEncoder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("ji,d<\\!--\\>wfD/ij", string1);
      assertNotNull(string1);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "^c<</scriptw\\xe#";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"^c<<\\/scriptw\\\\xe#\"", string1);
      assertNotNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "=]]>_oc$m&'\"";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/=]]\\>_oc$m&'\"/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "\tr7*3#\n\f\r1\u1680\u2029\u205F\u3000";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/\\tr7*3#\\n\\u000c\\r1\\u1680\\u2029\\u205f\\u3000/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "4";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "0";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      boolean boolean0 = CodeGenerator.isSimpleNumber(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "r'*; ~1y.]DB|";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "->2swC{@g(-;@:";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"->2swC{@g(-;@:\"", string1);
      assertNotNull(string1);
      
      boolean boolean0 = CodeGenerator.isSimpleNumber(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "->2swC{@g(-;@:";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"->2swC{@g(-;@:\"", string1);
      assertNotNull(string1);
      
      String string2 = CodeGenerator.regexpEscape(string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("/\"->2swC{@g(-;@:\"/", string2);
      assertNotNull(string2);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "\tr7*3#\n\f\r1\u1680\u2029\u205F\u3000";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\\u0009r7*3#\\u000a\\u000c\\u000d1\\u1680\\u2029\\u205f\\u3000", string1);
      assertNotNull(string1);
  }
}
