/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:07:54 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DefinitionsRemover;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;

 
public class PeepholeFoldConstantsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 97;
      String string0 = "#fT;=%t_o";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(97, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(97, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
      
      boolean boolean0 = true;
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0, boolean0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(97, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(97, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(97, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(97, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(2, node1.getChildCount());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(33, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(97, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(97, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(2, node1.getChildCount());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotNull(node2);
  }

  @Test
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "tr";
      Node node0 = Node.newString(string0, (int) byteArray0[0], (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
      
      int int0 = 37;
      Node node1 = new Node(int0, node0, node0, node0, node0, int0, (int) byteArray0[6]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(37, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node2.isVarArgs());
      assertEquals(37, node2.getType());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getCharno());
      assertEquals(37, node2.getLineno());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(1, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(37, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotNull(node2);
  }

  @Test
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "?z*VI";
      int int0 = 30;
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(30, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      node0.addChildrenToFront(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(30, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(30, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(30, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test03()  throws Throwable  {
      byte byte0 = (byte) (-53);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 40;
      String string0 = "tr";
      Node node0 = Node.newString(string0, int0, (int) byte0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, (int) byte0, (int) byte0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(40, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      int int1 = 45;
      Node node2 = new Node(int1, node0, node0, node1, node1, int1, (int) byte0);
      assertFalse(int1 == int0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(int0 == int1);
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(45, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(40, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      int int0 = 52;
      String string0 = "trZ";
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[1];
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      assertNotNull(peepholeOptimizationsPass0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) peepholeOptimizationsPass0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(52, node0.getLineno());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, int0, int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(52, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(52, node1.getLineno());
      assertEquals(52, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node0, node0, node1, node1, int0, int0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(52, node2.getCharno());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(52, node2.getLineno());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(true, node2.hasChildren());
      assertEquals(52, node2.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(52, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(52, node1.getLineno());
      assertEquals(52, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(52, node0.getLineno());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      String string0 = "PdEZ$>/^R1Oy\\A24h}5";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(32, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(32, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(32, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(32, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(32, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 97;
      String string0 = "#fT;=%t_o";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(97, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(97, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(97, node0.getType());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 95;
      String string0 = "%j";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(95, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(95, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(95, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 92;
      String string0 = "<";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(92, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(92, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(92, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 91;
      String string0 = "trZ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(91, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(91, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0, node0, int0, int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(91, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(91, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(91, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(91, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(91, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 87;
      String string0 = "tr";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(87, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(87, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      int int1 = 89;
      Node node1 = new Node(int1, node0, node0, node0, node0, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(87, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(87, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(89, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(89, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(87, node1.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 79;
      Node node0 = new Node(int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(79, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(79, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 76;
      byte byte0 = (byte)51;
      String string0 = "";
      Node node0 = Node.newString(int0, string0, int0, (int) byte0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(51, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(76, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(76, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(76, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(51, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(51, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(76, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(76, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 74;
      String string0 = "";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(74, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(74, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(74, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 72;
      String string0 = "y/-ld<\\v8G<";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(72, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(72, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(72, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(72, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(72, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(72, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(72, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(72, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(72, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 69;
      String string0 = "";
      Node node0 = Node.newString(int0, string0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(69, node0.getType());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(69, node0.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(69, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      byte byte0 = (byte)66;
      String string0 = "";
      Node node0 = Node.newString((int) byte0, string0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(66, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(66, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(66, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "toUpperCase";
      int int0 = 64;
      Node node0 = Node.newString(int0, string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(64, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(64, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(64, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 61;
      String string0 = "";
      Node node0 = Node.newString(int0, string0);
      assertEquals(61, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(61, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getLineno());
      assertEquals(61, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 57;
      String string0 = "";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(57, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(57, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(57, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)50;
      byteArray0[7] = byte0;
      String string0 = "";
      Node node0 = Node.newString((int) byteArray0[7], string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)50}, byteArray0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(50, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)50}, byteArray0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(50, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(50, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 47;
      String string0 = "";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(47, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(47, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(47, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "";
      int int0 = 44;
      Node node0 = Node.newString(int0, string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(44, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLocalResultCall());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 122;
      String string0 = "trZ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(122, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(122, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(40, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      byte byte0 = (byte)23;
      String string0 = "";
      Node node0 = Node.newString((int) byte0, string0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(23, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 56;
      String string0 = "tr";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(56, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(56, node0.getLineno());
      assertNotNull(node0);
      
      int int1 = 18;
      Node node1 = new Node(int1, node0, node0, node0, node0, int1, int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(18, node1.getType());
      assertEquals(56, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(18, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(56, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(56, node0.getLineno());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 15;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(15, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(15, node1.getType());
      assertEquals(15, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(15, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 11;
      String string0 = "duC";
      Node node0 = Node.newString(int0, string0);
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(11, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, boolean0, boolean0);
      assertNotNull(strictModeCheck0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) strictModeCheck0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      int int0 = 122;
      String string0 = "trZ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0, node0, int0, int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(122, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(122, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(122, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(1, node2.getChildCount());
      assertEquals(122, node2.getType());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(122, node2.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(122, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(122, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(122, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
  }

  @Test
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      StrictModeCheck strictModeCheck0 = new StrictModeCheck(compiler0, boolean0, boolean0);
      assertNotNull(strictModeCheck0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) strictModeCheck0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      int int0 = 122;
      String string0 = "trZ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      int int1 = (-3058);
      Node node1 = new Node(int1, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(int1 == int0);
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(-3058, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node0, node0, node1, node1, int0, int0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(int1 == int0);
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(122, node2.getLineno());
      assertEquals(122, node2.getType());
      assertEquals(122, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(-3058, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(int1 == int0);
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(122, node3.getType());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isVarArgs());
      assertEquals(122, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(122, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(122, node2.getLineno());
      assertEquals(122, node2.getType());
      assertEquals(122, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(-3058, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotNull(node3);
  }

  @Test
  public void test30()  throws Throwable  {
      byte byte0 = (byte) (-53);
      byte byte1 = (byte)101;
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "tr";
      Node node0 = Node.newString(string0, (int) byte0, (int) byte0);
      assertFalse(byte0 == byte1);
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      Node node1 = new Node((int) byte0, (int) byte1, (int) byte0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-53, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node((int) byte1, node0, node0, node1, node1, (int) byte1, (int) byte1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(byte0 == byte1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(byte1 == byte0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-53, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(101, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(101, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(101, node2.getCharno());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 87;
      String string0 = "tr";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(87, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(87, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, int0, int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node1.isQualifiedName());
      assertEquals(87, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(87, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(87, node1.getType());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node0, node0, node1, node1, int0, int0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(87, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(87, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(87, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(87, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(87, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(87, node1.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(87, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(87, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(87, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(87, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(87, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(87, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(87, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(87, node1.getType());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(2, node3.getChildCount());
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(true, node3.hasChildren());
      assertEquals(87, node3.getType());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(87, node3.getCharno());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(87, node3.getLineno());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(87, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(87, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node3);
  }

  @Test
  public void test32()  throws Throwable  {
      byte byte0 = (byte) (-53);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "tr";
      Node node0 = Node.newString(string0, (int) byte0, (int) byte0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = new Node((int) byte0, (int) byte0, (int) byte0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-53, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      int int0 = 60;
      Node node2 = new Node(int0, node0, node0, node1, node1, int0, (int) byte0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(60, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-53, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(60, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(60, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(2, node3.getChildCount());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-53, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotNull(node3);
  }

  @Test
  public void test33()  throws Throwable  {
      byte byte0 = (byte) (-53);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "tr";
      Node node0 = Node.newString(string0, (int) byte0, (int) byte0);
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = new Node((int) byte0, (int) byte0, (int) byte0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-53, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      int int0 = 45;
      Node node2 = new Node(int0, node0, node0, node1, node1, int0, (int) byte0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-53, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(45, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-53, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getLineno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(45, node3.getType());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(45, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotNull(node3);
  }

  //@Test
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)66;
      Node node0 = Node.newNumber((double) byte0, (int) byte0, (int) byte0);
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(66, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(66, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0, boolean0);
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(66, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(66, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(66, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(66, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(35, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getCharno());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getType());
      assertEquals(66, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(66, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(35, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getCharno());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(35, node2.getType());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
  }

  @Test
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 54;
      String string0 = "length";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(54, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(54, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      boolean boolean0 = true;
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0, boolean0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(54, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(54, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(33, node1.getType());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(2, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(54, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(54, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = node1.clonePropsFrom(node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(33, node2.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(33, node1.getType());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(2, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(54, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(54, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getCharno());
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isVarArgs());
      assertEquals(33, node3.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(33, node2.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(33, node1.getType());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(2, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(54, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(54, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertSame(node2, node3);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertSame(node1, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotNull(node3);
  }

  @Test
  public void test36()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 76;
      String string0 = "tr";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, int0, int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(76, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(76, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      int int1 = 21;
      Node node2 = new Node(int1, node0, node0, node1, node1, int1, int0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(21, node2.getType());
      assertEquals(21, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(76, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertEquals(76, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(76, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(21, node2.getType());
      assertEquals(21, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(76, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertEquals(76, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(76, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isVarArgs());
      assertEquals(76, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(2, node3.getChildCount());
      assertEquals(21, node3.getLineno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(21, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotNull(node3);
  }

  @Test
  public void test37()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 16;
      String string0 = "rZ";
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(16, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, int0, int0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(16, node1.getCharno());
      assertEquals(16, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(16, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node0, node0, node1, node1, int0, int0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(16, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(16, node2.getCharno());
      assertEquals(16, node2.getLineno());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(16, node1.getCharno());
      assertEquals(16, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(16, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(16, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(16, node2.getCharno());
      assertEquals(16, node2.getLineno());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(16, node1.getCharno());
      assertEquals(16, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(16, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(0, node3.getSideEffectFlags());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isLocalResultCall());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(16, node3.getType());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(16, node3.getLineno());
      assertEquals(16, node3.getCharno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isOnlyModifiesThisCall());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.wasEmptyNode());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotNull(node3);
  }

  @Test
  public void test38()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 31;
      String string0 = "PdEZ$>/^R1Oy\\A24h}5";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(31, node0.getLineno());
      assertNotNull(node0);
      
      node0.addChildToFront(node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(31, node0.getLineno());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(31, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(31, node1.getCharno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(31, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(31, node0.getLineno());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test39()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      byte byte0 = (byte)0;
      Node node0 = Node.newNumber((double) byte0, (int) byte0, (int) byte0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test40()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      String string0 = "length";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(37, node1.getLineno());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test41()  throws Throwable  {
      byte byte0 = (byte) (-53);
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "tr";
      Node node0 = Node.newString(string0, (int) byte0, (int) byte0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      int int0 = 32;
      Node node1 = new Node(int0, node0, node0, node0, node0, int0, (int) byte0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(32, node1.getType());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 29;
      String string0 = "|<";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(29, node0.getCharno());
      assertEquals(29, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(29, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = (-39);
      String string0 = "Rr*";
      int int1 = 28;
      Node node0 = Node.newString(int1, string0, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(28, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 27;
      String string0 = "%j";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(27, node0.getType());
      assertEquals(27, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(27, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertNotNull(functionType0);
      
      Node node0 = functionType0.getParametersNode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(3, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(83, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test
  public void test46()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)26;
      byteArray0[7] = byte0;
      String string0 = "";
      Node node0 = Node.newString((int) byteArray0[7], string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)26}, byteArray0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
