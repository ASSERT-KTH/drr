/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:47:22 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "vX\u000B{_v,\u2029O\u205F\u3000";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("vX\\u000b{_v,\\u2029O\\u205f\\u3000", string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "<!--h9J+R";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/<\\!--h9J+R/", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "|2h5^6myd[</scriptj";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/|2h5^6myd[<\\/scriptj/", string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "v#JM?,E5Y5;r]]>";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("/v#JM?,E5Y5;r]]\\>/", string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "uwE1V&VXKK51->;?0_K";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/uwE1V&VXKK51->;?0_K/", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = ">";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\">\"", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "9(J?S5k@C\\]>";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/9(J?S5k@C\\]>/", string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "<''Lr3NE.vptt;w}";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"<''Lr3NE.vptt;w}\"", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "_90#\"tYx[5@D";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("_90#\"tYx[5@D", string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string2 = CodeGenerator.regexpEscape(string1, charsetEncoder0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("/_90#\"tYx[5@D/", string2);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "5";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(5.0, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "_90#\"tYx[5@D";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("_90#\"tYx[5@D", string1);
      
      double double0 = CodeGenerator.getSimpleNumber(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("\"\\t\\n\\x0B\\f\\r \\u0085\\u1680\\u2028\\u2029\\u205f\\u3000\"", string1);
      
      boolean boolean0 = CodeGenerator.isSimpleNumber(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "0";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-->$";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("/--\\>$/", string1);
  }
}
