/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:13:05 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.jscomp.VarCheck;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class TypedScopeCreatorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      String string0 = "";
      int int0 = (-1084);
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      
      // Undeclared exception!
      try {
        JSDocInfo jSDocInfo0 = TypedScopeCreator.getBestJSDocInfo(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1() {}
//   @Test
//   public void test1()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = null;
//       EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Closure/70/5/run_evosuite.pl_4323_1418335340/#['-fw,1H\\$eE%/41");
//       String string1 = "ms7gepcei.f";
//       boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
//       assertTrue(boolean0);
//       
//       String string2 = "#['-fw,1H\\$eE%/41";
//       assertNotSame(string2, string1);
//       
//       MockFile mockFile0 = new MockFile(string0, string2);
//       assertNotNull(mockFile0);
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string2, string1);
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
//       assertNotNull(jSSourceFile0);
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string2, string1);
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
//       
//       Node node0 = compiler0.parse(jSSourceFile0);
//       assertNotNull(node0);
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string2, string1);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getCharno());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(132, node0.getType());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       
//       TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
//       assertNotNull(typedScopeCreator0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       VarCheck varCheck0 = new VarCheck(compiler0);
//       assertNotNull(varCheck0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) varCheck0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       CompilerOptions compilerOptions0 = compiler0.options;
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertNotNull(compilerOptions0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       
//       Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.groupVariableDeclarations);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.specializeInitialModule);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.checkEs5Strict);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.inlineLocalVariables);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.removeEmptyFunctions);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.checkDuplicateMessages);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.checkTypedPropertyCalls);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
//       assertFalse(compilerOptions0.instrumentForCoverageOnly);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.strictMessageReplacement);
//       assertFalse(compilerOptions0.inferTypesInGlobalScope);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.tightenTypes);
//       assertFalse(compilerOptions0.ignoreCajaProperties);
//       assertFalse(compilerOptions0.decomposeExpressions);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.allowLegacyJsMessages);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkCaja);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.closurePass);
//       assertNotNull(result0);
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string2, string1);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
//       
//       Scope scope0 = nodeTraversal0.getScope();
//       assertNull(scope0);
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       
//       Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
//       assertNotNull(scope1);
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string2, string1);
//       assertEquals(true, scope1.isGlobal());
//       assertEquals(34, scope1.getVarCount());
//       assertEquals(false, scope1.isLocal());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
//       assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(true, node0.hasChildren());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(true, node0.hasOneChild());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(1, node0.getLineno());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(0, node0.getCharno());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(132, node0.getType());
//       assertEquals(1, node0.getChildCount());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//   }

  @Test
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Closure/70/5/run_evosuite.pl_4323_1418335340/#['-fw,1H\\$eE%/41");
      String string1 = "msg.unexpected.eof";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertTrue(boolean0);
      
      String string2 = "#['-fw,1H\\$eE%/41";
      assertNotSame(string2, string1);
      
      MockFile mockFile0 = new MockFile(string0, string2);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      assertNotNull(jSSourceFile0);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotNull(node0);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      VarCheck varCheck0 = new VarCheck(compiler0);
      assertNotNull(varCheck0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) varCheck0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      Scope scope0 = nodeTraversal0.getScope();
      assertNull(scope0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      // Undeclared exception!
      try {
        Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "uXRgIn(DF)";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4096, node0.getSourcePosition());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      VarCheck varCheck0 = new VarCheck(compiler0);
      assertNotNull(varCheck0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) varCheck0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Scope scope0 = nodeTraversal0.getScope();
      assertNull(scope0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertNotNull(scope1);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(33, scope1.getVarCount());
      assertEquals(false, scope1.isLocal());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test4()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Closure/70/5/run_evosuite.pl_4323_1418335340/#['-fw,1H\\$eE%/41");
      String string1 = "pR*jYyn1";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      assertTrue(boolean0);
      
      String string2 = "#['-fw,1H\\$eE%/41";
      assertNotSame(string2, string1);
      
      MockFile mockFile0 = new MockFile(string0, string2);
      assertNotNull(mockFile0);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      assertNotNull(jSSourceFile0);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotNull(node0);
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      String string3 = ";j=Kb";
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      Node node1 = compiler0.parseSyntheticCode(string3, string3);
      assertNotNull(node1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(node1, node0);
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getCharno());
      assertEquals(132, node1.getType());
      assertEquals(2, node1.getChildCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node1);
      assertNotNull(scope0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(node1, node0);
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getCharno());
      assertEquals(132, node1.getType());
      assertEquals(2, node1.getChildCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertNotNull(scope1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(scope0.equals((Object)scope1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(scope1.equals((Object)scope0));
      assertNotSame(node0, node1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(node1, node0);
      assertNotSame(scope0, scope1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(scope1, scope0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getOriginalPath());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.toString());
      assertEquals("#['-fw,1H\\$eE%/41", jSSourceFile0.getName());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getCharno());
      assertEquals(132, node1.getType());
      assertEquals(2, node1.getChildCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, scope1.getVarCount());
      assertEquals(true, scope1.isLocal());
      assertEquals(false, scope1.isGlobal());
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = ";j=Kb";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
      assertNotNull(typedScopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      VarCheck varCheck0 = new VarCheck(compiler0);
      assertNotNull(varCheck0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) varCheck0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Scope scope0 = nodeTraversal0.getScope();
      assertNull(scope0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      assertNotNull(scope1);
      assertEquals(false, scope1.isLocal());
      assertEquals(33, scope1.getVarCount());
      assertEquals(true, scope1.isGlobal());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }
}
