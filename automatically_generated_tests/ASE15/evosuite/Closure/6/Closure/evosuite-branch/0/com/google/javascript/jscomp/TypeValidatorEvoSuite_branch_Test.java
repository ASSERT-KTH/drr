/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:27:06 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckAccessControls;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.TemplateType;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypeValidatorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Xv!!3*FQ`J\\rar#";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      //  // Unstable assertion: assertNotNull(functionType0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      
      DiagnosticType diagnosticType0 = TypeValidator.UNKNOWN_TYPEOF_VALUE;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[5];
      JSError jSError0 = JSError.make(string0, node0, diagnosticType0, stringArray0);
      //  // Unstable assertion: assertNotNull(jSError0);
      //  // Unstable assertion: assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(functionType0, functionType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      boolean boolean1 = typeValidator_TypeMismatch0.equals((Object) typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(0, functionType0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertEquals(false, functionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(0, functionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, functionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, functionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, functionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(true, functionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, functionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, functionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, functionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, functionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, functionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, functionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, functionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, functionType0.isReturnTypeInferred());
      //  // Unstable assertion: assertEquals(false, functionType0.isNoType());
      //  // Unstable assertion: assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(-1, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(-1, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "f+P*P";
      JSType jSType0 = jSTypeRegistry0.getType(string0);
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = ObjectType.cast(jSType0);
      //  // Unstable assertion: assertNull(objectType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) objectType0);
      //  // Unstable assertion: assertNull(templateType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = (-3505);
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.BASE_CLASS_ERROR;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      //  // Unstable assertion: assertNotNull(jSError0);
      //  // Unstable assertion: assertEquals(-3505, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-3505, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(templateType0, jSType0, jSError0);
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      //  // Unstable assertion: assertEquals(-3505, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-3505, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) jSError0);
      //  // Unstable assertion: assertEquals(-3505, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(-3505, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      boolean boolean0 = false;
      typeValidator0.setShouldReport(boolean0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "XYv!!3*FQ`J\\rar#";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, functionType0, string0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertNotNull(loggerErrorManager0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.hasErrors());
//       
//       String string0 = "Protocol message end-group tag did not match expected tag.";
//       Charset charset0 = Charset.defaultCharset();
//       assertNotNull(charset0);
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.isRegistered());
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0, charset0);
//       assertNotNull(jSSourceFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.isRegistered());
//       
//       JsAst jsAst0 = new JsAst((SourceFile) jSSourceFile0);
//       assertNotNull(jsAst0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.isRegistered());
//       
//       Node node0 = jsAst0.getAstRoot((AbstractCompiler) compiler0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.isRegistered());
//       
//       boolean boolean0 = true;
//       String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals(false, node0.isName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("?", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.jscomp.CollapseProperties";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectAllInterfaceProperties(nodeTraversal0, node0, functionType0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "YXv!!*F`J\\rar";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectCanCast(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Xv!!3*FQ`J\\rar#";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NodeTraversal nodeTraversal0 = null;
      // Undeclared exception!
      try {
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " j)Zo#xmQpB+obbc[KX";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectCanOverride(nodeTraversal0, node0, functionType0, functionType0, string0, functionType0);
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "YXv!!*F`J\\rar";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = (-4518);
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, functionType0, functionType0, node0, int0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " j)Zo#xmQpB+obbc[KX";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      
      boolean boolean1 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, functionType0, functionType0, string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertTrue(boolean1);
  }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertNotNull(loggerErrorManager0);
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       
//       CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
//       assertNotNull(checkAccessControls0);
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.hasErrors());
//       
//       String string0 = "Protocol message end-group tag did not match expected tag.";
//       Charset charset0 = Charset.defaultCharset();
//       assertNotNull(charset0);
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0, charset0);
//       assertNotNull(jSSourceFile0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       
//       JsAst jsAst0 = new JsAst((SourceFile) jSSourceFile0);
//       assertNotNull(jsAst0);
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       
//       Node node0 = jsAst0.getAstRoot((AbstractCompiler) compiler0);
//       assertNotNull(node0);
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNew());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       
//       boolean boolean0 = false;
//       String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNew());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("?", string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
//       assertNotNull(nodeTraversal0);
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       
//       Node node1 = null;
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string1, node1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(functionType0);
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNew());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isParameterizedType());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       
//       boolean boolean1 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node1, functionType0, functionType0, node1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isLabelName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isTry());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isTrue());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isIf());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isDo());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isNew());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isCatch());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isParameterizedType());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals(true, charset0.canEncode());
//       assertTrue(boolean1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//   }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.jscomp.CollapseProperties";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, functionType0, functionType0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "H:gWqrJ1[+";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      boolean boolean1 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, functionType0, string0, functionType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertTrue(boolean1);
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       
//       LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
//       assertNotNull(loggerErrorManager0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       
//       TypeValidator typeValidator0 = compiler0.getTypeValidator();
//       assertNotNull(typeValidator0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       
//       CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
//       assertNotNull(checkAccessControls0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(0, compiler0.getErrorCount());
//       
//       String string0 = "Protocol message end-group tag did not match expected tag.";
//       Charset charset0 = Charset.defaultCharset();
//       assertNotNull(charset0);
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0, charset0);
//       assertNotNull(jSSourceFile0);
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       
//       JsAst jsAst0 = new JsAst((SourceFile) jSSourceFile0);
//       assertNotNull(jsAst0);
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       
//       Node node0 = jsAst0.getAstRoot((AbstractCompiler) compiler0);
//       assertNotNull(node0);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isThis());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       
//       boolean boolean0 = false;
//       String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isThis());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals("?", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       
//       NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
//       assertNotNull(nodeTraversal0);
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       
//       Node node1 = null;
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node1);
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(functionType0);
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isParameterizedType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotSame(string0, string1);
//       
//       typeValidator0.expectBitwiseable(nodeTraversal0, node1, functionType0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals(0, nodeTraversal0.getLineNumber());
//       assertEquals("", nodeTraversal0.getSourceName());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNominalConstructor());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isParameterizedType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(1, compiler0.getWarningCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isThis());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isFalse());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isAdd());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isDec());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isNew());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isIf());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isCall());
//       assertEquals(0, node0.getLength());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isAssign());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isThrow());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isCatch());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals("Protocol message end-group tag did not match expected tag.", node0.getSourceFileName());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isHook());
//       assertEquals(true, charset0.canEncode());
//       assertEquals("UTF-8", charset0.displayName());
//       assertEquals("UTF-8", charset0.toString());
//       assertEquals(true, charset0.isRegistered());
//       assertEquals("UTF-8", charset0.name());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getName());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.getOriginalPath());
//       assertEquals("Protocol message end-group tag did not match expected tag.", jSSourceFile0.toString());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ">j&2OV";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      
      typeValidator0.expectNumber(nodeTraversal0, node0, functionType0, string0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "YXv!!*F`J\\rar";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      
      typeValidator0.expectString(nodeTraversal0, node0, functionType0, string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
  }

  @Test
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "H:gWqrJ1[+";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      
      typeValidator0.expectAnyObject(nodeTraversal0, node0, functionType0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "com.google.javascript.jscomp.CollapseProperties";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      typeValidator0.expectActualObject(nodeTraversal0, node0, functionType0, string0);
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ">j&2OV";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      
      boolean boolean1 = typeValidator0.expectObject(nodeTraversal0, node0, functionType0, string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertTrue(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      JSType jSType0 = null;
      String string0 = "~}X69WM.$9a";
      int int0 = 0;
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[17];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(0, jSError0.getLineNumber());
      assertEquals(0, jSError0.getCharno());
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getNodeLength());
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      assertNotNull(typeValidator_TypeMismatch0);
      assertEquals(0, jSError0.getLineNumber());
      assertEquals(0, jSError0.getCharno());
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getNodeLength());
      
      String string1 = typeValidator_TypeMismatch0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(0, jSError0.getLineNumber());
      assertEquals(0, jSError0.getCharno());
      assertEquals(CheckLevel.ERROR, jSError0.getDefaultLevel());
      assertEquals(0, jSError0.getNodeLength());
      assertEquals("(null, null)", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertNotNull(iterable0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
  }

  @Test
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      //  // Unstable assertion: assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      //  // Unstable assertion: assertNotNull(loggerErrorManager0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0.0, compiler0.getProgress(), 0.01D);
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, loggerErrorManager0.getWarningCount());
      //  // Unstable assertion: assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      //  // Unstable assertion: assertNotNull(typeValidator0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0.0, compiler0.getProgress(), 0.01D);
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      //  // Unstable assertion: assertNotNull(checkAccessControls0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0.0, compiler0.getProgress(), 0.01D);
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      //  // Unstable assertion: assertNotNull(nodeTraversal0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0.0, compiler0.getProgress(), 0.01D);
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(0, nodeTraversal0.getLineNumber());
      //  // Unstable assertion: assertEquals("", nodeTraversal0.getSourceName());
      
      Node node0 = null;
      String string0 = ">j&2OV";
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, string0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      //  // Unstable assertion: assertEquals(true, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0.0, compiler0.getProgress(), 0.01D);
      //  // Unstable assertion: assertEquals(false, compiler0.acceptConstKeyword());
      //  // Unstable assertion: assertEquals(1, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(0, nodeTraversal0.getLineNumber());
      //  // Unstable assertion: assertEquals("", nodeTraversal0.getSourceName());
  }

  @Test
  public void test22()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertNotNull(loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertNotNull(typeValidator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      CheckAccessControls checkAccessControls0 = new CheckAccessControls(compiler0);
      assertNotNull(checkAccessControls0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkAccessControls0);
      assertNotNull(nodeTraversal0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Node node0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " j)Zo#xmQpB+obbc[KX";
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, functionType0, string0);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalConstructor());
  }
}
