/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:58:42 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.GatherRawExports;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.OptimizeArgumentsArray;
import com.google.javascript.jscomp.ScopeCreator;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.TightenTypes;
import com.google.javascript.jscomp.TypeValidator;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class TypeValidatorEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      JSType jSType0 = null;
      String string0 = "?";
      int int0 = 9;
      DiagnosticType diagnosticType0 = StrictModeCheck.ARGUMENTS_DECLARATION;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[10];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0.level, diagnosticType0, stringArray0);
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(9, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(9, jSError0.getCharno());
      //  // Unstable assertion: assertNotNull(jSError0);
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(9, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(9, jSError0.getCharno());
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      
      boolean boolean0 = typeValidator_TypeMismatch0.equals((Object) jSError0);
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(9, jSError0.getLineNumber());
      //  // Unstable assertion: assertEquals(9, jSError0.getCharno());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(33, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(33, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(33, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      
      boolean boolean0 = false;
      typeValidator0.setShouldReport(boolean0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(33, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(33, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(33, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[1];
      assertEquals(33, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
      
      typeValidator0.expectString(nodeTraversal0, node0, jSType0, string0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertNotNull(node0);
      
      boolean boolean0 = false;
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(string1);
      assertEquals("?", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(32, jSTypeNativeArray0[0].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(32, jSTypeNativeArray0[1].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(32, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(32, jSTypeNativeArray0[3].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(32, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(32, jSTypeNativeArray0[5].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(32, jSTypeNativeArray0[6].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals(32, jSTypeNativeArray0[7].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(jSType0);
      
      boolean boolean0 = typeValidator0.expectObject(nodeTraversal0, node0, jSType0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertTrue(boolean0);
      
      String string1 = typeValidator0.getReadableJSTypeName(node0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetElem());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(string1);
      assertEquals("?", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeValidator0);
      
      int int0 = (-41);
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNumber());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isString());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNative0;
      assertEquals(34, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(34, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(34, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(jSType0);
      
      typeValidator0.expectCanCast(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNumber());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isString());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
  }

  @Test
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      compiler0.initCompilerOptionsIfTesting();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      String string0 = "";
      OptimizeArgumentsArray optimizeArgumentsArray0 = new OptimizeArgumentsArray(compiler0, string0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(optimizeArgumentsArray0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) optimizeArgumentsArray0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      TypeValidator typeValidator0 = compiler0.getTypeValidator();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typeValidator0);
      
      Node node0 = null;
      TightenTypes tightenTypes0 = new TightenTypes(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(tightenTypes0);
      
      JSTypeRegistry jSTypeRegistry0 = tightenTypes0.getTypeRegistry();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        typeValidator0.expectSuperType(nodeTraversal0, node0, functionType0, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals(34, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(34, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[4];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[2];
      assertEquals(34, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      typeValidator0.expectCanOverride(nodeTraversal0, node0, jSType0, jSType0, string0, jSType0);
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLabelName());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(32, jSTypeNativeArray0[0].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(32, jSTypeNativeArray0[1].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(32, jSTypeNativeArray0[2].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals(32, jSTypeNativeArray0[3].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      assertEquals(32, jSTypeNativeArray0[4].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(32, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(32, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals(32, jSTypeNativeArray0[7].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertNotNull(jSType0);
      
      typeValidator0.expectArgumentMatchesParameter(nodeTraversal0, node0, jSType0, jSType0, node0, int0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
  }

  @Test
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(loggerErrorManager0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(33, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(33, jSTypeNativeArray0[2].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(33, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(33, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(33, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[4];
      assertEquals(33, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(33, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(jSType0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeValidator0);
      
      boolean boolean0 = typeValidator0.expectCanAssignTo(nodeTraversal0, node0, jSType0, jSType0, string0);
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertNull(node0.getSourceFileName());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssign());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeValidator0);
      
      int int0 = (-41);
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(34, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals(34, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[2];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(34, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
      
      boolean boolean0 = typeValidator0.expectCanAssignToPropertyOf(nodeTraversal0, node0, jSType0, jSType0, node0, string0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(loggerErrorManager0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(33, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(33, jSTypeNativeArray0[2].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals(33, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(33, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(33, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[4];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(33, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(33, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
      assertNotNull(jSType0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeValidator0);
      
      typeValidator0.expectSwitchMatchesCase(nodeTraversal0, node0, jSType0, jSType0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isStringKey());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNull());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isRecordType());
  }

  @Test
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(35, jSTypeNativeArray0[0].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(35, jSTypeNativeArray0[1].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(35, jSTypeNativeArray0[2].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[2].toString());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(35, jSTypeNativeArray0[3].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(35, jSTypeNativeArray0[4].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(35, jSTypeNativeArray0[5].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(35, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(35, jSTypeNativeArray0[7].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[7].toString());
      
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(unknownType0);
      
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, unknownType0, string0, unknownType0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(typeValidator0);
      
      int int0 = (-41);
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(34, jSTypeNativeArray0[3].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(34, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(34, jSTypeNativeArray0[7].ordinal());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(jSType0);
      
      boolean boolean0 = typeValidator0.expectNotNullOrUndefined(nodeTraversal0, node0, jSType0, string0, jSType0);
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAdd());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasOneChild());
      assertTrue(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typeValidator0);
      
      int int0 = (-41);
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-41, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.REGEXP_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals(26, jSTypeNativeArray0[3].ordinal());
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNative1;
      assertEquals(26, jSTypeNativeArray0[4].ordinal());
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNative1;
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("REGEXP_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(26, jSTypeNativeArray0[7].ordinal());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unionType0);
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, unionType0, string0);
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-41, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isStringKey());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
  }

  @Test
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeValidator0);
      
      int int0 = (-41);
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(34, jSTypeNativeArray0[3].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals(34, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(34, jSTypeNativeArray0[7].ordinal());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, jSType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isRegExp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isReturn());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(32, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(32, jSTypeNativeArray0[1].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals(32, jSTypeNativeArray0[2].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.STRING_OBJECT_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals(28, jSTypeNativeArray0[3].ordinal());
      assertEquals("STRING_OBJECT_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals("STRING_OBJECT_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(32, jSTypeNativeArray0[4].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(32, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(32, jSTypeNativeArray0[6].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(32, jSTypeNativeArray0[7].ordinal());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertNotNull(unionType0);
      
      typeValidator0.expectStringOrNumber(nodeTraversal0, node0, unionType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isTrue());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
  }

  @Test
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(32, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(32, jSTypeNativeArray0[1].ordinal());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals(32, jSTypeNativeArray0[2].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.STRING_OBJECT_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals("STRING_OBJECT_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("STRING_OBJECT_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(28, jSTypeNativeArray0[3].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(32, jSTypeNativeArray0[4].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(32, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(32, jSTypeNativeArray0[6].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(32, jSTypeNativeArray0[7].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
      assertNotNull(unionType0);
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, unionType0, string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNominalType());
  }

  @Test
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(loggerErrorManager0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(33, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(33, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(33, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(33, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(33, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[4];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(33, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals(33, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typeValidator0);
      
      typeValidator0.expectNumber(nodeTraversal0, node0, jSType0, string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVoid());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDo());
  }

  @Test
  public void test18()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(858, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(35, jSTypeNativeArray0[0].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals(35, jSTypeNativeArray0[1].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals(35, jSTypeNativeArray0[2].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(35, jSTypeNativeArray0[3].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(35, jSTypeNativeArray0[4].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(35, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(35, jSTypeNativeArray0[6].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[7].name());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(35, jSTypeNativeArray0[7].ordinal());
      
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      typeValidator0.expectNumber(nodeTraversal0, node0, unknownType0, string0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(858, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test19()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(858, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.UNKNOWN_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(35, jSTypeNativeArray0[0].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(35, jSTypeNativeArray0[1].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(35, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals(35, jSTypeNativeArray0[3].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(35, jSTypeNativeArray0[4].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(35, jSTypeNativeArray0[5].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(35, jSTypeNativeArray0[6].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNative0;
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(35, jSTypeNativeArray0[7].ordinal());
      assertEquals("UNKNOWN_TYPE", jSTypeNativeArray0[7].toString());
      
      UnknownType unknownType0 = (UnknownType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unknownType0);
      
      typeValidator0.expectString(nodeTraversal0, node0, unknownType0, string0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(858, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isWhile());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test20()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(33, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(33, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals(33, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(33, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(33, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[4];
      assertEquals(33, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(33, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[7].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(jSType0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeValidator0);
      
      typeValidator0.expectAnyObject(nodeTraversal0, node0, jSType0, string0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDefaultCase());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isObjectLit());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test
  public void test21()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(32, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(32, jSTypeNativeArray0[1].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(32, jSTypeNativeArray0[2].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(32, jSTypeNativeArray0[3].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(32, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(32, jSTypeNativeArray0[5].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(32, jSTypeNativeArray0[6].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[0];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(32, jSTypeNativeArray0[7].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(jSType0);
      
      typeValidator0.expectActualObject(nodeTraversal0, node0, jSType0, string0);
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test
  public void test22()  throws Throwable  {
      JSType jSType0 = null;
      String string0 = "?";
      int int0 = 9;
      DiagnosticType diagnosticType0 = StrictModeCheck.ARGUMENTS_DECLARATION;
      //  // Unstable assertion: assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[10];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0.level, diagnosticType0, stringArray0);
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(9, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(9, jSError0.getLineNumber());
      //  // Unstable assertion: assertNotNull(jSError0);
      
      TypeValidator.TypeMismatch typeValidator_TypeMismatch0 = new TypeValidator.TypeMismatch(jSType0, jSType0, jSError0);
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(9, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(9, jSError0.getLineNumber());
      //  // Unstable assertion: assertNotNull(typeValidator_TypeMismatch0);
      
      String string1 = typeValidator_TypeMismatch0.toString();
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(CheckLevel.OFF, jSError0.getDefaultLevel());
      //  // Unstable assertion: assertEquals(9, jSError0.getCharno());
      //  // Unstable assertion: assertEquals(0, jSError0.getNodeLength());
      //  // Unstable assertion: assertEquals(9, jSError0.getLineNumber());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("(null, null)", string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
  }

  @Test
  public void test23()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(typeValidator0);
      
      Iterable<TypeValidator.TypeMismatch> iterable0 = typeValidator0.getMismatches();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertNotNull(iterable0);
  }

  @Test
  public void test24()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(typeValidator0);
      
      int int0 = 858;
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(nodeTraversal0);
      
      typeValidator0.expectValidTypeofName(nodeTraversal0, node0, string0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(858, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
  }

  @Test
  public void test25()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(typeValidator0);
      
      int int0 = 844;
      String string0 = "T:(&=E,w{";
      Node node0 = Node.newString(int0, string0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(844, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(32, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(32, jSTypeNativeArray0[1].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[0];
      assertEquals(32, jSTypeNativeArray0[2].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals(40, jSTypeNativeArray0[3].ordinal());
      assertEquals("STRING_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("STRING_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNative0;
      assertEquals(32, jSTypeNativeArray0[4].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals(32, jSTypeNativeArray0[5].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals(32, jSTypeNativeArray0[6].ordinal());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[4];
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals("SYNTAX_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(32, jSTypeNativeArray0[7].ordinal());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(unionType0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(nodeTraversal0);
      
      typeValidator0.expectActualObject(nodeTraversal0, node0, unionType0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOr());
      assertEquals(844, node0.getType());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNull());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(loggerErrorManager0);
      
      TypeValidator typeValidator0 = new TypeValidator(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(typeValidator0);
      
      int int0 = (-41);
      String string0 = "'";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertNotNull(node0);
      
      GatherRawExports gatherRawExports0 = new GatherRawExports(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertNotNull(gatherRawExports0);
      
      ScopeCreator scopeCreator0 = null;
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) gatherRawExports0, scopeCreator0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(34, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(34, jSTypeNativeArray0[1].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(34, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[1];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals(34, jSTypeNativeArray0[3].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[1];
      assertEquals(34, jSTypeNativeArray0[4].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[0];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(34, jSTypeNativeArray0[5].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[5];
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(34, jSTypeNativeArray0[6].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[1];
      assertEquals(34, jSTypeNativeArray0[7].ordinal());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("TYPE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplateType());
      assertNotNull(jSType0);
      
      typeValidator0.expectBitwiseable(nodeTraversal0, node0, jSType0, string0);
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetProp());
      assertEquals(-41, node0.getType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAnd());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isTemplateType());
  }
}
