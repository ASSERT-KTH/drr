/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:37:49 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class FunctionTypeEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "(yf#rs=wr7BGJ.w~R";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
//       assertEquals(0, arrayList0.size());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals("[]", arrayList0.toString());
//       assertNotNull(arrayList0);
//       
//       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, arrayList0.size());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(node0);
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, node0);
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(0, arrayList0.size());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isAllType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEmptyType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(functionType0);
//       
//       String string1 = functionType0.toDebugHashCodeString();
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals("function (): function (this:{327860628}, {12}, {12}, {12}): {327860628}", string1);
//       assertEquals(-1, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(0, arrayList0.size());
//       assertEquals(true, arrayList0.isEmpty());
//       assertEquals("[]", arrayList0.toString());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isAllType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isEmptyType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
//       FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isEmptyType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(functionType0);
//       
//       String string0 = functionType0.toDebugHashCodeString();
//       assertEquals("function (function (this:me, {9}): me): {12}", string0);
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(2147483647, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isEmptyType());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string0);
//   }

  @Test
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs9=<r7BGJ.w2~3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      FunctionType functionType1 = (FunctionType)functionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) emptyScope0);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.canBeCalled());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(1, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType1);
  }

  @Test
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertNotNull(functionType0);
      
      boolean boolean0 = JSType.isSubtype(functionType0, functionType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      
      boolean boolean1 = functionType0.hasCachedValues();
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs9=<r7BGJ.w2~3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.hasCachedValues();
      assertTrue(boolean0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "+QUA]S";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertNull(node0);
      
      ArrowType arrowType0 = noType0.getInternalArrowType();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertNotNull(arrowType0);
      
      FunctionType functionType0 = new FunctionType(jSTypeRegistry0, string0, node0, arrowType0, noType0, string0, boolean0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals("+QUA]S", functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.hasInstanceType();
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals("+QUA]S", functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isEmptyType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isInterface());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.hasInstanceType();
      assertTrue(boolean0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
  }

  @Test
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.URI_ERROR_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative1;
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("URI_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(36, jSTypeNativeArray0[1].ordinal());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
  }

  @Test
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, node0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      
      FunctionType functionType2 = (FunctionType)JSType.getLeastSupertype(functionType0, functionType1);
      assertSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType2, functionType1);
      assertSame(functionType2, functionType0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType2.isAllType());
      assertEquals(false, functionType2.isNoObjectType());
      assertEquals(true, functionType2.isFunctionType());
      assertEquals(true, functionType2.hasCachedValues());
      assertEquals(false, functionType2.isVoidType());
      assertEquals(false, functionType2.isNumberValueType());
      assertEquals(false, functionType2.isUnionType());
      assertEquals(false, functionType2.isNoType());
      assertEquals(false, functionType2.isBooleanValueType());
      assertEquals(false, functionType2.isResolved());
      assertEquals(false, functionType2.isEnumElementType());
      assertEquals(true, functionType2.canBeCalled());
      assertEquals(false, functionType2.isConstructor());
      assertEquals(false, functionType2.isCheckedUnknownType());
      assertEquals(false, functionType2.isTemplateType());
      assertEquals(false, functionType2.isRecordType());
      assertEquals(false, functionType2.isNullType());
      assertEquals(false, functionType2.isEnumType());
      assertEquals(false, functionType2.isEmptyType());
      assertNull(functionType2.getTemplateTypeName());
      assertEquals(true, functionType2.hasInstanceType());
      assertEquals(0, functionType2.getMaxArguments());
      assertEquals(false, functionType2.isStringValueType());
      assertEquals(false, functionType2.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType2.isReturnTypeInferred());
      assertEquals(true, functionType2.isInterface());
      assertEquals(false, functionType2.isOrdinaryFunction());
      assertEquals(false, functionType2.isFunctionPrototypeType());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType2.equals((Object)functionType1));
      assertNotNull(functionType2);
  }

  @Test
  public void test09()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[0] = (JSType) nullType0;
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(true, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isFunctionType());
      assertEquals(false, jSTypeArray0[0].isEmptyType());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[0]);
      
      jSTypeArray0[1] = (JSType) nullType0;
      assertEquals(false, jSTypeArray0[1].isEnumType());
      assertEquals(false, jSTypeArray0[1].isConstructor());
      assertEquals(false, jSTypeArray0[1].isNoType());
      assertEquals(false, jSTypeArray0[1].isNominalType());
      assertEquals(false, jSTypeArray0[1].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[1].isEmptyType());
      assertEquals(false, jSTypeArray0[1].isTemplateType());
      assertEquals(false, jSTypeArray0[1].isInterface());
      assertEquals(false, jSTypeArray0[1].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[1].isNoObjectType());
      assertEquals(false, jSTypeArray0[1].isEnumElementType());
      assertEquals(false, jSTypeArray0[1].isRecordType());
      assertEquals(false, jSTypeArray0[1].isFunctionPrototypeType());
      assertEquals(true, jSTypeArray0[1].isNullType());
      assertEquals(false, jSTypeArray0[1].isResolved());
      assertEquals(false, jSTypeArray0[1].isStringValueType());
      assertEquals(false, jSTypeArray0[1].isNumberValueType());
      assertEquals(false, jSTypeArray0[1].isFunctionType());
      assertEquals(false, jSTypeArray0[1].isAllType());
      assertEquals(false, jSTypeArray0[1].isUnionType());
      assertEquals(false, jSTypeArray0[1].isVoidType());
      assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[1]);
      
      jSTypeArray0[2] = (JSType) nullType0;
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isEmptyType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(true, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[2]);
      
      jSTypeArray0[3] = (JSType) nullType0;
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeArray0[3].isInterface());
      assertEquals(false, jSTypeArray0[3].isEnumElementType());
      assertEquals(false, jSTypeArray0[3].isNominalType());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isFunctionType());
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(false, jSTypeArray0[3].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isConstructor());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertEquals(false, jSTypeArray0[3].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      assertEquals(true, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isNoObjectType());
      assertEquals(false, jSTypeArray0[3].isEnumType());
      assertEquals(false, jSTypeArray0[3].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[3].isEmptyType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[3]);
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) nullType0, jSTypeArray0);
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      String string0 = functionType0.toString();
      assertEquals("function (this:{...}, null, null, null, ...[null]): null", string0);
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.}Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      String string1 = functionType0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("function (this:z;%L8;COA.}Ar): ?", string1);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getReferenceName());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNotNull(functionType0);
      
      String string0 = functionType0.toString();
      assertEquals("function (...[*]): None", string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertNotNull(functionType0);
      
      JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowEquality((JSType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test13()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[4];
      Node node0 = Node.newString(string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = node0.getFirstChild();
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertNull(node1);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node1);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, boolean0, jSTypeArray0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(4, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isInterface());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNoType());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      
      FunctionType functionType2 = (FunctionType)functionType1.getGreatestSubtype((JSType) functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertEquals(true, functionType2.isOrdinaryFunction());
      assertEquals(false, functionType2.hasInstanceType());
      assertEquals(true, functionType2.isFunctionType());
      assertEquals(false, functionType2.isNominalType());
      assertEquals(false, functionType2.isResolved());
      assertEquals(false, functionType2.isRecordType());
      assertEquals(false, functionType2.isBooleanValueType());
      assertEquals(true, functionType2.canBeCalled());
      assertEquals(false, functionType2.isAllType());
      assertEquals(false, functionType2.isFunctionPrototypeType());
      assertEquals(false, functionType2.isEnumType());
      assertEquals(false, functionType2.isNoType());
      assertEquals(false, functionType2.isEnumElementType());
      assertEquals(false, functionType2.isInterface());
      assertEquals(false, functionType2.isNullType());
      assertEquals(2147483647, functionType2.getMaxArguments());
      assertEquals(false, functionType2.isCheckedUnknownType());
      assertNull(functionType2.getTemplateTypeName());
      assertEquals(false, functionType2.isConstructor());
      assertEquals(false, functionType2.isEmptyType());
      assertEquals(false, functionType2.isNumberValueType());
      assertEquals(false, functionType2.isNoObjectType());
      assertEquals(false, functionType2.isStringValueType());
      assertEquals(false, functionType2.hasCachedValues());
      assertEquals(false, functionType2.isTemplateType());
      assertEquals(false, functionType2.isUnionType());
      assertEquals(false, functionType2.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType2.isReturnTypeInferred());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(4, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isInterface());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNoType());
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType2));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType2);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.isInstanceType();
      assertFalse(boolean0);
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs9=<r7BGJ.w2~3";
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNotNull(noObjectType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isImplicitPrototype(noObjectType0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(errorFunctionType0.getTemplateTypeName());
  }

  @Test
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs9=<r7BGJ.w2~3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderInequality((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertNotNull(noType0);
      
      String string0 = "5'|p?eKe;7@,S";
      FunctionPrototypeType functionPrototypeType0 = new FunctionPrototypeType(jSTypeRegistry0, noType0, noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isEnumElementType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNominalType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isEnumType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isCheckedUnknownType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isInterface());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isConstructor());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isOrdinaryFunction());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertNotNull(functionPrototypeType0);
      
      boolean boolean0 = noType0.setPrototype(functionPrototypeType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isEnumElementType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNominalType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isEnumType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isCheckedUnknownType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isInterface());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isConstructor());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isOrdinaryFunction());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      
      NoType noType1 = (NoType)noType0.getTopMostDefiningType(string0);
      assertSame(noType1, noType0);
      assertSame(noType0, noType1);
      assertEquals(true, noType1.isNullable());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isFunctionPrototypeType());
      assertEquals(false, noType1.isTemplateType());
      assertNull(noType1.getReferenceName());
      assertEquals(false, noType1.isUnionType());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isEnumType());
      assertEquals(false, noType1.isEnumElementType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isCheckedUnknownType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isRecordType());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals("None", noType1.toString());
      assertEquals(true, noType1.isEmptyType());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(false, noType1.isNominalType());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isStringValueType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isReturnTypeInferred());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNumberValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertNotNull(noType1);
  }

  @Test
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertNotNull(numberType0);
      
      int int0 = 0;
      String string0 = "!~2d!v{'Jeh";
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) numberType0, node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isInterface());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isFunctionType());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = functionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.}Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = functionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = functionType0.hasUnknownSupertype();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.hasUnknownSupertype();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
  }

  @Test
  public void test22()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      ObjectType objectType0 = null;
      noType0.setPrototypeBasedOn(objectType0);
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[2];
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(33, jSTypeNativeArray0[0].ordinal());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("TYPE_ERROR_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(33, jSTypeNativeArray0[1].ordinal());
      
      ErrorFunctionType errorFunctionType0 = (ErrorFunctionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, (List<JSType>) arrayList0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        FunctionType functionType1 = functionType0.getSuperClassConstructor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "H>YdXe@6";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(functionType0);
      
      JSType jSType0 = functionType0.getLeastSupertype((JSType) errorFunctionType0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEmptyType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(jSType0);
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality(jSType0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isEmptyType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs9=<r7BGJ.w2~3";
      boolean boolean0 = true;
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertNotNull(noObjectType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean1 = errorFunctionType0.defineProperty(string0, noObjectType0, boolean0, boolean0);
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      boolean boolean2 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertTrue(boolean2);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "A1o'E+T";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isPropertyTypeInferred(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "H>YdXe@6";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      
      String string1 = "prototype";
      assertNotSame(string1, string0);
      
      boolean boolean1 = errorFunctionType0.isPropertyTypeInferred(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "H>YdXe@6";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      String string1 = "call";
      assertNotSame(string1, string0);
      
      FunctionType functionType0 = (FunctionType)errorFunctionType0.getPropertyType(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(4, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(functionType0);
  }

  @Test
  public void test29()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "$)oFmf_D:K@G\"BR;5xC";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNotNull(errorFunctionType0);
      
      UnknownType unknownType0 = (UnknownType)errorFunctionType0.getPropertyType(string0);
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNotNull(unknownType0);
  }

  @Test
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertNotNull(noType0);
      
      String string0 = "prototype";
      boolean boolean0 = noType0.hasOwnProperty(string0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isCheckedUnknownType());
  }

  @Test
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertNotNull(functionType0);
      
      String string1 = "prototype";
      assertNotSame(string1, string0);
      
      boolean boolean0 = true;
      boolean boolean1 = functionType0.defineInferredProperty(string1, (JSType) noType0, boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean1);
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.isConstructor();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      
      PriorityQueue<JSType> priorityQueue0 = new PriorityQueue<JSType>();
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertNotNull(priorityQueue0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, priorityQueue0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      String string0 = "A1o'E+T";
      boolean boolean1 = functionType0.defineInferredProperty(string0, (JSType) unionType0, boolean0);
      assertTrue(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      UnionType unionType1 = (UnionType)functionType0.findPropertyType(string0);
      assertSame(unionType1, unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertNotNull(unionType1);
  }

  @Test
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Vector<ObjectType> vector0 = new Vector<ObjectType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((ObjectType) noType0);
      assertTrue(boolean0);
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[None]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      noType0.setImplementedInterfaces((List<ObjectType>) vector0);
      assertEquals(1, vector0.size());
      assertEquals(false, vector0.isEmpty());
      assertEquals("[None]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getImplementedInterfaces();
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      Iterable<ObjectType> iterable0 = noType0.getAllImplementedInterfaces();
      assertEquals(true, noType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.hasUnknownSupertype();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
  }

  @Test
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionPrototypeType functionPrototypeType0 = functionType0.getPrototype();
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isConstructor());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isEnumType());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isEnumElementType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isCheckedUnknownType());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(false, functionPrototypeType0.isInterface());
      assertEquals(false, functionPrototypeType0.isOrdinaryFunction());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isNominalType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionPrototypeType0);
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs=wr7BGJ.w~R";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      FunctionPrototypeType functionPrototypeType0 = null;
      boolean boolean0 = errorFunctionType0.setPrototype(functionPrototypeType0);
      assertFalse(boolean0);
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = noObjectType0.getSuperClassConstructor();
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(1, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      noObjectType0.setPrototypeBasedOn((ObjectType) functionType0);
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(1, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "_U<p0/L-gQLhN[:[9";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(3, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
  }

  @Test
  public void test41()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      Node node0 = Node.newString(string0);
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = node0.getFirstChild();
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNull(node1);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
  }

  @Test
  public void test42()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertNotNull(nullType0);
      
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = (JSType) nullType0;
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(false, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[3].isNominalType());
      assertEquals(false, jSTypeArray0[3].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isFunctionType());
      assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      assertEquals(false, jSTypeArray0[3].isEnumType());
      assertEquals(false, jSTypeArray0[3].isInterface());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(false, jSTypeArray0[3].isConstructor());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[3].isNoObjectType());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(true, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertEquals(false, jSTypeArray0[3].isEmptyType());
      assertEquals(false, jSTypeArray0[3].isEnumElementType());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertNotNull(jSTypeArray0[3]);
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) nullType0, jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
  }

  @Test
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      int int0 = noObjectType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "(yf#rs=wr7BGJ.w~R";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test45()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "+I$";
      int int0 = (-2211);
      Node node0 = Node.newNumber((double) int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isEmptyType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(unresolvedTypeExpression0);
      
      JSType[] jSTypeArray0 = new JSType[4];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unresolvedTypeExpression0, jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isEmptyType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(4, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertNotNull(functionType0);
      
      int int1 = functionType0.getMinArguments();
      assertEquals(4, int1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isEmptyType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(4, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test46()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[4];
      jSTypeArray0[3] = (JSType) nullType0;
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(false, jSTypeArray0[3].isInterface());
      assertEquals(false, jSTypeArray0[3].isEnumElementType());
      assertEquals(false, jSTypeArray0[3].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(false, jSTypeArray0[3].isFunctionType());
      assertEquals(false, jSTypeArray0[3].isConstructor());
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(false, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isEmptyType());
      assertEquals(false, jSTypeArray0[3].isNominalType());
      assertEquals(false, jSTypeArray0[3].isCheckedUnknownType());
      assertEquals(true, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      assertEquals(false, jSTypeArray0[3].isEnumType());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(false, jSTypeArray0[3].isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[3]);
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) nullType0, jSTypeArray0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionType((JSType) functionType0, boolean0, jSTypeArray0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(4, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNumberValueType());
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      
      FunctionType functionType2 = (FunctionType)functionType1.getGreatestSubtype((JSType) functionType0);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertEquals(false, functionType2.isConstructor());
      assertEquals(false, functionType2.isNumberValueType());
      assertEquals(false, functionType2.hasCachedValues());
      assertEquals(2147483647, functionType2.getMaxArguments());
      assertEquals(false, functionType2.isReturnTypeInferred());
      assertEquals(false, functionType2.isEmptyType());
      assertEquals(false, functionType2.isAllType());
      assertEquals(false, functionType2.isEnumElementType());
      assertEquals(true, functionType2.isFunctionType());
      assertEquals(true, functionType2.canBeCalled());
      assertEquals(false, functionType2.isCheckedUnknownType());
      assertEquals(false, functionType2.isRecordType());
      assertEquals(false, functionType2.isResolved());
      assertEquals(false, functionType2.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType2.isNoType());
      assertEquals(true, functionType2.isOrdinaryFunction());
      assertEquals(false, functionType2.isFunctionPrototypeType());
      assertEquals(false, functionType2.isNoObjectType());
      assertEquals(false, functionType2.isVoidType());
      assertEquals(false, functionType2.isUnionType());
      assertEquals(false, functionType2.isBooleanValueType());
      assertEquals(false, functionType2.hasInstanceType());
      assertEquals(false, functionType2.isEnumType());
      assertNull(functionType2.getTemplateTypeName());
      assertEquals(false, functionType2.isStringValueType());
      assertEquals(false, functionType2.isNominalType());
      assertEquals(false, functionType2.isInterface());
      assertEquals(false, functionType2.isTemplateType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(4, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNumberValueType());
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType2));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType2);
  }

  @Test
  public void test47()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      Node node0 = Node.newString(string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = node0.getFirstChild();
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node1);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node1);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getGreatestSubtype((JSType) functionType0);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType1.isNullType());
      assertEquals(true, functionType1.isInterface());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isEmptyType());
      assertNotNull(functionType1);
  }

  @Test
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewReturnType((FunctionType) noObjectType0, (JSType) noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNotNull(functionType0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType1 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotSame(functionType1, functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.hasInstanceType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNominalType());
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType1);
      
      FunctionType functionType2 = (FunctionType)JSType.getGreatestSubtype(functionType1, functionType0);
      assertNotSame(functionType2, functionType0);
      assertSame(functionType2, functionType1);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(functionType1, functionType0);
      assertSame(functionType1, functionType2);
      assertEquals(false, functionType2.isInterface());
      assertEquals(false, functionType2.isStringValueType());
      assertEquals(false, functionType2.isNumberValueType());
      assertEquals(2147483647, functionType2.getMaxArguments());
      assertEquals(false, functionType2.isConstructor());
      assertEquals(false, functionType2.isNoObjectType());
      assertEquals(true, functionType2.isFunctionType());
      assertEquals(false, functionType2.isResolved());
      assertEquals(false, functionType2.isAllType());
      assertEquals(false, functionType2.isFunctionPrototypeType());
      assertEquals(true, functionType2.isOrdinaryFunction());
      assertEquals(false, functionType2.isReturnTypeInferred());
      assertEquals(false, functionType2.isUnionType());
      assertEquals(false, functionType2.isCheckedUnknownType());
      assertEquals(false, functionType2.isVoidType());
      assertNull(functionType2.getTemplateTypeName());
      assertEquals(false, functionType2.isTemplateType());
      assertEquals(false, functionType2.isNoType());
      assertEquals(false, functionType2.isEnumType());
      assertEquals(false, functionType2.isNullType());
      assertEquals(true, functionType2.canBeCalled());
      assertEquals(false, functionType2.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType2.hasCachedValues());
      assertEquals(false, functionType2.isRecordType());
      assertEquals(false, functionType2.isEnumElementType());
      assertEquals(false, functionType2.isEmptyType());
      assertEquals(false, functionType2.hasInstanceType());
      assertEquals(false, functionType2.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isAllType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.hasInstanceType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNominalType());
      assertFalse(functionType2.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertFalse(functionType1.equals((Object)functionType0));
      assertNotNull(functionType2);
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      Node node0 = null;
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "tO?aJa/;M";
      int int0 = 105;
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(functionType0);
  }

  @Test
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertNotNull(stack0);
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isUnionType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNotNull(noObjectType0);
      
      String string0 = "QCvgZD:FC#W/@g{A&rC";
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) noObjectType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.hasEqualCallType((FunctionType) noType0);
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesStringContext());
  }

  @Test
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = noObjectType0.getSuperClassConstructor();
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNotNull(functionType0);
      
      NoObjectType noObjectType1 = (NoObjectType)functionType0.getGreatestSubtype((JSType) noObjectType0);
      assertNotSame(noObjectType1, noObjectType0);
      assertNotSame(noObjectType0, noObjectType1);
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isRecordType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertFalse(noObjectType1.equals((Object)noObjectType0));
      assertFalse(noObjectType0.equals((Object)noObjectType1));
      assertNotNull(noObjectType1);
  }

  @Test
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.isReturnTypeInferred();
      assertFalse(boolean0);
      assertEquals(false, noType0.isTemplateType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test55()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "z;%L8;COA.Ar";
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertNotNull(noType0);
      
      Node node0 = noType0.getSource();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getLeastSupertype((JSType) noType0);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.isInterface());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertNotNull(functionType1);
  }

  @Test
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noType0);
      
      boolean boolean0 = noType0.canBeCalled();
      assertTrue(boolean0);
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isRecordType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "H>YdXe@6";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Node node0 = Node.newString(string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
      
      errorFunctionType0.setSource(node0);
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
  }

  @Test
  public void test58()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noObjectType0);
      
      List<FunctionType> list0 = noObjectType0.getSubTypes();
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(list0);
  }
}
