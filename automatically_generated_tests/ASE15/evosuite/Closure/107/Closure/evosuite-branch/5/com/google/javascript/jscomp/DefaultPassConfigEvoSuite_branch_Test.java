/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:54:10 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AnonymousFunctionNamingPolicy;
import com.google.javascript.jscomp.CheckEventfulObjectDisposal;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureRewriteClass;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ControlStructureCheck;
import com.google.javascript.jscomp.CrossModuleMethodMotion;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.ErrorManager;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.HotSwapCompilerPass;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.PassFactory;
import com.google.javascript.jscomp.PreprocessorSymbolTable;
import com.google.javascript.jscomp.PrintStreamErrorManager;
import com.google.javascript.jscomp.PropertyRenamingPolicy;
import com.google.javascript.jscomp.ScopedAliases;
import com.google.javascript.jscomp.VariableRenamingPolicy;
import com.google.javascript.jscomp.graph.GraphvizGraph;
import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class DefaultPassConfigEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      
      boolean boolean0 = true;
      compilerOptions0.closurePass = boolean0;
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      
      Map<String, Node> map0 = DefaultPassConfig.getAdditionalReplacements(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      
      Map<String, Node> map0 = DefaultPassConfig.getAdditionalReplacements(compilerOptions0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(map0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.GlobalTypeResolver defaultPassConfig_GlobalTypeResolver0 = defaultPassConfig0.new GlobalTypeResolver(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_GlobalTypeResolver0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        defaultPassConfig_GlobalTypeResolver0.process(node0, node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = compiler0.newCompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.preserveGoogRequires);
      
      compiler0.initOptions(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.preserveGoogRequires);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkControlFlow;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.getHotSwapPass(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.suspiciousCode;
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      AbstractCompiler abstractCompiler0 = null;
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.create(abstractCompiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      boolean boolean0 = true;
      compilerOptions0.removeUnusedClassProperties = boolean0;
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(true, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(true, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, list0.isEmpty());
      assertEquals(15, list0.size());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(true, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(list0);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      
      boolean boolean0 = true;
      compilerOptions0.setInlineLocalVariables(boolean0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CrossModuleMethodMotion.IdGenerator crossModuleMethodMotion_IdGenerator0 = new CrossModuleMethodMotion.IdGenerator();
      assertNotNull(crossModuleMethodMotion_IdGenerator0);
      
      int int0 = crossModuleMethodMotion_IdGenerator0.newId();
      assertEquals(0, int0);
      
      boolean boolean0 = crossModuleMethodMotion_IdGenerator0.hasGeneratedAnyIds();
      assertTrue(boolean0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      boolean boolean1 = true;
      assertTrue(boolean1 == boolean0);
      
      compilerOptions0.setInlineGetters(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      compilerOptions0.removeUnusedVars = boolean0;
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      compilerOptions0.setOptimizeParameters(compilerOptions0.inlineGetters);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CrossModuleMethodMotion.IdGenerator crossModuleMethodMotion_IdGenerator0 = new CrossModuleMethodMotion.IdGenerator();
      assertNotNull(crossModuleMethodMotion_IdGenerator0);
      
      int int0 = crossModuleMethodMotion_IdGenerator0.newId();
      assertEquals(0, int0);
      
      boolean boolean0 = crossModuleMethodMotion_IdGenerator0.hasGeneratedAnyIds();
      assertTrue(boolean0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      
      compilerOptions0.removeUnusedVars = boolean0;
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.gatherCssNames);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CrossModuleMethodMotion.IdGenerator crossModuleMethodMotion_IdGenerator0 = new CrossModuleMethodMotion.IdGenerator();
      assertNotNull(crossModuleMethodMotion_IdGenerator0);
      
      int int0 = crossModuleMethodMotion_IdGenerator0.newId();
      assertEquals(0, int0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      
      boolean boolean0 = crossModuleMethodMotion_IdGenerator0.hasGeneratedAnyIds();
      assertTrue(boolean0);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      
      compilerOptions0.setCheckTypes(boolean0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      
      compilerOptions0.setOptimizeParameters(compilerOptions0.checkTypes);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeDeadCode);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      
      boolean boolean0 = true;
      compilerOptions0.aliasExternals = boolean0;
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      
      compilerOptions0.optimizeCalls = compilerOptions0.aliasExternals;
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, list0.isEmpty());
      assertEquals(16, list0.size());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(list0);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      
      boolean boolean0 = true;
      compilerOptions0.setInlineProperties(boolean0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(15, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      
      boolean boolean0 = true;
      compilerOptions0.setInlineLocalFunctions(boolean0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "ALIAj]SING_GET";
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      compilerOptions0.renamePrefixNamespace = string0;
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0.renamePrefixNamespace);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      // Undeclared exception!
      try {
        GraphvizGraph graphvizGraph0 = defaultPassConfig0.getPassGraph();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in renamePrefixNamespace name: ALIAj]SING_GET
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy0 = AnonymousFunctionNamingPolicy.UNMAPPED;
      compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy0;
      assertEquals("UNMAPPED", compilerOptions0.anonymousFunctionNaming.toString());
      assertEquals(1, compilerOptions0.anonymousFunctionNaming.ordinal());
      assertEquals("UNMAPPED", compilerOptions0.anonymousFunctionNaming.name());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      
      boolean boolean0 = true;
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      
      compilerOptions0.setLabelRenaming(boolean0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.reserveRawExports);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(15, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.reserveRawExports);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      
      VariableRenamingPolicy variableRenamingPolicy0 = VariableRenamingPolicy.ALL;
      compilerOptions0.variableRenaming = variableRenamingPolicy0;
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals("ALL", compilerOptions0.variableRenaming.name());
      assertEquals(2, compilerOptions0.variableRenaming.ordinal());
      assertEquals("ALL", compilerOptions0.variableRenaming.toString());
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markAsCompiled);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      
      boolean boolean0 = true;
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      
      compilerOptions0.setInstrumentMemoryAllocations(boolean0);
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(true, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(true, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      
      boolean boolean0 = true;
      compilerOptions0.coalesceVariableNames = boolean0;
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      
      compilerOptions0.setFoldConstants(compilerOptions0.coalesceVariableNames);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.jqueryPass);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      
      PropertyRenamingPolicy propertyRenamingPolicy0 = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
      compilerOptions0.setPropertyRenaming(propertyRenamingPolicy0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      
      AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy0 = AnonymousFunctionNamingPolicy.MAPPED;
      compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy0;
      assertEquals(2, compilerOptions0.anonymousFunctionNaming.ordinal());
      assertEquals("MAPPED", compilerOptions0.anonymousFunctionNaming.name());
      assertEquals("MAPPED", compilerOptions0.anonymousFunctionNaming.toString());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "ALIASING_GET";
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      compilerOptions0.renamePrefixNamespace = string0;
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0.renamePrefixNamespace);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, list0.isEmpty());
      assertEquals(16, list0.size());
      assertNotNull(list0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeTryCatchFinally);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      boolean boolean0 = true;
      compilerOptions0.collapseAnonymousFunctions = boolean0;
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertTrue(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertTrue(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertTrue(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      boolean boolean0 = true;
      compilerOptions0.flowSensitiveInlineVariables = boolean0;
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      compilerOptions0.removeUnusedLocalVars = boolean0;
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      
      boolean boolean0 = true;
      compilerOptions0.flowSensitiveInlineVariables = boolean0;
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      
      boolean boolean0 = true;
      compilerOptions0.convertToDottedProperties = boolean0;
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      
      compilerOptions0.crossModuleMethodMotion = compilerOptions0.convertToDottedProperties;
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertTrue(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, list0.isEmpty());
      assertEquals(16, list0.size());
      assertNotNull(list0);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertTrue(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      
      boolean boolean0 = true;
      compilerOptions0.setSpecializeInitialModule(boolean0);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(15, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(list0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkSuspiciousCode);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      boolean boolean0 = true;
      compilerOptions0.setDevirtualizePrototypeMethods(boolean0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      boolean boolean0 = true;
      compilerOptions0.crossModuleCodeMotion = boolean0;
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(16, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(list0);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      boolean boolean0 = true;
      compilerOptions0.smartNameRemoval = boolean0;
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertTrue(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertTrue(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertTrue(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      boolean boolean0 = true;
      compilerOptions0.ideMode = boolean0;
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      compilerOptions0.ignoreCajaProperties = compilerOptions0.ideMode;
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseProperties);
      
      boolean boolean0 = true;
      compilerOptions0.setMarkNoSideEffectCalls(boolean0);
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseProperties);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseProperties);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, list0.isEmpty());
      assertEquals(15, list0.size());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(list0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseProperties);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      
      boolean boolean0 = true;
      compilerOptions0.extraSmartNameRemoval = boolean0;
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      
      List<PassFactory> list0 = defaultPassConfig0.getOptimizations();
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(14, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      boolean boolean0 = true;
      compilerOptions0.setDisambiguatePrivateProperties(boolean0);
      assertEquals(true, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(true, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.generateExports);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      compilerOptions0.checkGlobalNamesLevel = checkLevel0;
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(0, compilerOptions0.checkGlobalNamesLevel.ordinal());
      assertEquals("ERROR", compilerOptions0.checkGlobalNamesLevel.toString());
      assertEquals("ERROR", compilerOptions0.checkGlobalNamesLevel.name());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.generateExports);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.generateExports);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.generateExports);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      boolean boolean0 = true;
      compilerOptions0.setProcessObjectPropertyString(boolean0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      compilerOptions0.setAggressiveVarCheck(checkLevel0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasExternals);
      
      boolean boolean0 = true;
      compilerOptions0.coalesceVariableNames = boolean0;
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasExternals);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasExternals);
      
      compilerOptions0.setComputeFunctionSideEffects(compilerOptions0.coalesceVariableNames);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasExternals);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.aliasExternals);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "ALIASING_GET";
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      
      compilerOptions0.setSyntheticBlockStartMarker(string0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      
      boolean boolean0 = true;
      compilerOptions0.aliasExternals = boolean0;
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      
      compilerOptions0.generateExports = compilerOptions0.aliasExternals;
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.lineBreak);
      
      boolean boolean0 = true;
      compilerOptions0.angularPass = boolean0;
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.lineBreak);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.lineBreak);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.lineBreak);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      
      boolean boolean0 = true;
      compilerOptions0.jqueryPass = boolean0;
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.generatePseudoNames);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      
      boolean boolean0 = true;
      compilerOptions0.closurePass = boolean0;
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
      
      LinkedDirectedGraph linkedDirectedGraph0 = (LinkedDirectedGraph)defaultPassConfig0.getPassGraph();
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals("LinkedGraph", linkedDirectedGraph0.getName());
      assertEquals(true, linkedDirectedGraph0.isDirected());
      assertNotNull(linkedDirectedGraph0);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineVariables);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      
      Logger logger0 = null;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertNotNull(compiler0);
      
      boolean boolean0 = true;
      compilerOptions0.ideMode = boolean0;
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
      
      defaultPassConfig0.maybeInitializePreprocessorSymbolTable(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.lineBreak);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Compiler.IntermediateState compiler_IntermediateState0 = compiler0.getState();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler_IntermediateState0);
      
      compiler0.setState(compiler_IntermediateState0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       String string0 = "ALIASING_GET";
//       CompilerOptions compilerOptions0 = new CompilerOptions();
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertNotNull(compilerOptions0);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.preserveGoogRequires);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       
//       Logger logger0 = null;
//       LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(loggerErrorManager0);
//       
//       Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(compiler0);
//       
//       DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(defaultPassConfig0);
//       
//       DefaultPassConfig.GlobalTypeResolver defaultPassConfig_GlobalTypeResolver0 = defaultPassConfig0.new GlobalTypeResolver(compiler0);
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(defaultPassConfig_GlobalTypeResolver0);
//       
//       Node node0 = compiler0.parseSyntheticCode(string0, compilerOptions0.aliasStringsBlacklist);
//       assertEquals(false, node0.isAnd());
//       assertEquals(false, node0.isVar());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(true, node0.isSyntheticBlock());
//       assertEquals(false, node0.isReturn());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isFalse());
//       assertEquals(false, node0.isCast());
//       assertEquals(4096, node0.getSourcePosition());
//       assertEquals(false, node0.isDo());
//       assertEquals(false, node0.isStringKey());
//       assertEquals(false, node0.isAdd());
//       assertEquals(false, node0.isContinue());
//       assertEquals(false, node0.isWhile());
//       assertEquals(false, node0.isExprResult());
//       assertEquals(false, node0.isInstanceOf());
//       assertEquals(false, node0.isNew());
//       assertEquals("ALIASING_GET", node0.getSourceFileName());
//       assertEquals(false, node0.isVoid());
//       assertEquals(false, node0.isGetterDef());
//       assertEquals(false, node0.isDec());
//       assertEquals(0, node0.getCharno());
//       assertEquals(0, node0.getChangeTime());
//       assertEquals(false, node0.isObjectLit());
//       assertEquals(false, node0.isThrow());
//       assertEquals(true, node0.mayMutateArguments());
//       assertEquals(0, node0.getLength());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isOr());
//       assertEquals(false, node0.isSetterDef());
//       assertEquals(false, node0.isEmpty());
//       assertEquals(false, node0.isCase());
//       assertEquals(false, node0.isArrayLit());
//       assertEquals(false, node0.isWith());
//       assertEquals(false, node0.isDebugger());
//       assertEquals(false, node0.isGetElem());
//       assertEquals(false, node0.isDefaultCase());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isBlock());
//       assertEquals(false, node0.isName());
//       assertEquals(false, node0.isComma());
//       assertEquals(false, node0.isTry());
//       assertEquals(false, node0.isIf());
//       assertEquals(true, node0.isScript());
//       assertEquals(false, node0.isFunction());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(1, node0.getLineno());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isIn());
//       assertEquals(false, node0.isNumber());
//       assertEquals(false, node0.isLabel());
//       assertEquals(false, node0.isAssignAdd());
//       assertEquals(false, node0.isInc());
//       assertEquals(false, node0.isNull());
//       assertEquals(false, node0.isLabelName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isNE());
//       assertEquals(false, node0.isFor());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isParamList());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       assertEquals(false, node0.isCatch());
//       assertEquals(132, node0.getType());
//       assertEquals(false, node0.isRegExp());
//       assertEquals(false, node0.isGetProp());
//       assertEquals(false, node0.isDelProp());
//       assertEquals(false, node0.isHook());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isBreak());
//       assertEquals(false, node0.isThis());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isNot());
//       assertEquals(false, node0.isTrue());
//       assertEquals(false, node0.isString());
//       assertEquals(false, node0.isTypeOf());
//       assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       assertEquals(false, node0.isCall());
//       assertEquals(false, node0.isSwitch());
//       assertEquals(false, node0.isAssign());
//       assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
//       assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
//       assertEquals(false, compilerOptions0.isExternExportsEnabled());
//       assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
//       assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
//       assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
//       assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
//       assertEquals(false, compilerOptions0.getCheckDeterminism());
//       assertEquals(false, compilerOptions0.assumeStrictThis());
//       assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
//       assertNull(compilerOptions0.getLanguageOut());
//       assertEquals(false, compilerOptions0.getInferTypes());
//       assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(0.0, compiler0.getProgress(), 0.01D);
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(false, compiler0.hasErrors());
//       assertEquals(0, compiler0.getErrorCount());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
//       assertEquals(0, loggerErrorManager0.getWarningCount());
//       assertEquals(0, loggerErrorManager0.getErrorCount());
//       assertNotNull(node0);
//       assertFalse(compilerOptions0.inlineFunctions);
//       assertFalse(compilerOptions0.optimizeReturns);
//       assertFalse(compilerOptions0.preserveGoogRequires);
//       assertFalse(compilerOptions0.foldConstants);
//       assertFalse(compilerOptions0.rewriteFunctionExpressions);
//       assertFalse(compilerOptions0.checkSymbols);
//       assertFalse(compilerOptions0.deadAssignmentElimination);
//       assertFalse(compilerOptions0.checkTypes);
//       assertFalse(compilerOptions0.removeTryCatchFinally);
//       assertFalse(compilerOptions0.markNoSideEffectCalls);
//       assertFalse(compilerOptions0.computeFunctionSideEffects);
//       assertFalse(compilerOptions0.removeUnusedClassProperties);
//       assertFalse(compilerOptions0.generateExports);
//       assertFalse(compilerOptions0.ideMode);
//       assertFalse(compilerOptions0.removeUnusedLocalVars);
//       assertFalse(compilerOptions0.markAsCompiled);
//       assertFalse(compilerOptions0.collapseAnonymousFunctions);
//       assertFalse(compilerOptions0.flowSensitiveInlineVariables);
//       assertFalse(compilerOptions0.printInputDelimiter);
//       assertFalse(compilerOptions0.gatherCssNames);
//       assertFalse(compilerOptions0.recordFunctionInformation);
//       assertFalse(compilerOptions0.crossModuleMethodMotion);
//       assertFalse(compilerOptions0.smartNameRemoval);
//       assertFalse(compilerOptions0.coalesceVariableNames);
//       assertFalse(compilerOptions0.checkControlStructures);
//       assertFalse(compilerOptions0.removeUnusedVars);
//       assertFalse(compilerOptions0.checkSuspiciousCode);
//       assertFalse(compilerOptions0.inlineConstantVars);
//       assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
//       assertFalse(compilerOptions0.inlineGetters);
//       assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
//       assertFalse(compilerOptions0.aliasAllStrings);
//       assertFalse(compilerOptions0.disambiguateProperties);
//       assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
//       assertFalse(compilerOptions0.crossModuleCodeMotion);
//       assertFalse(compilerOptions0.convertToDottedProperties);
//       assertFalse(compilerOptions0.closurePass);
//       assertFalse(compilerOptions0.optimizeParameters);
//       assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
//       assertFalse(compilerOptions0.optimizeArgumentsArray);
//       assertFalse(compilerOptions0.generatePseudoNames);
//       assertFalse(compilerOptions0.reserveRawExports);
//       assertFalse(compilerOptions0.collapseVariableDeclarations);
//       assertFalse(compilerOptions0.optimizeCalls);
//       assertFalse(compilerOptions0.jqueryPass);
//       assertFalse(compilerOptions0.inlineVariables);
//       assertFalse(compilerOptions0.devirtualizePrototypeMethods);
//       assertFalse(compilerOptions0.aliasExternals);
//       assertFalse(compilerOptions0.prettyPrint);
//       assertFalse(compilerOptions0.inlineLocalFunctions);
//       assertFalse(compilerOptions0.labelRenaming);
//       assertFalse(compilerOptions0.removeDeadCode);
//       assertFalse(compilerOptions0.aliasKeywords);
//       assertFalse(compilerOptions0.ambiguateProperties);
//       assertFalse(compilerOptions0.collapseProperties);
//       assertFalse(compilerOptions0.lineBreak);
//       assertFalse(compilerOptions0.moveFunctionDeclarations);
//       assertFalse(compilerOptions0.exportTestFunctions);
//       assertFalse(compilerOptions0.instrumentForCoverage);
//       
//       // Undeclared exception!
//       try {
//         defaultPassConfig_GlobalTypeResolver0.hotSwapScript(node0, node0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      DefaultPassConfig.ClearTypedScope defaultPassConfig_ClearTypedScope0 = defaultPassConfig0.new ClearTypedScope();
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertNotNull(defaultPassConfig_ClearTypedScope0);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      
      Node node0 = null;
      defaultPassConfig_ClearTypedScope0.process(node0, node0);
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkRequires;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.getHotSwapPass(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkProvides;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.getHotSwapPass(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Logger logger0 = null;
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(loggerErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) loggerErrorManager0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkControlStructures;
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      ControlStructureCheck controlStructureCheck0 = (ControlStructureCheck)defaultPassConfig_HotSwapPassFactory0.create(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertNotNull(controlStructureCheck0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkTypes;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.create(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(hotSwapCompilerPass0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkAccessControls;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.create(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.inferJsDocInfo;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.create(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(hotSwapCompilerPass0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      // Undeclared exception!
      try {
        compiler0.processDefines();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.inferTypes;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.getHotSwapPass(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(hotSwapCompilerPass0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.resolveTypes;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      DefaultPassConfig.GlobalTypeResolver defaultPassConfig_GlobalTypeResolver0 = (DefaultPassConfig.GlobalTypeResolver)defaultPassConfig_HotSwapPassFactory0.create(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_GlobalTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkVariableReferences;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.create(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.checkVars;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.getHotSwapPass(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertNotNull(loggerErrorManager0);
      
      // Undeclared exception!
      try {
        compiler0.check();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL COMPILER ERROR.
         // Please report this problem.
         // null
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      PreprocessorSymbolTable preprocessorSymbolTable0 = defaultPassConfig0.getPreprocessorSymbolTable();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(preprocessorSymbolTable0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      GlobalNamespace globalNamespace0 = defaultPassConfig0.getGlobalNamespace();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(globalNamespace0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "ALIASING_GET";
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.closureGoogScopeAliases;
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
      
      PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager((PrintStream) mockPrintStream0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertNotNull(printStreamErrorManager0);
      
      Compiler compiler0 = new Compiler((ErrorManager) printStreamErrorManager0);
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      ScopedAliases scopedAliases0 = (ScopedAliases)defaultPassConfig_HotSwapPassFactory0.create(compiler0);
      assertEquals(CompilerOptions.TracerMode.OFF, compilerOptions0.getTracerMode());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, compilerOptions0.isDisambiguatePrivateProperties());
      assertEquals(false, compilerOptions0.assumeStrictThis());
      assertEquals(false, compilerOptions0.getCheckDeterminism());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.isRemoveUnusedClassProperties());
      assertNull(compilerOptions0.getLanguageOut());
      assertEquals(false, compilerOptions0.assumeClosuresOnlyCaptureReferences());
      assertEquals(CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF, compilerOptions0.getCheckEventfulObjectDisposalPolicy());
      assertEquals(false, compilerOptions0.getInstrumentMemoryAllocations());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compilerOptions0.getLanguageIn());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.getInferTypes());
      assertEquals(0, printStreamErrorManager0.getErrorCount());
      assertEquals(0.0, printStreamErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, printStreamErrorManager0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(scopedAliases0);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.jqueryPass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.preserveGoogRequires);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeUnusedClassProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.preferLineBreakAtEndOfFile);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeDeadCode);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.closureRewriteGoogClass;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      ClosureRewriteClass closureRewriteClass0 = (ClosureRewriteClass)defaultPassConfig_HotSwapPassFactory0.create(compiler0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(closureRewriteClass0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      DefaultPassConfig defaultPassConfig0 = compiler0.ensureDefaultPassConfig();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig0);
      
      DefaultPassConfig.HotSwapPassFactory defaultPassConfig_HotSwapPassFactory0 = defaultPassConfig0.closurePrimitives;
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(defaultPassConfig_HotSwapPassFactory0);
      
      // Undeclared exception!
      try {
        HotSwapCompilerPass hotSwapCompilerPass0 = defaultPassConfig_HotSwapPassFactory0.create(compiler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
