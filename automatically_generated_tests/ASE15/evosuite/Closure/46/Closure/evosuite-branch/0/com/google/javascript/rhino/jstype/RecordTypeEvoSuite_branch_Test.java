/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:55:59 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class RecordTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "0w{c+^e/<CPHb";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      
      Node node0 = noResolvedType0.getRootNode();
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noResolvedType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      RecordType recordType1 = (RecordType)recordType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      assertNotNull(recordType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, recordType0.isResolved());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(true, recordType1.isResolved());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "jQxh^nZAh8l";
      int int0 = 101;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(413797, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(101, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(-2147483547, node0.getSourceOffset());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThrow());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(namedType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(413797, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(101, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(-2147483547, node0.getSourceOffset());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(413797, node0.getSourcePosition());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(101, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(-2147483547, node0.getSourceOffset());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalConstructor());
      
      NoObjectType noObjectType0 = (NoObjectType)recordType0.getGreatestSubtypeHelper(namedType0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isEnumType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType.TypePair jSType_TypePair0 = booleanType0.getTypesUnderShallowEquality((JSType) recordType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.toString());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      String string0 = "";
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      
      recordType0.setPropertyJSDocInfo(string0, jSDocInfo0);
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isUnionType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "0w{c+^e/<CPHb";
      String string1 = "Dr3y8Z,GOiGamA7";
      assertNotSame(string1, string0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      Node node0 = noResolvedType0.getRootNode();
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(noResolvedType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string1, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty2);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      RecordType recordType1 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(recordType1.equals((Object)recordType0));
      assertNotSame(recordType1, recordType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = ")nns@{V!\"4/6";
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      Node node0 = noType0.getRootNode();
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(booleanType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isUnionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getMaxArguments());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = recordType0.removeProperty(string0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      RecordType recordType1 = (RecordType)recordType0.getGreatestSubtypeHelper(recordType0);
      assertNotNull(recordType1);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isFunctionType());
      assertFalse(recordType0.equals((Object)recordType1));
      assertFalse(boolean0 == boolean1);
      assertFalse(recordType1.equals((Object)recordType0));
      assertNotSame(recordType0, recordType1);
      assertNotSame(recordType1, recordType0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      String string0 = ")nns@{V!\"4/6";
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noType0.getRootNode();
      assertNull(node0);
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(booleanType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertNull(noType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      RecordType recordType1 = (RecordType)recordType0.getGreatestSubtypeHelper(recordType0);
      assertNotNull(recordType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isEnumElementType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isEnumType());
      assertEquals(false, recordType1.isNominalType());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isNoResolvedType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isConstructor());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNominalConstructor());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(false, recordType1.isFunctionPrototypeType());
      assertEquals(false, recordType1.isOrdinaryFunction());
      assertEquals(false, recordType1.isCheckedUnknownType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isInterface());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(recordType1.equals((Object)recordType0));
      assertTrue(recordType0.equals((Object)recordType1));
      assertNotSame(recordType1, recordType0);
      assertNotSame(recordType0, recordType1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "";
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      
      Node node0 = noType0.getRootNode();
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty0 = new RecordTypeBuilder.RecordProperty(booleanType0, node0);
      assertNotNull(recordTypeBuilder_RecordProperty0);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty1 = hashMap0.put(string0, recordTypeBuilder_RecordProperty0);
      assertNull(recordTypeBuilder_RecordProperty1);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      
      RecordTypeBuilder.RecordProperty recordTypeBuilder_RecordProperty2 = hashMap0.put(string0, recordTypeBuilder_RecordProperty1);
      assertNotNull(recordTypeBuilder_RecordProperty2);
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNominalType());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isStringValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertSame(recordTypeBuilder_RecordProperty0, recordTypeBuilder_RecordProperty2);
      assertSame(recordTypeBuilder_RecordProperty2, recordTypeBuilder_RecordProperty0);
      
      RecordType recordType0 = null;
      try {
        recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // RecordProperty associated with a property should not be null!
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
      
      JSType.TypePair jSType_TypePair0 = recordType0.getTypesUnderEquality((JSType) recordType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
  }
}
