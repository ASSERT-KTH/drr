/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:13:39 GMT 2014
 */

package com.google.javascript.jscomp.type;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.JqueryCodingConvention;
import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.junit.runner.RunWith;

 
public class ChainableReverseAbstractInterpreterEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = null;
      String string0 = "undefined";
      VoidType voidType0 = (VoidType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(voidType0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(true, voidType0.matchesStringContext());
  }

  @Test
  public void test01()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      String string0 = "%qgFYTi0e$`/ZLPq/HM";
      boolean boolean0 = false;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNull(jSType1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType1);
      assertNull(functionType0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      String string1 = "boolean";
      assertNotSame(string1, string0);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try {
        JSType jSType2 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(functionType0, string1, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(23, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(23, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(23, jSTypeNativeArray0[2].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals(23, jSTypeNativeArray0[3].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals(23, jSTypeNativeArray0[4].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[2];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(23, jSTypeNativeArray0[5].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[2];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(23, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[6];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(23, jSTypeNativeArray0[7].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      
      jSTypeNativeArray0[8] = jSTypeNativeArray0[3];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[8].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[8].toString());
      assertEquals(23, jSTypeNativeArray0[8].ordinal());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isUnionType());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType(jSType0);
      assertNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isUnionType());
      
      String string0 = "number";
      boolean boolean0 = true;
      NumberType numberType0 = (NumberType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, string0, boolean0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isUnionType());
  }

  @Test
  public void test03()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(23, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(23, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNativeArray0[1];
      assertEquals(23, jSTypeNativeArray0[2].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[2].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[2].toString());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals(23, jSTypeNativeArray0[3].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals(23, jSTypeNativeArray0[4].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[2];
      assertEquals(23, jSTypeNativeArray0[5].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[5].name());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[2];
      assertEquals(23, jSTypeNativeArray0[6].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[6];
      assertEquals(23, jSTypeNativeArray0[7].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      
      jSTypeNativeArray0[8] = jSTypeNativeArray0[3];
      assertEquals(23, jSTypeNativeArray0[8].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[8].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[8].name());
      
      JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "h-[mP\\%|(";
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType0 = JSType.toMaybeParameterizedType(jSType0);
      assertNull(parameterizedType0);
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(parameterizedType0, string0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test04()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertNull(jSType1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test05()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNull(functionType0);
      
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(functionType0);
      assertNull(jSType1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test06()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      //  // Unstable assertion: assertNotNull(googleCodingConvention0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention((CodingConvention) googleCodingConvention0);
      //  // Unstable assertion: assertNotNull(closureCodingConvention0);
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(semanticReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      String string0 = "function";
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(closureReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      boolean boolean0 = false;
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test07()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      String string0 = closureCodingConvention0.getDelegateSuperclassName();
      assertNull(string0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
      
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      assertNull(jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNominalType());
  }

  @Test
  public void test08()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      String string0 = googleCodingConvention0.getExportPropertyFunction();
      assertNotNull(string0);
      assertEquals("goog.exportProperty", string0);
      
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNull(jSType1);
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test09()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = null;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isUnionType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noObjectType0, string0, boolean0);
      assertNull(jSType0);
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isUnionType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test10()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = null;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "object";
      NoObjectType noObjectType1 = (NoObjectType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(noObjectType0, string0, boolean0);
      assertNotNull(noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isParameterizedType());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isRecordType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test11()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "ly7WU%X";
      int int0 = 0;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JSType jSType0 = jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertNotNull(jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
  }

  @Test
  public void test12()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention((CodingConvention) googleCodingConvention0);
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
      
      String string0 = "function";
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      boolean boolean0 = true;
      JSType jSType0 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      assertNotNull(jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEnumElementType());
  }

  @Test
  public void test13()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType0 = null;
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSType0);
      assertNull(functionType0);
      
      double double0 = (-690.79296);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      FlowScope flowScope0 = null;
      boolean boolean0 = true;
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertNull(flowScope1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isInstanceOf());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      
      // Undeclared exception!
      try {
        semanticReverseAbstractInterpreter0.declareNameInScope(flowScope1, node0, functionType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node cannot be refined. 
         // NUMBER -690.79296
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(true, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(true, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isResolved());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(true, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isVoidType());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FlowScope flowScope0 = null;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) objectType0;
      assertNotNull(jSTypeArray0[2]);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isParameterizedType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(true, jSTypeArray0[2].isNominalConstructor());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(true, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(true, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isResolved());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(true, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isVoidType());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs(jSTypeArray0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isParamList());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isReturn());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType(jSTypeArray0[2]);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      
      Node node1 = functionType0.getRootNode();
      assertNull(node1);
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      
      Node node2 = node0.getChildBefore(node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertNotNull(node2);
      assertNotSame(node2, node0);
      assertNotSame(node0, node2);
      assertEquals(false, node2.isWhile());
      assertEquals(false, node2.isTypeOf());
      assertEquals(false, node2.isIf());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isContinue());
      assertEquals(false, node2.isParamList());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNot());
      assertEquals(false, node2.isRegExp());
      assertEquals(false, node2.isAssign());
      assertEquals(false, node2.isAssignAdd());
      assertEquals(false, node2.isString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isDefaultCase());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isThis());
      assertEquals(false, node2.isGetterDef());
      assertEquals(0, node2.getLength());
      assertEquals(false, node2.isAdd());
      assertEquals(false, node2.isStringKey());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.hasChildren());
      assertEquals(false, node2.isGetElem());
      assertEquals(false, node2.isNull());
      assertEquals(false, node2.isLabel());
      assertEquals(false, node2.isFromExterns());
      assertEquals(false, node2.isGetProp());
      assertEquals(false, node2.isVoid());
      assertEquals(false, node2.isOr());
      assertEquals(false, node2.isBreak());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isLabelName());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isTry());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.isScript());
      assertEquals(false, node2.isNE());
      assertEquals(38, node2.getType());
      assertEquals(false, node2.isArrayLit());
      assertEquals(false, node2.isWith());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isDo());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isHook());
      assertEquals(false, node2.isEmpty());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isDelProp());
      assertEquals(false, node2.isTrue());
      assertEquals(false, node2.isInstanceOf());
      assertEquals(false, node2.isComma());
      assertEquals(false, node2.isCase());
      assertEquals(false, node2.isNumber());
      assertEquals(true, node2.isName());
      assertEquals(false, node2.isFor());
      assertEquals(false, node2.isNew());
      assertEquals(false, node2.isCatch());
      assertEquals(false, node2.isInc());
      assertEquals(false, node2.isThrow());
      assertEquals(false, node2.isVar());
      assertEquals(false, node2.isFalse());
      assertEquals(true, node2.isVarArgs());
      assertEquals(false, node2.isIn());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isSetterDef());
      assertEquals(false, node2.isReturn());
      assertEquals(false, node2.isObjectLit());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isCall());
      assertEquals(false, node2.isSwitch());
      assertEquals(false, node2.isExprResult());
      assertEquals(false, node2.isDebugger());
      assertEquals(false, node2.isBlock());
      assertEquals(false, node2.isAnd());
      assertEquals(false, node2.isDec());
      assertEquals(false, node2.isFunction());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.isParamList());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isReturn());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      
      // Undeclared exception!
      try {
        semanticReverseAbstractInterpreter0.declareNameInScope(flowScope0, node2, functionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention((CodingConvention) googleCodingConvention0);
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FlowScope flowScope0 = null;
      int int0 = 42;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isThis());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(42, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(172074, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(42, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(42, node0.getCharno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      
      closureReverseAbstractInterpreter0.declareNameInScope(flowScope0, node0, unionType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isThis());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isThrow());
      assertEquals(42, node0.getLineno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertNull(node0.getSourceFileName());
      assertEquals(172074, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(42, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVar());
      assertEquals(42, node0.getCharno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      int int0 = 38;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasOneChild());
      
      FlowScope flowScope0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = null;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      FlowScope flowScope1 = semanticReverseAbstractInterpreter0.nextPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertNull(flowScope1);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(38, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isExprResult());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasOneChild());
      
      // Undeclared exception!
      try {
        JSType jSType0 = closureReverseAbstractInterpreter0.getTypeIfRefinable(node0, flowScope1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NAME is not a string node
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      ErrorReporter errorReporter0 = null;
      String string0 = "EQ~h1.9U>P7OB/H)";
      boolean boolean0 = closureCodingConvention0.isExported(string0);
      assertFalse(boolean0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 307;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(307, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isArrayLit());
      
      FlowScope flowScope0 = null;
      FlowScope flowScope1 = semanticReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertNull(flowScope1);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(307, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = semanticReverseAbstractInterpreter0.getTypeIfRefinable(node0, flowScope1);
      assertNull(jSType0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNumber());
      assertEquals(307, node0.getType());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(-1, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isArrayLit());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test18()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      String string0 = "goog.isu";
      int int0 = 33;
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertNotNull(node0);
      assertEquals(135201, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(33, node0.getType());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDo());
      assertEquals(true, node0.isGetProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(33, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(33, node0.getLineno());
      
      FlowScope flowScope0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        FlowScope flowScope1 = semanticReverseAbstractInterpreter0.getPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeRegistry jSTypeRegistry0 = null;
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) semanticReverseAbstractInterpreter0);
      assertNotNull(semanticReverseAbstractInterpreter1);
      assertSame(semanticReverseAbstractInterpreter0, semanticReverseAbstractInterpreter1);
      assertSame(semanticReverseAbstractInterpreter1, semanticReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      double double0 = (-690.79296);
      Node node0 = Node.newNumber(double0);
      assertNotNull(node0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      FlowScope flowScope0 = null;
      boolean boolean0 = true;
      FlowScope flowScope1 = closureReverseAbstractInterpreter0.firstPreciserScopeKnowingConditionOutcome(node0, flowScope0, boolean0);
      assertNull(flowScope1);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isArrayLit());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      // Undeclared exception!
      try {
        FlowScope flowScope2 = semanticReverseAbstractInterpreter1.firstPreciserScopeKnowingConditionOutcome(node0, flowScope1, boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention((CodingConvention) googleCodingConvention0);
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter1 = (ClosureReverseAbstractInterpreter)closureReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) closureReverseAbstractInterpreter0);
      assertNotNull(closureReverseAbstractInterpreter1);
      assertSame(closureReverseAbstractInterpreter1, closureReverseAbstractInterpreter0);
      assertSame(closureReverseAbstractInterpreter0, closureReverseAbstractInterpreter1);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        ChainableReverseAbstractInterpreter chainableReverseAbstractInterpreter0 = closureReverseAbstractInterpreter0.append((ChainableReverseAbstractInterpreter) closureReverseAbstractInterpreter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(objectType0);
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(true, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "hNJoJH&-4+$*'rS";
      NoType noType0 = (NoType)closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(objectType0, string0, boolean0);
      assertNotNull(noType0);
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(true, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNominalType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
  }

  @Test
  public void test22()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "function";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 1088;
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedByTypeOfResult(jSType0, string0, boolean0);
      assertFalse(jSType1.equals((Object)jSType0));
      assertFalse(jSType0.equals((Object)jSType1));
      assertNotNull(jSType1);
      assertNotSame(jSType1, jSType0);
      assertNotSame(jSType0, jSType1);
      assertEquals(false, jSType1.isRecordType());
      assertEquals(false, jSType1.isEnumElementType());
      assertEquals(false, jSType1.isResolved());
      assertEquals(false, jSType1.isNoResolvedType());
      assertEquals(false, jSType1.isTemplateType());
      assertEquals(false, jSType1.isOrdinaryFunction());
      assertEquals(false, jSType1.isFunctionPrototypeType());
      assertEquals(true, jSType1.isNominalConstructor());
      assertEquals(true, jSType1.isConstructor());
      assertEquals(false, jSType1.isParameterizedType());
      assertEquals(false, jSType1.isBooleanValueType());
      assertEquals(false, jSType1.isVoidType());
      assertEquals(false, jSType1.isNoType());
      assertEquals(false, jSType1.isNominalType());
      assertEquals(false, jSType1.isNullType());
      assertEquals(false, jSType1.isEnumType());
      assertEquals(false, jSType1.isAllType());
      assertEquals(false, jSType1.isNumberValueType());
      assertEquals(false, jSType1.isInterface());
      assertEquals(false, jSType1.isStringValueType());
      assertEquals(true, jSType1.isFunctionType());
      assertEquals(false, jSType1.isUnionType());
      assertEquals(false, jSType1.isNoObjectType());
      assertEquals(false, jSType1.isCheckedUnknownType());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(23, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(23, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.ALL_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals(42, jSTypeNativeArray0[2].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(42, jSTypeNativeArray0[3].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals(42, jSTypeNativeArray0[4].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(42, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[6].name());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(42, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[6];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(42, jSTypeNativeArray0[7].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[7].name());
      
      jSTypeNativeArray0[8] = jSTypeNativeArray0[3];
      assertEquals(42, jSTypeNativeArray0[8].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[8].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[8].name());
      
      AllType allType0 = (AllType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(allType0);
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "h-[mP\\%|(";
      AllType allType1 = (AllType)semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(allType0, string0, boolean0);
      assertNotNull(allType1);
      assertSame(allType1, allType0);
      assertSame(allType0, allType1);
      assertEquals(false, allType1.isCheckedUnknownType());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isVoidType());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(true, allType1.hasDisplayName());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(false, allType1.isInterface());
      assertEquals(false, allType1.isNominalConstructor());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(true, allType1.isAllType());
      assertEquals(false, allType1.isNoResolvedType());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals(false, allType1.isEnumElementType());
      assertEquals(false, allType1.isConstructor());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isNoType());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(false, allType1.isEnumType());
      assertEquals("<Any Type>", allType1.getDisplayName());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(false, allType1.isParameterizedType());
      assertEquals(false, allType1.isFunctionType());
      assertEquals(false, allType1.isOrdinaryFunction());
      assertEquals(false, allType1.isFunctionPrototypeType());
      assertEquals(false, allType1.isUnionType());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(false, allType1.isNominalType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test24()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      NumberType numberType0 = (NumberType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(numberType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
      
      NumberType numberType1 = (NumberType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(numberType0);
      assertNotNull(numberType1);
      assertSame(numberType1, numberType0);
      assertSame(numberType0, numberType1);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(false, numberType1.isParameterizedType());
      assertEquals(false, numberType1.isAllType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isAllType());
  }

  @Test
  public void test25()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(23, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(23, jSTypeNativeArray0[1].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.ALL_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals("ALL_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(42, jSTypeNativeArray0[2].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[2].toString());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals(42, jSTypeNativeArray0[3].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(42, jSTypeNativeArray0[4].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[4].toString());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[5].name());
      assertEquals(42, jSTypeNativeArray0[5].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[5].toString());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[2];
      assertEquals(42, jSTypeNativeArray0[6].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[6];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(42, jSTypeNativeArray0[7].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[7].name());
      
      jSTypeNativeArray0[8] = jSTypeNativeArray0[3];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[8].name());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[8].toString());
      assertEquals(42, jSTypeNativeArray0[8].ordinal());
      
      AllType allType0 = (AllType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isParameterizedType());
      
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(allType0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isNominalType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isParameterizedType());
  }

  @Test
  public void test26()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = null;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      
      NoObjectType noObjectType1 = (NoObjectType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(noObjectType0);
      assertNotNull(noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertSame(noObjectType0, noObjectType1);
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(false, noObjectType1.isParameterizedType());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
  }

  @Test
  public void test27()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      BooleanType booleanType0 = (BooleanType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      
      BooleanType booleanType1 = (BooleanType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(booleanType0);
      assertNotNull(booleanType1);
      assertSame(booleanType1, booleanType0);
      assertSame(booleanType0, booleanType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(false, booleanType1.isNominalConstructor());
      assertEquals(false, booleanType1.isEnumElementType());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isParameterizedType());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isEnumType());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isOrdinaryFunction());
      assertEquals(false, booleanType1.isCheckedUnknownType());
      assertEquals(false, booleanType1.isNominalType());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType1.isNoResolvedType());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(false, booleanType1.isFunctionPrototypeType());
      assertEquals("boolean", booleanType1.getDisplayName());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isVoidType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isInterface());
      assertEquals(false, booleanType1.isConstructor());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
  }

  @Test
  public void test28()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      VoidType voidType0 = (VoidType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(voidType0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      VoidType voidType1 = (VoidType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(voidType0);
      assertNotNull(voidType1);
      assertSame(voidType0, voidType1);
      assertSame(voidType1, voidType0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isUnionType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType1.isCheckedUnknownType());
      assertEquals(false, voidType1.isStringValueType());
      assertEquals(false, voidType1.isParameterizedType());
      assertEquals(false, voidType1.isNoResolvedType());
      assertEquals(false, voidType1.isUnionType());
      assertEquals(false, voidType1.isNoType());
      assertEquals(false, voidType1.isFunctionType());
      assertEquals(false, voidType1.isAllType());
      assertEquals(false, voidType1.isFunctionPrototypeType());
      assertEquals(false, voidType1.isNominalType());
      assertEquals(false, voidType1.isNominalConstructor());
      assertEquals(true, voidType1.matchesStringContext());
      assertEquals(false, voidType1.isNoObjectType());
      assertEquals(false, voidType1.isNullType());
      assertEquals(false, voidType1.isTemplateType());
      assertEquals(false, voidType1.isEnumElementType());
      assertEquals(false, voidType1.isConstructor());
      assertEquals(false, voidType1.isBooleanValueType());
      assertEquals(false, voidType1.isRecordType());
      assertEquals(false, voidType1.matchesNumberContext());
      assertEquals(false, voidType1.isOrdinaryFunction());
      assertEquals("undefined", voidType1.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, voidType1.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType1.isInterface());
      assertEquals(false, voidType1.isEnumType());
      assertEquals(false, voidType1.matchesObjectContext());
      assertEquals(false, voidType1.isResolved());
      assertEquals(true, voidType1.isVoidType());
      assertEquals(false, voidType1.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test29()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "ly7WU%X";
      int int0 = 0;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test30()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      JSType jSType0 = null;
      ObjectType objectType0 = ObjectType.cast(jSType0);
      assertNull(objectType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType(objectType0, jSType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ParameterizedType parameterizedType1 = (ParameterizedType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(parameterizedType0);
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, parameterizedType0.isParameterizedType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(true, parameterizedType1.isParameterizedType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
  }

  @Test
  public void test31()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      StringType stringType0 = (StringType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isTemplateType());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      StringType stringType1 = (StringType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(stringType0);
      assertNotNull(stringType1);
      assertSame(stringType1, stringType0);
      assertSame(stringType0, stringType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType1.isParameterizedType());
      assertEquals("string", stringType1.getDisplayName());
      assertEquals(false, stringType1.isOrdinaryFunction());
      assertEquals(false, stringType1.isNumberValueType());
      assertEquals(false, stringType1.isUnionType());
      assertEquals(false, stringType1.isNominalType());
      assertEquals(false, stringType1.isFunctionType());
      assertEquals(false, stringType1.isTemplateType());
      assertEquals(false, stringType1.isNullType());
      assertEquals(false, stringType1.isResolved());
      assertEquals(false, stringType1.isInterface());
      assertEquals(true, stringType1.matchesObjectContext());
      assertEquals(false, stringType1.isAllType());
      assertEquals(false, stringType1.isCheckedUnknownType());
      assertEquals(true, stringType1.isStringValueType());
      assertEquals(false, stringType1.isNominalConstructor());
      assertEquals(false, stringType1.isFunctionPrototypeType());
      assertEquals(false, stringType1.isEnumElementType());
      assertEquals(false, stringType1.isConstructor());
      assertEquals(false, stringType1.isVoidType());
      assertEquals(false, stringType1.isEnumType());
      assertEquals(false, stringType1.isRecordType());
      assertEquals(false, stringType1.isNoObjectType());
      assertEquals(false, stringType1.isNoType());
      assertEquals(false, stringType1.isNoResolvedType());
      assertEquals(true, stringType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType1.isBooleanValueType());
      assertEquals(true, stringType1.matchesNumberContext());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(false, stringType0.isTemplateType());
  }

  @Test
  public void test32()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_VOID;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType0 = (NullType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(unionType0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(nullType0);
      assertNull(jSType0);
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test33()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention((CodingConvention) googleCodingConvention0);
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnionType unionType1 = (UnionType)closureReverseAbstractInterpreter0.getRestrictedWithoutNull(unionType0);
      assertTrue(unionType0.equals((Object)unionType1));
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNominalConstructor());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isFunctionPrototypeType());
      assertEquals(false, unionType1.isEnumType());
      assertEquals(false, unionType1.isCheckedUnknownType());
      assertEquals(false, unionType1.isConstructor());
      assertEquals(false, unionType1.isOrdinaryFunction());
      assertEquals(false, unionType1.isEnumElementType());
      assertEquals(false, unionType1.isInterface());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNominalType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isParameterizedType());
      assertEquals(false, unionType1.isNoResolvedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test34()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.EVAL_ERROR_FUNCTION_TYPE;
      JSType jSType0 = closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSType jSType1 = closureReverseAbstractInterpreter0.getRestrictedWithoutNull(jSType0);
      assertNotNull(jSType1);
      assertSame(jSType1, jSType0);
      assertSame(jSType0, jSType1);
      assertEquals(false, jSType1.isRecordType());
      assertEquals(true, jSType1.isFunctionType());
      assertEquals(false, jSType1.isResolved());
      assertEquals(false, jSType1.isNoObjectType());
      assertEquals(false, jSType1.isAllType());
      assertEquals(false, jSType1.isInterface());
      assertEquals(true, jSType1.isNominalConstructor());
      assertEquals(false, jSType1.isNoType());
      assertEquals(true, jSType1.isConstructor());
      assertEquals(false, jSType1.isUnionType());
      assertEquals(false, jSType1.isEnumType());
      assertEquals(false, jSType1.isNoResolvedType());
      assertEquals(false, jSType1.isNumberValueType());
      assertEquals(false, jSType1.isVoidType());
      assertEquals(false, jSType1.isTemplateType());
      assertEquals(false, jSType1.isFunctionPrototypeType());
      assertEquals(false, jSType1.isCheckedUnknownType());
      assertEquals(false, jSType1.isBooleanValueType());
      assertEquals(false, jSType1.isNullType());
      assertEquals(false, jSType1.isNominalType());
      assertEquals(false, jSType1.isParameterizedType());
      assertEquals(false, jSType1.isEnumElementType());
      assertEquals(false, jSType1.isStringValueType());
      assertEquals(false, jSType1.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(true, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
  }

  @Test
  public void test35()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.STRING_TYPE;
      StringType stringType0 = (StringType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isAllType());
      
      StringType stringType1 = (StringType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(stringType0);
      assertNotNull(stringType1);
      assertSame(stringType0, stringType1);
      assertSame(stringType1, stringType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isParameterizedType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isNominalConstructor());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(true, stringType1.matchesNumberContext());
      assertEquals(true, stringType1.matchesObjectContext());
      assertEquals(false, stringType1.isAllType());
      assertEquals(false, stringType1.isOrdinaryFunction());
      assertEquals(false, stringType1.isBooleanValueType());
      assertEquals(false, stringType1.isNominalConstructor());
      assertEquals(false, stringType1.isTemplateType());
      assertEquals(false, stringType1.isInterface());
      assertEquals(false, stringType1.isEnumElementType());
      assertEquals(false, stringType1.isVoidType());
      assertEquals(false, stringType1.isNullType());
      assertEquals(false, stringType1.isFunctionPrototypeType());
      assertEquals(false, stringType1.isNominalType());
      assertEquals(false, stringType1.isNoResolvedType());
      assertEquals(true, stringType1.matchesStringContext());
      assertEquals(false, stringType1.isResolved());
      assertEquals("string", stringType1.getDisplayName());
      assertEquals(BooleanLiteralSet.BOTH, stringType1.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType1.isCheckedUnknownType());
      assertEquals(false, stringType1.isFunctionType());
      assertEquals(true, stringType1.isStringValueType());
      assertEquals(false, stringType1.isRecordType());
      assertEquals(false, stringType1.isUnionType());
      assertEquals(false, stringType1.isEnumType());
      assertEquals(false, stringType1.isConstructor());
      assertEquals(false, stringType1.isNoObjectType());
      assertEquals(false, stringType1.isParameterizedType());
      assertEquals(false, stringType1.isNoType());
      assertEquals(false, stringType1.isNumberValueType());
  }

  @Test
  public void test36()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(true, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isAllType());
      
      NoType noType0 = (NoType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(objectType0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(true, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isAllType());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isConstructor());
  }

  @Test
  public void test37()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "ly7WU%X";
      int int0 = 0;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      JSType jSType0 = jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertNotNull(jSType0);
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertNotNull(unknownType0);
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(true, jSType0.isNominalType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isParameterizedType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNominalConstructor());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
  }

  @Test
  public void test38()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.BOOLEAN_TYPE;
      BooleanType booleanType0 = (BooleanType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isStringValueType());
      
      BooleanType booleanType1 = (BooleanType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(booleanType0);
      assertNotNull(booleanType1);
      assertSame(booleanType0, booleanType1);
      assertSame(booleanType1, booleanType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isParameterizedType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNominalConstructor());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType1.isResolved());
      assertEquals(false, booleanType1.isOrdinaryFunction());
      assertEquals(true, booleanType1.matchesNumberContext());
      assertEquals(false, booleanType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType1.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType1.isBooleanValueType());
      assertEquals(false, booleanType1.isInterface());
      assertEquals(false, booleanType1.isUnionType());
      assertEquals(true, booleanType1.matchesStringContext());
      assertEquals(false, booleanType1.isFunctionPrototypeType());
      assertEquals(false, booleanType1.isEnumType());
      assertEquals(false, booleanType1.isNumberValueType());
      assertEquals("boolean", booleanType1.getDisplayName());
      assertEquals(false, booleanType1.isCheckedUnknownType());
      assertEquals(false, booleanType1.isNoObjectType());
      assertEquals(false, booleanType1.isTemplateType());
      assertEquals(false, booleanType1.isNominalType());
      assertEquals(false, booleanType1.isNominalConstructor());
      assertEquals(true, booleanType1.matchesObjectContext());
      assertEquals(false, booleanType1.isStringValueType());
      assertEquals(false, booleanType1.isNoType());
      assertEquals(false, booleanType1.isAllType());
      assertEquals(false, booleanType1.isNullable());
      assertEquals(false, booleanType1.isParameterizedType());
      assertEquals(false, booleanType1.isEnumElementType());
      assertEquals(false, booleanType1.isConstructor());
      assertEquals(false, booleanType1.isNullType());
      assertEquals(false, booleanType1.isRecordType());
      assertEquals(false, booleanType1.isFunctionType());
      assertEquals(false, booleanType1.isVoidType());
  }

  @Test
  public void test39()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.RANGE_ERROR_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(23, jSTypeNativeArray0[0].ordinal());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[0].name());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals("RANGE_ERROR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals(23, jSTypeNativeArray0[1].ordinal());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.ALL_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[2] = jSTypeNative1;
      assertEquals("ALL_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(42, jSTypeNativeArray0[2].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals(42, jSTypeNativeArray0[3].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[4] = jSTypeNativeArray0[2];
      assertEquals(42, jSTypeNativeArray0[4].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[4].name());
      
      jSTypeNativeArray0[5] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(42, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[6] = jSTypeNativeArray0[2];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals(42, jSTypeNativeArray0[6].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[6].name());
      
      jSTypeNativeArray0[7] = jSTypeNativeArray0[6];
      assertEquals("ALL_TYPE", jSTypeNativeArray0[7].name());
      assertEquals(42, jSTypeNativeArray0[7].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[7].toString());
      
      jSTypeNativeArray0[8] = jSTypeNativeArray0[3];
      assertEquals(42, jSTypeNativeArray0[8].ordinal());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[8].name());
      assertEquals("ALL_TYPE", jSTypeNativeArray0[8].toString());
      
      AllType allType0 = (AllType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
      
      UnionType unionType0 = (UnionType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(allType0);
      assertNotNull(unionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isParameterizedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNominalConstructor());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, allType0.isNominalConstructor());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isInterface());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isParameterizedType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNoResolvedType());
  }

  @Test
  public void test40()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_TYPE;
      NumberType numberType0 = (NumberType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(numberType0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NumberType numberType1 = (NumberType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(numberType0);
      assertNotNull(numberType1);
      assertSame(numberType1, numberType0);
      assertSame(numberType0, numberType1);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals(false, numberType1.isOrdinaryFunction());
      assertEquals(false, numberType1.isNominalConstructor());
      assertEquals(false, numberType1.isEnumElementType());
      assertEquals(false, numberType1.isParameterizedType());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isNominalType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isNoResolvedType());
      assertEquals(false, numberType1.isInterface());
      assertEquals(false, numberType1.isConstructor());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isNullable());
      assertEquals("number", numberType1.getDisplayName());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isCheckedUnknownType());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isFunctionPrototypeType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isEnumType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType0.isOrdinaryFunction());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNominalType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoResolvedType());
      assertEquals(false, numberType0.isEnumType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isEnumElementType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isParameterizedType());
      assertEquals(false, numberType0.isInterface());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isFunctionPrototypeType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isCheckedUnknownType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNominalConstructor());
      assertEquals("number", numberType0.getDisplayName());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test41()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.VOID_TYPE;
      VoidType voidType0 = (VoidType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(voidType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(voidType0);
      assertNull(jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isParameterizedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNominalConstructor());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
  }

  @Test
  public void test42()  throws Throwable  {
      JqueryCodingConvention jqueryCodingConvention0 = new JqueryCodingConvention();
      assertNotNull(jqueryCodingConvention0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) jqueryCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      NullType nullType0 = (NullType)closureReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(nullType0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NullType nullType1 = (NullType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(nullType0);
      assertNotNull(nullType1);
      assertSame(nullType0, nullType1);
      assertSame(nullType1, nullType0);
      assertEquals("window", jqueryCodingConvention0.getGlobalObject());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isParameterizedType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNominalConstructor());
      assertEquals(false, nullType1.isVoidType());
      assertEquals(false, nullType1.isStringValueType());
      assertEquals(false, nullType1.isInterface());
      assertEquals(false, nullType1.isTemplateType());
      assertEquals(true, nullType1.isNullType());
      assertEquals(false, nullType1.isNominalType());
      assertEquals(false, nullType1.isCheckedUnknownType());
      assertEquals(false, nullType1.isFunctionPrototypeType());
      assertEquals(false, nullType1.isResolved());
      assertEquals(false, nullType1.isParameterizedType());
      assertEquals(false, nullType1.isConstructor());
      assertEquals(true, nullType1.matchesStringContext());
      assertEquals(false, nullType1.isFunctionType());
      assertEquals(false, nullType1.isNominalConstructor());
      assertEquals(false, nullType1.isEnumElementType());
      assertEquals(false, nullType1.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType1.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType1.isNumberValueType());
      assertEquals(false, nullType1.isRecordType());
      assertEquals(false, nullType1.isEnumType());
      assertEquals(false, nullType1.isOrdinaryFunction());
      assertEquals(true, nullType1.matchesNumberContext());
      assertEquals(false, nullType1.isNoType());
      assertEquals(false, nullType1.isNoObjectType());
      assertEquals(true, nullType1.isNullable());
      assertEquals(false, nullType1.matchesObjectContext());
      assertEquals(false, nullType1.isAllType());
      assertEquals(false, nullType1.isUnionType());
      assertEquals("null", nullType1.getDisplayName());
      assertEquals(false, nullType1.isBooleanValueType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test43()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = null;
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
      NoObjectType noObjectType0 = (NoObjectType)jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      
      NoObjectType noObjectType1 = (NoObjectType)semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(noObjectType0);
      assertNotNull(noObjectType1);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNominalConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isParameterizedType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType1.isCheckedUnknownType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isFunctionPrototypeType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(false, noObjectType1.isNominalType());
      assertEquals(false, noObjectType1.isNoResolvedType());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isEnumType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isNominalConstructor());
      assertEquals(false, noObjectType1.isParameterizedType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isEnumElementType());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(0, noObjectType1.getExtendedInterfacesCount());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isReturnTypeInferred());
      assertEquals(false, noObjectType1.isNullType());
  }

  @Test
  public void test44()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      JSType jSType0 = semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(jSType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNullType());
      
      JSType jSType1 = semanticReverseAbstractInterpreter0.getRestrictedWithoutUndefined(jSType0);
      assertNotNull(jSType1);
      assertSame(jSType1, jSType0);
      assertSame(jSType0, jSType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSType1.isInterface());
      assertEquals(false, jSType1.isConstructor());
      assertEquals(false, jSType1.isRecordType());
      assertEquals(true, jSType1.isFunctionPrototypeType());
      assertEquals(false, jSType1.isTemplateType());
      assertEquals(false, jSType1.isVoidType());
      assertEquals(false, jSType1.isAllType());
      assertEquals(false, jSType1.isFunctionType());
      assertEquals(false, jSType1.isNominalConstructor());
      assertEquals(false, jSType1.isNoType());
      assertEquals(false, jSType1.isNominalType());
      assertEquals(false, jSType1.isEnumType());
      assertEquals(false, jSType1.isNumberValueType());
      assertEquals(false, jSType1.isNoObjectType());
      assertEquals(false, jSType1.isOrdinaryFunction());
      assertEquals(false, jSType1.isBooleanValueType());
      assertEquals(false, jSType1.isNullType());
      assertEquals(false, jSType1.isUnionType());
      assertEquals(false, jSType1.isParameterizedType());
      assertEquals(false, jSType1.isEnumElementType());
      assertEquals(false, jSType1.isCheckedUnknownType());
      assertEquals(false, jSType1.isStringValueType());
      assertEquals(false, jSType1.isNoResolvedType());
      assertEquals(false, jSType1.isResolved());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isParameterizedType());
      assertEquals(false, jSType0.isFunctionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNominalConstructor());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(true, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isNullType());
  }

  @Test
  public void test45()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(closureReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.LEAST_FUNCTION_TYPE;
      FunctionType functionType0 = (FunctionType)semanticReverseAbstractInterpreter0.getNativeType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      FunctionType functionType1 = (FunctionType)closureReverseAbstractInterpreter0.getRestrictedWithoutUndefined(functionType0);
      assertNotNull(functionType1);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isParameterizedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isParameterizedType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
  }

  @Test
  public void test46()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      //  // Unstable assertion: assertNotNull(closureCodingConvention0);
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      ErrorReporter errorReporter0 = null;
      String string0 = "EQ~h1.9U>P7OB/H)";
      boolean boolean0 = closureCodingConvention0.isExported(string0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) closureCodingConvention0, jSTypeRegistry0);
      //  // Unstable assertion: assertNotNull(semanticReverseAbstractInterpreter0);
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[1];
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      jSTypeNativeArray0[0] = jSTypeNative0;
      //  // Unstable assertion: assertEquals(53, jSTypeNativeArray0[0].ordinal());
      //  // Unstable assertion: assertEquals("OBJECT_NUMBER_STRING_BOOLEAN", jSTypeNativeArray0[0].toString());
      //  // Unstable assertion: assertEquals("OBJECT_NUMBER_STRING_BOOLEAN", jSTypeNativeArray0[0].name());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
      
      JSType jSType0 = semanticReverseAbstractInterpreter0.getRestrictedByTypeOfResult(unionType0, string0, boolean0);
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoResolvedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isParameterizedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEnumElementType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isCheckedUnknownType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNominalConstructor());
  }

  @Test
  public void test47()  throws Throwable  {
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
      assertNotNull(googleCodingConvention0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter1 = (SemanticReverseAbstractInterpreter)semanticReverseAbstractInterpreter0.getFirst();
      assertNotNull(semanticReverseAbstractInterpreter1);
      assertSame(semanticReverseAbstractInterpreter1, semanticReverseAbstractInterpreter0);
      assertSame(semanticReverseAbstractInterpreter0, semanticReverseAbstractInterpreter1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test
  public void test48()  throws Throwable  {
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertNotNull(closureCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention((CodingConvention) closureCodingConvention0);
      assertNotNull(googleCodingConvention0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SemanticReverseAbstractInterpreter semanticReverseAbstractInterpreter0 = new SemanticReverseAbstractInterpreter((CodingConvention) googleCodingConvention0, jSTypeRegistry0);
      assertNotNull(semanticReverseAbstractInterpreter0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NO_RESOLVED_TYPE;
      ObjectType objectType0 = jSTypeRegistry0.getNativeObjectType(jSTypeNative0);
      assertNotNull(objectType0);
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(true, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = (NoType)semanticReverseAbstractInterpreter0.getRestrictedWithoutNull(objectType0);
      assertNotNull(noType0);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(true, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(false, objectType0.isParameterizedType());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isFunctionType());
      assertEquals(false, objectType0.isNominalConstructor());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNominalConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(true, noType0.isNullable());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isEnumType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isParameterizedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isNominalType());
  }
}
