/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:37:19 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.junit.runner.RunWith;

 
public class SourceFileEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "@Zoohah@dA$ru1z,uo,";
      String string1 = "\nActual: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_Preloaded0);
      
      int int0 = 1;
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals("\nActual: ", simpleRegion0.getSourceExcerpt());
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(simpleRegion0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "@Zoohah@dA$ru1z,uo,";
      String string1 = "\nActual: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      
      int int0 = sourceFile_Preloaded0.getNumLines();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(2, int0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Region region0 = sourceFile_Preloaded0.getRegion(int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(region0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "@Zoohah@dA$ru1z,uo,";
      String string1 = "\nActual: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      
      int int0 = 2827;
      Region region0 = sourceFile_Preloaded0.getRegion(int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(region0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "UTF-16BE";
      String string1 = "com.google.javascript.jscomp.SourceFile$OnDisk";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_OnDisk0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 1995;
      String string2 = sourceFile_OnDisk0.getLine(int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-16BE0com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "D/KAdw_^";
      int int0 = 1;
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertEquals("D/KAdw_^", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("D/KAdw_^", sourceFile_Preloaded0.toString());
      assertEquals("D/KAdw_^", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotNull(sourceFile_Preloaded0);
      
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("D/KAdw_^", string1);
      assertEquals("D/KAdw_^", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("D/KAdw_^", sourceFile_Preloaded0.toString());
      assertEquals("D/KAdw_^", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "n$(eQl}7*=h+K";
      File file0 = null;
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0, file0);
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertEquals("/tmp/n$(eQl}7*=h+K0n$(eQl}7*=h+K", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/n$(eQl}7*=h+K0n$(eQl}7*=h+K", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/n$(eQl}7*=h+K0n$(eQl}7*=h+K", sourceFile_OnDisk0.toString());
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = (-2724);
      String string1 = sourceFile_OnDisk0.getLine(int0);
      assertEquals("/tmp/n$(eQl}7*=h+K0n$(eQl}7*=h+K", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/n$(eQl}7*=h+K0n$(eQl}7*=h+K", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/n$(eQl}7*=h+K0n$(eQl}7*=h+K", sourceFile_OnDisk0.toString());
      assertNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "UTF16";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("UTF16/UTF16", sourceFile_OnDisk0.toString());
      assertEquals("UTF16/UTF16", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("UTF16/UTF16", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
      
      try {
        Reader reader0 = sourceFile_OnDisk0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = ",]]";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertNotNull(sourceFile_OnDisk0);
      
      String string1 = sourceFile_OnDisk0.getOriginalPath();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(",]]", string1);
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertNotNull(string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = ",]]";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0, string0);
      assertEquals(",]]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",]]", sourceFile_Preloaded0.toString());
      assertEquals(",]]", sourceFile_Preloaded0.getName());
      assertNotNull(sourceFile_Preloaded0);
      
      String string1 = sourceFile_Preloaded0.getOriginalPath();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(",]]", string1);
      assertEquals(",]]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",]]", sourceFile_Preloaded0.toString());
      assertEquals(",]]", sourceFile_Preloaded0.getName());
      assertNotNull(string1);
      
      SourceFile.Preloaded sourceFile_Preloaded1 = new SourceFile.Preloaded(string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(sourceFile_Preloaded1, sourceFile_Preloaded0);
      assertNotSame(sourceFile_Preloaded0, sourceFile_Preloaded1);
      assertEquals(false, sourceFile_Preloaded1.isExtern());
      assertEquals(",]]", sourceFile_Preloaded1.toString());
      assertEquals(",]]", sourceFile_Preloaded1.getOriginalPath());
      assertEquals(",]]", sourceFile_Preloaded1.getName());
      assertEquals(",]]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",]]", sourceFile_Preloaded0.toString());
      assertEquals(",]]", sourceFile_Preloaded0.getName());
      assertFalse(sourceFile_Preloaded1.equals((Object)sourceFile_Preloaded0));
      assertFalse(sourceFile_Preloaded0.equals((Object)sourceFile_Preloaded1));
      assertNotNull(sourceFile_Preloaded1);
      
      int int0 = sourceFile_Preloaded1.getNumLines();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(sourceFile_Preloaded1, sourceFile_Preloaded0);
      assertNotSame(sourceFile_Preloaded0, sourceFile_Preloaded1);
      assertEquals(1, int0);
      assertEquals(false, sourceFile_Preloaded1.isExtern());
      assertEquals(",]]", sourceFile_Preloaded1.toString());
      assertEquals(",]]", sourceFile_Preloaded1.getOriginalPath());
      assertEquals(",]]", sourceFile_Preloaded1.getName());
      assertEquals(",]]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",]]", sourceFile_Preloaded0.toString());
      assertEquals(",]]", sourceFile_Preloaded0.getName());
      assertFalse(sourceFile_Preloaded1.equals((Object)sourceFile_Preloaded0));
      assertFalse(sourceFile_Preloaded0.equals((Object)sourceFile_Preloaded1));
      
      int int1 = sourceFile_Preloaded1.getNumLines();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(sourceFile_Preloaded1, sourceFile_Preloaded0);
      assertNotSame(sourceFile_Preloaded0, sourceFile_Preloaded1);
      assertEquals(1, int1);
      assertEquals(false, sourceFile_Preloaded1.isExtern());
      assertEquals(",]]", sourceFile_Preloaded1.toString());
      assertEquals(",]]", sourceFile_Preloaded1.getOriginalPath());
      assertEquals(",]]", sourceFile_Preloaded1.getName());
      assertEquals(",]]", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals(",]]", sourceFile_Preloaded0.toString());
      assertEquals(",]]", sourceFile_Preloaded0.getName());
      assertTrue(int1 == int0);
      assertFalse(sourceFile_Preloaded1.equals((Object)sourceFile_Preloaded0));
      assertFalse(sourceFile_Preloaded0.equals((Object)sourceFile_Preloaded1));
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "d?*YP;9Pds/e9k";
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, string0, (InputStream) byteArrayInputStream0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("d?*YP;9Pds/e9k", sourceFile_Preloaded0.getName());
      assertEquals("d?*YP;9Pds/e9k", sourceFile_Preloaded0.toString());
      assertEquals("d?*YP;9Pds/e9k", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sourceFile_Preloaded0);
      
      int int0 = 5;
      // Undeclared exception!
      try {
        int int1 = sourceFile_Preloaded0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: 5
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "d";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertEquals("d", sourceFile_Preloaded0.getName());
      assertEquals("d", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("d", sourceFile_Preloaded0.toString());
      assertNotNull(sourceFile_Preloaded0);
      
      int int0 = (-2738);
      // Undeclared exception!
      try {
        int int1 = sourceFile_Preloaded0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -2738
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "D/KAdw_^";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = 1;
      int int1 = sourceFile_OnDisk0.getNumLines();
      assertEquals(1, int1);
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertTrue(int1 == int0);
      
      int int2 = sourceFile_OnDisk0.getLineOffset(int0);
      assertEquals(0, int2);
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "UTF-16BE";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_OnDisk0);
      
      Charset charset1 = sourceFile_OnDisk0.getCharset();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset1.name());
      assertEquals(true, charset1.canEncode());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.toString());
      assertEquals(true, charset1.isRegistered());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(charset1);
      
      // Undeclared exception!
      try {
        SourceFile sourceFile0 = SourceFile.fromFile(string0, charset1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "D/KAdw_^";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertNotNull(sourceFile_OnDisk0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertNotNull(pipedInputStream0);
      
      String string1 = sourceFile_OnDisk0.getCodeNoCache();
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertNull(string1);
      
      try {
        SourceFile sourceFile0 = SourceFile.fromInputStream(string1, (InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = ",]]";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = ",]]";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertNotNull(sourceFile_OnDisk0);
      
      String string1 = sourceFile_OnDisk0.getName();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(",]]", string1);
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertNotNull(string1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "m`P|;m;Ep[}-QsdIPP";
      StringReader stringReader0 = new StringReader(string0);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(stringReader0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromReader(string0, (Reader) stringReader0);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getName());
      assertNotNull(sourceFile_Preloaded0);
      
      String string1 = sourceFile_Preloaded0.toString();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("m`P|;m;Ep[}-QsdIPP", string1);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getName());
      assertNotNull(string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "m`P|;m;Ep[}-QsdIPP";
      StringReader stringReader0 = new StringReader(string0);
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(stringReader0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromReader(string0, (Reader) stringReader0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getName());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.toString());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(sourceFile_Preloaded0);
      
      sourceFile_Preloaded0.clearCachedSource();
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getName());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("m`P|;m;Ep[}-QsdIPP", sourceFile_Preloaded0.toString());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      String string1 = "UTF-16BE";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(mockFile0);
      
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_OnDisk0);
      
      boolean boolean0 = sourceFile_OnDisk0.isExtern();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/UTF-16BE0", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ",]]";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
      
      boolean boolean0 = false;
      sourceFile_OnDisk0.setIsExtern(boolean0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "D/KAdw_^";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = sourceFile_OnDisk0.getNumLines();
      assertEquals(1, int0);
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      
      StringReader stringReader0 = (StringReader)sourceFile_OnDisk0.getCodeReader();
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.toString());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/D/KAdw_^0D/KAdw_^", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(true, stringReader0.ready());
      assertEquals(true, stringReader0.markSupported());
      assertNotNull(stringReader0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ",]]";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertNotNull(sourceFile_OnDisk0);
      
      sourceFile_OnDisk0.clearCachedSource();
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = ",]]";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0, charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(",]]", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals(",]]", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(",]]", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
  }
}
