/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:41:37 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringBufferInputStream;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.junit.runner.RunWith;

 
public class SourceFileEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.SourceFile$OnDisk";
      String string1 = "\n";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 1;
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(simpleRegion0);
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.toString());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("com.google.javascript.jscomp.SourceFile$OnDisk", sourceFile_Preloaded0.getName());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "[a[ilDu7z";
      String string1 = "\nActuak: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 13;
      Region region0 = sourceFile_Preloaded0.getRegion(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(region0);
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "UTF-16BE";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      
      int int0 = (-1);
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("UTF-16BE", simpleRegion0.getSourceExcerpt());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "UTF-8";
      String string1 = "\nActual: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 0;
      String string2 = sourceFile_Preloaded0.getLine(int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-8", sourceFile_Preloaded0.getName());
      assertEquals("UTF-8", sourceFile_Preloaded0.toString());
      assertEquals("UTF-8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[a[ilDu7z";
      String string1 = "\nActuak: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 13;
      String string2 = sourceFile_Preloaded0.getLine(int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(string2);
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "!|lL%f4T|,8";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.toString());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      int int0 = 1;
      String string1 = sourceFile_Preloaded0.getLine(int0);
      assertNotNull(string1);
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.toString());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("!|lL%f4T|,8", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "UTF-8";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("UTF-8", sourceFile_OnDisk0.toString());
      assertEquals("UTF-8", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("UTF-8", sourceFile_OnDisk0.getOriginalPath());
      
      try {
        Reader reader0 = sourceFile_OnDisk0.getCodeReader();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "[a[ilDu7z";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      
      String string1 = sourceFile_Preloaded0.getOriginalPath();
      assertNotNull(string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("[a[ilDu7z", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "omHglogle.commonio.Files";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("omHglogle.commonio.Files", sourceFile_OnDisk0.getName());
      assertEquals("omHglogle.commonio.Files", sourceFile_OnDisk0.toString());
      assertEquals("omHglogle.commonio.Files", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      
      String string1 = sourceFile_OnDisk0.getOriginalPath();
      assertNotNull(string1);
      assertEquals("omHglogle.commonio.Files", sourceFile_OnDisk0.getName());
      assertEquals("omHglogle.commonio.Files", sourceFile_OnDisk0.toString());
      assertEquals("omHglogle.commonio.Files", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("omHglogle.commonio.Files", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "~7<h*bZ?D.Z";
      String string1 = "\nAcual: ";
      assertNotSame(string1, string0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("~7<h*bZ?D.Z", sourceFile_Preloaded0.getName());
      assertEquals("~7<h*bZ?D.Z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("~7<h*bZ?D.Z", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = 32;
      // Undeclared exception!
      try {
        int int1 = sourceFile_Preloaded0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 2
         // Actual: 32
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "Q/f";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("Q/f", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("Q/f", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Q/f", sourceFile_OnDisk0.toString());
      
      int int0 = sourceFile_OnDisk0.getNumLines();
      assertEquals("Q/f", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("Q/f", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Q/f", sourceFile_OnDisk0.toString());
      assertEquals(1, int0);
      
      int int1 = sourceFile_OnDisk0.getNumLines();
      assertTrue(int1 == int0);
      assertEquals("Q/f", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("Q/f", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Q/f", sourceFile_OnDisk0.toString());
      assertEquals(1, int1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "!|lL%f4T|,8";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getName());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getOriginalPath());
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        int int1 = sourceFile_Preloaded0.getLineOffset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected line number between 1 and 1
         // Actual: -1
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "Q/f";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("Q/f", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("Q/f", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Q/f", sourceFile_OnDisk0.getName());
      
      int int0 = sourceFile_OnDisk0.getNumLines();
      assertEquals("Q/f", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("Q/f", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Q/f", sourceFile_OnDisk0.getName());
      assertEquals(1, int0);
      
      int int1 = sourceFile_OnDisk0.getLineOffset(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Q/f", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("Q/f", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("Q/f", sourceFile_OnDisk0.getName());
      assertEquals(0, int1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        SourceFile sourceFile0 = SourceFile.fromCode(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "\nActual: ";
      String string1 = null;
      SourceFile.Preloaded sourceFile_Preloaded0 = null;
      try {
        sourceFile_Preloaded0 = new SourceFile.Preloaded(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a source must have a name
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "!|lL%f4T|,8";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(12, stringBufferInputStream0.available());
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, (InputStream) stringBufferInputStream0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(0, stringBufferInputStream0.available());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.toString());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getName());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "omHglogle.commonio.Files";
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) byteArray0[1], (int) byte0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(false, inputStreamReader0.markSupported());
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromReader(string0, (Reader) inputStreamReader0);
      assertNotNull(sourceFile_Preloaded0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("omHglogle.commonio.Files", sourceFile_Preloaded0.getName());
      assertEquals("omHglogle.commonio.Files", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("omHglogle.commonio.Files", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(false, inputStreamReader0.markSupported());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "UTF-16";
      byte[] byteArray0 = new byte[8];
      int int0 = (-3398);
      byte byte0 = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, (int) byteArray0[5]);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0, (int) byte0);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(false, pushbackInputStream0.markSupported());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, string0, (InputStream) pushbackInputStream0);
      assertNotNull(sourceFile_Preloaded0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(false, pushbackInputStream0.markSupported());
      assertEquals("UTF-16", sourceFile_Preloaded0.toString());
      assertEquals("UTF-16", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "UTF-16BE";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      
      String string1 = sourceFile_Preloaded0.getName();
      assertNotNull(string1);
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "UTF-16BE";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      
      String string1 = sourceFile_Preloaded0.toString();
      assertNotNull(string1);
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals("UTF-16BE", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "UTF-16BE";
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromCode(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      
      sourceFile_Preloaded0.clearCachedSource();
      assertEquals("UTF-16BE", sourceFile_Preloaded0.toString());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("UTF-16BE", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "!|lL%f4T|,8";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getName());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getOriginalPath());
      
      String string1 = sourceFile_Preloaded0.getCodeNoCache();
      assertNotNull(string1);
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getName());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.toString());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("!|lL%f4T|,8", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("!|lL%f4T|,8", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "[a[ilDu7z";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      
      boolean boolean0 = sourceFile_Preloaded0.isExtern();
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.getName());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("[a[ilDu7z", sourceFile_Preloaded0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "M`-C{\"0[Npp3F*3";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("M`-C{\"0[Npp3F*3", sourceFile_Preloaded0.toString());
      assertEquals("M`-C{\"0[Npp3F*3", sourceFile_Preloaded0.getOriginalPath());
      assertEquals(false, sourceFile_Preloaded0.isExtern());
      assertEquals("M`-C{\"0[Npp3F*3", sourceFile_Preloaded0.getName());
      
      boolean boolean0 = true;
      sourceFile_Preloaded0.setIsExtern(boolean0);
      assertEquals("M`-C{\"0[Npp3F*3", sourceFile_Preloaded0.toString());
      assertEquals("M`-C{\"0[Npp3F*3", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("M`-C{\"0[Npp3F*3", sourceFile_Preloaded0.getName());
      assertEquals(true, sourceFile_Preloaded0.isExtern());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "UTF-16";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      int int0 = (-3398);
      String string1 = sourceFile_OnDisk0.getLine(int0);
      assertNull(string1);
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      StringReader stringReader0 = (StringReader)sourceFile_OnDisk0.getCodeReader();
      assertNotNull(stringReader0);
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.toString());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("/tmp/UTF-160UTF-16", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, stringReader0.markSupported());
      assertEquals(true, stringReader0.ready());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "UTF-8";
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0, charset0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals("UTF-8", sourceFile_OnDisk0.getName());
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("UTF-8", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("UTF-8", sourceFile_OnDisk0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "UTF-8";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("UTF-8", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", sourceFile_OnDisk0.toString());
      assertEquals("UTF-8", sourceFile_OnDisk0.getOriginalPath());
      
      sourceFile_OnDisk0.clearCachedSource();
      assertEquals(false, sourceFile_OnDisk0.isExtern());
      assertEquals("UTF-8", sourceFile_OnDisk0.getName());
      assertEquals("UTF-8", sourceFile_OnDisk0.toString());
      assertEquals("UTF-8", sourceFile_OnDisk0.getOriginalPath());
  }
}
