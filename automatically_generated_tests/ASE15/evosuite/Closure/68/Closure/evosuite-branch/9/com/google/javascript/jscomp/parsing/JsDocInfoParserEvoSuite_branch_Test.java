/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:50:18 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlElemRef;
import com.google.javascript.jscomp.mozilla.rhino.ast.Yield;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "CCCy[}%)";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 35;
      XmlElemRef xmlElemRef0 = new XmlElemRef(int0);
      assertNotNull(xmlElemRef0);
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(35, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals("77", xmlElemRef0.toString());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(35, xmlElemRef0.getPosition());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(77, xmlElemRef0.getType());
      
      Comment comment0 = xmlElemRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(35, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals("77", xmlElemRef0.toString());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(35, xmlElemRef0.getPosition());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(77, xmlElemRef0.getType());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(35, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals("77", xmlElemRef0.toString());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(35, xmlElemRef0.getPosition());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(35, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals("77", xmlElemRef0.toString());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(35, xmlElemRef0.getPosition());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{G##v:@`i";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{r0,9n}dYUg+g7";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(81, node0.getType());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "{G##v:t`i";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "[!TIshZw,Bl//=";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "(*=lS1Z<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLineno());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "n\\.<CR0iL&D";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "!.\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLineno());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(2, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getCharno());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "y!Cr;kw";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, node0.getLineno());
      assertEquals(306, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "Az0w4?6Tz8\\ <";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(5, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "?#<CR0}i>GD";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(304, node0.getType());
      assertEquals(0, node0.getLineno());
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "n\\.<CR0i>&D";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "JhVp|a_|e ,7ZF";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(4, node0.getChildCount());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(5, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = (-98);
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(36, elementGet0.getType());
      assertEquals(1, elementGet0.getLength());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(36, elementGet0.getType());
      assertEquals(1, elementGet0.getLength());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      String string0 = "9@b\\d yv1CdEm@x ";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals("36", elementGet0.toString());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(36, elementGet0.getType());
      assertEquals(1, elementGet0.getLength());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "@o";
      int int0 = 15;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertNull(elementGet0.getJsDoc());
      assertEquals(0, elementGet0.depth());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals("36", elementGet0.toString());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getRb());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertNull(elementGet0.getJsDoc());
      assertEquals(0, elementGet0.depth());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals("36", elementGet0.toString());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getRb());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNull(elementGet0.getJsDoc());
      assertEquals(0, elementGet0.depth());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals("36", elementGet0.toString());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNull(elementGet0.getJsDoc());
      assertEquals(0, elementGet0.depth());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals("36", elementGet0.toString());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "GO3";
      int int0 = (-1323);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      BreakStatement breakStatement0 = new BreakStatement(int0);
      assertNotNull(breakStatement0);
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1323, breakStatement0.getPosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1323, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(120, breakStatement0.getType());
      assertEquals(false, breakStatement0.hasChildren());
      
      Comment comment0 = breakStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1323, breakStatement0.getPosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1323, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(120, breakStatement0.getType());
      assertEquals(false, breakStatement0.hasChildren());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-1, breakStatement0.getLineno());
      assertNull(breakStatement0.getJsDoc());
      assertEquals("120", breakStatement0.toString());
      assertEquals(-1323, breakStatement0.getPosition());
      assertEquals(0, breakStatement0.depth());
      assertEquals(-1323, breakStatement0.getAbsolutePosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals(120, breakStatement0.getType());
      assertEquals(false, breakStatement0.hasChildren());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "]@YY,o)4e{RA]r^T;l";
      int int0 = (-431);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TryStatement tryStatement0 = new TryStatement(int0, int0);
      assertNotNull(tryStatement0);
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-431, tryStatement0.getPosition());
      assertEquals(-431, tryStatement0.getLength());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-431, tryStatement0.getAbsolutePosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getLineno());
      
      Comment comment0 = tryStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-431, tryStatement0.getPosition());
      assertEquals(-431, tryStatement0.getLength());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-431, tryStatement0.getAbsolutePosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getLineno());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-431, tryStatement0.getPosition());
      assertEquals(-431, tryStatement0.getLength());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-431, tryStatement0.getAbsolutePosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(-1, tryStatement0.getFinallyPosition());
      assertEquals(-431, tryStatement0.getPosition());
      assertEquals(-431, tryStatement0.getLength());
      assertEquals(false, tryStatement0.hasChildren());
      assertEquals(81, tryStatement0.getType());
      assertEquals(-431, tryStatement0.getAbsolutePosition());
      assertNull(tryStatement0.getJsDoc());
      assertEquals(0, tryStatement0.depth());
      assertEquals("81", tryStatement0.toString());
      assertEquals(-1, tryStatement0.getLineno());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "hd'5z$\"bR%~?H";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      String string1 = jsDocTokenStream0.getString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string1, config0, toolErrorReporter0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertNotSame(string0, string1);
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals("STRING", jsDocToken0.toString());
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-5);
      String string0 = "{)";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getRb());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getRb());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getRb());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(1, elementGet0.getLength());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getRb());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       Comment comment0 = null;
//       Locale locale0 = Locale.KOREAN;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       
//       boolean boolean0 = true;
//       String string0 = "[vb%\n";
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "(eS";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-1603);
      XmlElemRef xmlElemRef0 = new XmlElemRef(int0);
      assertNotNull(xmlElemRef0);
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1603, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1603, xmlElemRef0.getPosition());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getAtPos());
      
      Comment comment0 = xmlElemRef0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1603, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1603, xmlElemRef0.getPosition());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getAtPos());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1603, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1603, xmlElemRef0.getPosition());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getAtPos());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1603, xmlElemRef0.getAbsolutePosition());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1603, xmlElemRef0.getPosition());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "*";
      int int0 = (-23);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLineno());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLineno());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, elementGet0.depth());
      assertEquals("36", elementGet0.toString());
      assertEquals(36, elementGet0.getType());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(false, elementGet0.hasChildren());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "*";
      int int0 = (-5);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(-1, elementGet0.getRb());
      assertEquals(0, elementGet0.depth());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getPosition());
      assertEquals(36, elementGet0.getType());
      assertNull(elementGet0.getJsDoc());
      assertEquals("36", elementGet0.toString());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "L;t|1";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-638);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.isParsed());
      assertEquals("L;t|1", comment0.getValue());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-638, comment0.getLength());
      assertEquals(-638, comment0.getPosition());
      assertEquals(-638, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.isParsed());
      assertEquals("L;t|1", comment0.getValue());
      assertEquals(false, comment0.hasChildren());
      assertEquals(-638, comment0.getLength());
      assertEquals(-638, comment0.getPosition());
      assertEquals(-638, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "hd'5z$\"bR%~?H";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      String string1 = jsDocTokenStream0.getString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string1, config0, toolErrorReporter0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(jSDocInfo0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "(";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "{)";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       String string0 = "1\n";
//       int int0 = (-1094);
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Yield yield0 = new Yield(int0, int0);
//       //  // Unstable assertion: assertNotNull(yield0);
//       //  // Unstable assertion: assertEquals(-1094, yield0.getLength());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getPosition());
//       //  // Unstable assertion: assertEquals(72, yield0.getType());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, yield0.depth());
//       //  // Unstable assertion: assertEquals(-1, yield0.getLineno());
//       //  // Unstable assertion: assertEquals("72", yield0.toString());
//       //  // Unstable assertion: assertNull(yield0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, yield0.hasChildren());
//       
//       Comment comment0 = yield0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(-1094, yield0.getLength());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getPosition());
//       //  // Unstable assertion: assertEquals(72, yield0.getType());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, yield0.depth());
//       //  // Unstable assertion: assertEquals(-1, yield0.getLineno());
//       //  // Unstable assertion: assertEquals("72", yield0.toString());
//       //  // Unstable assertion: assertNull(yield0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, yield0.hasChildren());
//       
//       Locale locale0 = Locale.JAPANESE;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       
//       boolean boolean0 = false;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       
//       ContextFactory contextFactory0 = ContextFactory.getGlobal();
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       
//       Context context0 = contextFactory0.enterContext();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getLength());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getPosition());
//       //  // Unstable assertion: assertEquals(72, yield0.getType());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, yield0.depth());
//       //  // Unstable assertion: assertEquals(-1, yield0.getLineno());
//       //  // Unstable assertion: assertEquals("72", yield0.toString());
//       //  // Unstable assertion: assertNull(yield0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, yield0.hasChildren());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ja", locale0.toString());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getLength());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getPosition());
//       //  // Unstable assertion: assertEquals(72, yield0.getType());
//       //  // Unstable assertion: assertEquals(-1094, yield0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, yield0.depth());
//       //  // Unstable assertion: assertEquals(-1, yield0.getLineno());
//       //  // Unstable assertion: assertEquals("72", yield0.toString());
//       //  // Unstable assertion: assertNull(yield0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, yield0.hasChildren());
//       //  // Unstable assertion: assertTrue(boolean1 == boolean0);
//       //  // Unstable assertion: assertTrue(boolean0 == boolean1);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       int int0 = (-2);
//       NumberLiteral numberLiteral0 = new NumberLiteral(int0, int0);
//       //  // Unstable assertion: assertNotNull(numberLiteral0);
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       
//       Comment comment0 = numberLiteral0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       
//       Locale locale0 = Locale.CHINA;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       String string0 = "}U,n${~DQ";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       boolean boolean0 = true;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
//       //  // Unstable assertion: assertNull(jSDocInfo0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
//       //  // Unstable assertion: assertNull(numberLiteral0.getJsDoc());
//       //  // Unstable assertion: assertEquals("40", numberLiteral0.toString());
//       //  // Unstable assertion: assertEquals(0, numberLiteral0.depth());
//       //  // Unstable assertion: assertNull(numberLiteral0.getValue());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getLength());
//       //  // Unstable assertion: assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getPosition());
//       //  // Unstable assertion: assertEquals(false, numberLiteral0.hasChildren());
//       //  // Unstable assertion: assertEquals(40, numberLiteral0.getType());
//       //  // Unstable assertion: assertEquals(-2, numberLiteral0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, numberLiteral0.getLineno());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = "+hz3t";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Comment comment0 = null;
//       Locale locale0 = Locale.KOREAN;
//       //  // Unstable assertion: assertNotNull(locale0);
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       //  // Unstable assertion: assertNotNull(set0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = null;
//       jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(-1, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals("ko", locale0.toString());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//   }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "@o";
      int int0 = (-3824);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ElementGet elementGet0 = new ElementGet();
      assertNotNull(elementGet0);
      assertEquals("36", elementGet0.toString());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      
      Comment comment0 = elementGet0.getJsDocNode();
      assertNull(comment0);
      assertEquals("36", elementGet0.toString());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("36", elementGet0.toString());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("36", elementGet0.toString());
      assertEquals(0, elementGet0.depth());
      assertEquals(-1, elementGet0.getRb());
      assertEquals(1, elementGet0.getLength());
      assertEquals(-1, elementGet0.getPosition());
      assertNull(elementGet0.getJsDoc());
      assertEquals(-1, elementGet0.getLb());
      assertEquals(36, elementGet0.getType());
      assertEquals(false, elementGet0.hasChildren());
      assertEquals(-1, elementGet0.getAbsolutePosition());
      assertEquals(-1, elementGet0.getLineno());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(context0.generateObserverCount);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "[vb%\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }
}
