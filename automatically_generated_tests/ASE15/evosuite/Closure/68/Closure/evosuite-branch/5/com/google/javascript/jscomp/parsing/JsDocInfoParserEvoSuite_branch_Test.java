/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:08:00 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlDotQuery;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{3q:tVCiJpMNQ{<dvP";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{3q:[VMi#pMNQCD<dvP";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "[GZ5uf,[x/k`=ws";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "(Lrg/mozilla/javascript/Context;Lorg/mozilla/javascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljav/lang/Object;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "X|ekPn|Zz";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertEquals(2, node0.getCharno());
      assertNotNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "1e.<XvG5$$G[uJ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "7\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Je!4nQm";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(306, node0.getType());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = " *?tBbe8UZQ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(304, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "!{\"";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  //@Test
  public void test14()  throws Throwable  {
      String string0 = "Ndl#+.<|#gn9Er.H,[Q";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "1N.<Xve5>[uJ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(2, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getSourcePosition());
      assertNotNull(node0);
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       assertTrue(boolean0);
//       
//       String string0 = "@*";
//       int int0 = 832;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       int int1 = 10;
//       jsDocTokenStream0.ungetChar(int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       EmptyExpression emptyExpression0 = new EmptyExpression();
//       assertEquals("128", emptyExpression0.toString());
//       assertEquals(128, emptyExpression0.getType());
//       assertNull(emptyExpression0.getJsDoc());
//       assertEquals(-1, emptyExpression0.getAbsolutePosition());
//       assertEquals(0, emptyExpression0.depth());
//       assertEquals(false, emptyExpression0.hasChildren());
//       assertEquals(1, emptyExpression0.getLength());
//       assertEquals(-1, emptyExpression0.getLineno());
//       assertEquals(-1, emptyExpression0.getPosition());
//       assertNotNull(emptyExpression0);
//       
//       Comment comment0 = emptyExpression0.getJsDocNode();
//       assertEquals("128", emptyExpression0.toString());
//       assertEquals(128, emptyExpression0.getType());
//       assertNull(emptyExpression0.getJsDoc());
//       assertEquals(-1, emptyExpression0.getAbsolutePosition());
//       assertEquals(0, emptyExpression0.depth());
//       assertEquals(false, emptyExpression0.hasChildren());
//       assertEquals(1, emptyExpression0.getLength());
//       assertEquals(-1, emptyExpression0.getLineno());
//       assertEquals(-1, emptyExpression0.getPosition());
//       assertNull(comment0);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertNotNull(linkedHashSet0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertNotNull(config0);
//       
//       Context context0 = Context.getCurrentContext();
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       jsDocTokenStream0.ungetChar(int0);
//       assertFalse(int0 == int1);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       assertEquals("128", emptyExpression0.toString());
//       assertEquals(128, emptyExpression0.getType());
//       assertNull(emptyExpression0.getJsDoc());
//       assertEquals(-1, emptyExpression0.getAbsolutePosition());
//       assertEquals(0, emptyExpression0.depth());
//       assertEquals(false, emptyExpression0.hasChildren());
//       assertEquals(1, emptyExpression0.getLength());
//       assertEquals(-1, emptyExpression0.getLineno());
//       assertEquals(-1, emptyExpression0.getPosition());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       assertFalse(int0 == int1);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertEquals("128", emptyExpression0.toString());
//       assertEquals(128, emptyExpression0.getType());
//       assertNull(emptyExpression0.getJsDoc());
//       assertEquals(-1, emptyExpression0.getAbsolutePosition());
//       assertEquals(0, emptyExpression0.depth());
//       assertEquals(false, emptyExpression0.hasChildren());
//       assertEquals(1, emptyExpression0.getLength());
//       assertEquals(-1, emptyExpression0.getLineno());
//       assertEquals(-1, emptyExpression0.getPosition());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.isSealed());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertFalse(context0.generateObserverCount);
//       assertFalse(int0 == int1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1);
//   }

  //@Test
  public void test17()  throws Throwable  {
      String string0 = "=lV6>h*:lJfO";
      int int0 = 4533;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0);
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNotNull(arrayLiteral0);
      
      Comment comment0 = arrayLiteral0.getJsDocNode();
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(comment0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebug());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "*)jNj$~0a,(";
      int int0 = 4533;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0);
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNotNull(arrayLiteral0);
      
      Comment comment0 = arrayLiteral0.getJsDocNode();
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(65, arrayLiteral0.getType());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(0, arrayLiteral0.getSize());
      assertEquals(4533, arrayLiteral0.getPosition());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      byte byte0 = (byte) (-21);
      String string0 = "}[2|hBmi.7b9G=-E";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, byte0, byte0);
      assertNotNull(jsDocTokenStream0);
      
      KeywordLiteral keywordLiteral0 = new KeywordLiteral((int) byte0, (int) byte0);
      assertEquals(0, keywordLiteral0.depth());
      assertEquals("-1", keywordLiteral0.toString());
      assertEquals(-1, keywordLiteral0.getLineno());
      assertNull(keywordLiteral0.getJsDoc());
      assertEquals(-21, keywordLiteral0.getLength());
      assertEquals(-1, keywordLiteral0.getType());
      assertEquals(false, keywordLiteral0.hasChildren());
      assertEquals(false, keywordLiteral0.isBooleanLiteral());
      assertEquals(-21, keywordLiteral0.getPosition());
      assertEquals(-21, keywordLiteral0.getAbsolutePosition());
      assertNotNull(keywordLiteral0);
      
      Comment comment0 = keywordLiteral0.getJsDocNode();
      assertEquals(0, keywordLiteral0.depth());
      assertEquals("-1", keywordLiteral0.toString());
      assertEquals(-1, keywordLiteral0.getLineno());
      assertNull(keywordLiteral0.getJsDoc());
      assertEquals(-21, keywordLiteral0.getLength());
      assertEquals(-1, keywordLiteral0.getType());
      assertEquals(false, keywordLiteral0.hasChildren());
      assertEquals(false, keywordLiteral0.isBooleanLiteral());
      assertEquals(-21, keywordLiteral0.getPosition());
      assertEquals(-21, keywordLiteral0.getAbsolutePosition());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(0, keywordLiteral0.depth());
      assertEquals("-1", keywordLiteral0.toString());
      assertEquals(-1, keywordLiteral0.getLineno());
      assertNull(keywordLiteral0.getJsDoc());
      assertEquals(-21, keywordLiteral0.getLength());
      assertEquals(-1, keywordLiteral0.getType());
      assertEquals(false, keywordLiteral0.hasChildren());
      assertEquals(false, keywordLiteral0.isBooleanLiteral());
      assertEquals(-21, keywordLiteral0.getPosition());
      assertEquals(-21, keywordLiteral0.getAbsolutePosition());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test
  public void test20()  throws Throwable  {
      String string0 = "(z*{9o*\\@43$B>";
      int int0 = (-1375);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0);
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1375, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(-1375, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertNotNull(arrayLiteral0);
      
      Comment comment0 = arrayLiteral0.getJsDocNode();
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1375, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(-1375, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertNull(comment0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1375, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(-1375, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, arrayLiteral0.hasChildren());
      assertEquals(-1375, arrayLiteral0.getAbsolutePosition());
      assertEquals(-1, arrayLiteral0.getLineno());
      assertEquals(0, arrayLiteral0.getSize());
      assertNull(arrayLiteral0.getJsDoc());
      assertEquals(-1375, arrayLiteral0.getPosition());
      assertEquals(0, arrayLiteral0.getSkipCount());
      assertEquals(0, arrayLiteral0.depth());
      assertEquals("65", arrayLiteral0.toString());
      assertEquals(1, arrayLiteral0.getLength());
      assertEquals(0, arrayLiteral0.getDestructuringLength());
      assertEquals(false, arrayLiteral0.isDestructuring());
      assertEquals(65, arrayLiteral0.getType());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = ":.s3\\G";
      int int0 = 4533;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0);
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertNotNull(arrayLiteral0);
      
      Comment comment0 = arrayLiteral0.getJsDocNode();
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(config0);
      
      Context context0 = new Context();
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       String string0 = "already";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       assertNotNull(jsDocTokenStream0);
//       
//       int int0 = 152;
//       Token.CommentType token_CommentType0 = Token.CommentType.LINE;
//       Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
//       assertEquals(false, comment0.isParsed());
//       assertEquals(Token.CommentType.LINE, comment0.getCommentType());
//       assertEquals(152, comment0.getAbsolutePosition());
//       assertEquals("161", comment0.toString());
//       assertEquals(0, comment0.depth());
//       assertEquals(152, comment0.getLength());
//       assertEquals("already", comment0.getValue());
//       assertNull(comment0.getJsDoc());
//       assertEquals(false, comment0.hasChildren());
//       assertEquals(152, comment0.getPosition());
//       assertEquals(161, comment0.getType());
//       assertEquals(-1, comment0.getLineno());
//       assertNotNull(comment0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       ContextFactory contextFactory0 = new ContextFactory();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enter();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isSealed());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isSealed());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       assertTrue(boolean0);
//       
//       int int1 = 44;
//       jsDocTokenStream0.ungetChar(int1);
//       assertFalse(int1 == int0);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertNotNull(linkedHashSet0);
//       
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, context0.generateObserverCount);
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isSealed());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(config0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, comment0.isParsed());
//       assertEquals(Token.CommentType.LINE, comment0.getCommentType());
//       assertEquals(152, comment0.getAbsolutePosition());
//       assertEquals("161", comment0.toString());
//       assertEquals(0, comment0.depth());
//       assertEquals(152, comment0.getLength());
//       assertEquals("already", comment0.getValue());
//       assertNull(comment0.getJsDoc());
//       assertEquals(false, comment0.hasChildren());
//       assertEquals(152, comment0.getPosition());
//       assertEquals(161, comment0.getType());
//       assertEquals(-1, comment0.getLineno());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isSealed());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       assertFalse(int0 == int1);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, comment0.isParsed());
//       assertEquals(Token.CommentType.LINE, comment0.getCommentType());
//       assertEquals(152, comment0.getAbsolutePosition());
//       assertEquals("161", comment0.toString());
//       assertEquals(0, comment0.depth());
//       assertEquals(152, comment0.getLength());
//       assertEquals("already", comment0.getValue());
//       assertNull(comment0.getJsDoc());
//       assertEquals(false, comment0.hasChildren());
//       assertEquals(152, comment0.getPosition());
//       assertEquals(161, comment0.getType());
//       assertEquals(-1, comment0.getLineno());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(false, context0.isSealed());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertFalse(context0.generateObserverCount);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(int0 == int1);
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1);
//   }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "!N";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      BreakStatement breakStatement0 = new BreakStatement();
      assertEquals(0, breakStatement0.depth());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertNotNull(breakStatement0);
      
      Comment comment0 = breakStatement0.getJsDocNode();
      assertEquals(0, breakStatement0.depth());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, breakStatement0.depth());
      assertEquals(false, breakStatement0.hasChildren());
      assertEquals(-1, breakStatement0.getAbsolutePosition());
      assertEquals(120, breakStatement0.getType());
      assertNull(breakStatement0.getJsDoc());
      assertEquals(-1, breakStatement0.getLineno());
      assertEquals(-1, breakStatement0.getPosition());
      assertEquals(1, breakStatement0.getLength());
      assertEquals("120", breakStatement0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "msg.jsdoc.externs";
      String string1 = "}\n";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      BreakStatement breakStatement0 = new BreakStatement();
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertNotNull(breakStatement0);
      
      Comment comment0 = breakStatement0.getJsDocNode();
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      //  // Unstable assertion: assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNull(breakStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(120, breakStatement0.getType());
      //  // Unstable assertion: assertEquals(1, breakStatement0.getLength());
      //  // Unstable assertion: assertEquals(0, breakStatement0.depth());
      //  // Unstable assertion: assertEquals("120", breakStatement0.toString());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1, breakStatement0.getLineno());
      //  // Unstable assertion: assertEquals(false, breakStatement0.hasChildren());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test
  public void test25()  throws Throwable  {
      String string0 = "*a6)jNj$~0a,(";
      int int0 = 4533;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      ArrayLiteral arrayLiteral0 = new ArrayLiteral(int0);
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertNotNull(arrayLiteral0);
      
      Comment comment0 = arrayLiteral0.getJsDocNode();
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertNull(comment0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean1, config_LanguageMode0, boolean1);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(config0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Context context0 = new Context();
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(false, context0.isSealed());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(65, arrayLiteral0.getType());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.depth());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.isDestructuring());
      //  // Unstable assertion: assertEquals(1, arrayLiteral0.getLength());
      //  // Unstable assertion: assertEquals(-1, arrayLiteral0.getLineno());
      //  // Unstable assertion: assertEquals(false, arrayLiteral0.hasChildren());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSize());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getDestructuringLength());
      //  // Unstable assertion: assertEquals(0, arrayLiteral0.getSkipCount());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getPosition());
      //  // Unstable assertion: assertEquals(4533, arrayLiteral0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals("65", arrayLiteral0.toString());
      //  // Unstable assertion: assertNull(arrayLiteral0.getJsDoc());
      //  // Unstable assertion: assertFalse(context0.generateObserverCount);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2);
  }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       boolean boolean0 = false;
//       String string0 = "]%4,`SnFpyDrsP(";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       ExpressionStatement expressionStatement0 = new ExpressionStatement();
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(1, expressionStatement0.getLength());
//       //  // Unstable assertion: assertEquals(0, expressionStatement0.depth());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(133, expressionStatement0.getType());
//       //  // Unstable assertion: assertEquals("133", expressionStatement0.toString());
//       //  // Unstable assertion: assertEquals(false, expressionStatement0.hasChildren());
//       //  // Unstable assertion: assertNull(expressionStatement0.getJsDoc());
//       //  // Unstable assertion: assertNotNull(expressionStatement0);
//       
//       Comment comment0 = expressionStatement0.getJsDocNode();
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(1, expressionStatement0.getLength());
//       //  // Unstable assertion: assertEquals(0, expressionStatement0.depth());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(133, expressionStatement0.getType());
//       //  // Unstable assertion: assertEquals("133", expressionStatement0.toString());
//       //  // Unstable assertion: assertEquals(false, expressionStatement0.hasChildren());
//       //  // Unstable assertion: assertNull(expressionStatement0.getJsDoc());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       Charset charset0 = Charset.defaultCharset();
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertNotNull(charset0);
//       
//       Set<String> set0 = charset0.aliases();
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(72, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(72, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(1, expressionStatement0.getLength());
//       //  // Unstable assertion: assertEquals(0, expressionStatement0.depth());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(133, expressionStatement0.getType());
//       //  // Unstable assertion: assertEquals("133", expressionStatement0.toString());
//       //  // Unstable assertion: assertEquals(false, expressionStatement0.hasChildren());
//       //  // Unstable assertion: assertNull(expressionStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(72, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       
//       JSDocInfo jSDocInfo0 = null;
//       jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
//       //  // Unstable assertion: assertEquals(false, set0.isEmpty());
//       //  // Unstable assertion: assertEquals(2, set0.size());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getPosition());
//       //  // Unstable assertion: assertEquals(1, expressionStatement0.getLength());
//       //  // Unstable assertion: assertEquals(0, expressionStatement0.depth());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getLineno());
//       //  // Unstable assertion: assertEquals(-1, expressionStatement0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(133, expressionStatement0.getType());
//       //  // Unstable assertion: assertEquals("133", expressionStatement0.toString());
//       //  // Unstable assertion: assertEquals(false, expressionStatement0.hasChildren());
//       //  // Unstable assertion: assertNull(expressionStatement0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
//       //  // Unstable assertion: assertEquals(true, charset0.canEncode());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
//       //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
//       //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(72, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       String string0 = "already";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       assertNotNull(jsDocTokenStream0);
//       
//       int int0 = 152;
//       Token.CommentType token_CommentType0 = Token.CommentType.LINE;
//       Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
//       assertNull(comment0.getJsDoc());
//       assertEquals(Token.CommentType.LINE, comment0.getCommentType());
//       assertEquals("161", comment0.toString());
//       assertEquals(false, comment0.hasChildren());
//       assertEquals(-1, comment0.getLineno());
//       assertEquals(0, comment0.depth());
//       assertEquals("already", comment0.getValue());
//       assertEquals(152, comment0.getAbsolutePosition());
//       assertEquals(152, comment0.getPosition());
//       assertEquals(152, comment0.getLength());
//       assertEquals(false, comment0.isParsed());
//       assertEquals(161, comment0.getType());
//       assertNotNull(comment0);
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       assertEquals("[]", treeSet0.toString());
//       assertNotNull(treeSet0);
//       
//       boolean boolean0 = false;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals("[]", treeSet0.toString());
//       assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enter();
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(context0);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(toolErrorReporter0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals("[]", treeSet0.toString());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNull(comment0.getJsDoc());
//       assertEquals(Token.CommentType.LINE, comment0.getCommentType());
//       assertEquals("161", comment0.toString());
//       assertEquals(false, comment0.hasChildren());
//       assertEquals(-1, comment0.getLineno());
//       assertEquals(0, comment0.depth());
//       assertEquals("already", comment0.getValue());
//       assertEquals(152, comment0.getAbsolutePosition());
//       assertEquals(152, comment0.getPosition());
//       assertEquals(152, comment0.getLength());
//       assertEquals(false, comment0.isParsed());
//       assertEquals(161, comment0.getType());
//       assertFalse(context0.generateObserverCount);
//       assertNotNull(jsDocInfoParser0);
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, toolErrorReporter0.hasReportedError());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(false, context0.isSealed());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(72, context0.getInstructionObserverThreshold());
//       assertEquals(false, context0.isGeneratingDebug());
//       assertEquals("[]", treeSet0.toString());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNull(comment0.getJsDoc());
//       assertEquals(Token.CommentType.LINE, comment0.getCommentType());
//       assertEquals("161", comment0.toString());
//       assertEquals(false, comment0.hasChildren());
//       assertEquals(-1, comment0.getLineno());
//       assertEquals(0, comment0.depth());
//       assertEquals("already", comment0.getValue());
//       assertEquals(152, comment0.getAbsolutePosition());
//       assertEquals(152, comment0.getPosition());
//       assertEquals(152, comment0.getLength());
//       assertEquals(false, comment0.isParsed());
//       assertEquals(161, comment0.getType());
//       assertFalse(context0.generateObserverCount);
//       assertNull(jSDocInfo0);
//   }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "Script ar{utBnt was not a ncript or was not creaMed by interpreted mode ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      //  // Unstable assertion: assertEquals(0, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(7, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(7, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      int int0 = (-812);
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0);
      //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
      //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getPosition());
      //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
      //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
      //  // Unstable assertion: assertNotNull(xmlDotQuery0);
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
      //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getPosition());
      //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
      //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
      //  // Unstable assertion: assertNull(comment0);
      
      Locale locale0 = Locale.JAPAN;
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("JPN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja_JP", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("JP", locale0.getCountry());
      //  // Unstable assertion: assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("JPN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja_JP", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("JP", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("JPN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja_JP", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("JP", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      //  // Unstable assertion: assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
      //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getPosition());
      //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
      //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("JPN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja_JP", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("JP", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      //  // Unstable assertion: assertEquals(0, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(7, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(7, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertNotNull(node_FileLevelJsDocBuilder0);
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      //  // Unstable assertion: assertEquals(1, xmlDotQuery0.getLength());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getLineno());
      //  // Unstable assertion: assertEquals("146", xmlDotQuery0.toString());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      //  // Unstable assertion: assertEquals(false, xmlDotQuery0.hasChildren());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(0, xmlDotQuery0.depth());
      //  // Unstable assertion: assertEquals(-812, xmlDotQuery0.getPosition());
      //  // Unstable assertion: assertNull(xmlDotQuery0.getJsDoc());
      //  // Unstable assertion: assertEquals(146, xmlDotQuery0.getType());
      //  // Unstable assertion: assertEquals(-1, xmlDotQuery0.getRp());
      //  // Unstable assertion: assertEquals(0, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(7, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(7, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("JPN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja_JP", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("JP", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "s%;J6\\Hf@5Ob]uysbG";
      int int0 = (-54);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement(int0, int0);
      assertEquals(0, expressionStatement0.depth());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-54, expressionStatement0.getAbsolutePosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-54, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-54, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertNotNull(expressionStatement0);
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertEquals(0, expressionStatement0.depth());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-54, expressionStatement0.getAbsolutePosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-54, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-54, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertNull(comment0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals(0, expressionStatement0.depth());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-54, expressionStatement0.getAbsolutePosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-54, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-54, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(0, expressionStatement0.depth());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(-54, expressionStatement0.getAbsolutePosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(-54, expressionStatement0.getPosition());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-54, expressionStatement0.getLength());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "(z*{9o*\\@43$B>";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = " ?tBbe8UZQ";
      int int0 = (-1812);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      SwitchStatement switchStatement0 = new SwitchStatement(int0, int0);
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1812, switchStatement0.getLength());
      assertEquals(-1812, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(0, switchStatement0.depth());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1812, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getRp());
      assertNotNull(switchStatement0);
      
      Comment comment0 = switchStatement0.getJsDocNode();
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1812, switchStatement0.getLength());
      assertEquals(-1812, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(0, switchStatement0.depth());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1812, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getRp());
      assertNull(comment0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertFalse(context0.generateObserverCount);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertFalse(context0.generateObserverCount);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1812, switchStatement0.getLength());
      assertEquals(-1812, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(0, switchStatement0.depth());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1812, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getRp());
      assertFalse(context0.generateObserverCount);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNull(switchStatement0.getJsDoc());
      assertEquals(114, switchStatement0.getType());
      assertEquals(-1812, switchStatement0.getLength());
      assertEquals(-1812, switchStatement0.getPosition());
      assertEquals(-1, switchStatement0.getLp());
      assertEquals(false, switchStatement0.hasChildren());
      assertEquals("114", switchStatement0.toString());
      assertEquals(0, switchStatement0.depth());
      assertEquals(-1, switchStatement0.getLineno());
      assertEquals(-1812, switchStatement0.getAbsolutePosition());
      assertEquals(-1, switchStatement0.getRp());
      assertFalse(context0.generateObserverCount);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }
}
