/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:25:35 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayComprehension;
import com.google.javascript.jscomp.mozilla.rhino.ast.Assignment;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlDotQuery;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{uv-,T:[74;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{ty-8W:74;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{Ea6W}7eb";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(81, node0.getType());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "?[6as^S-mo]ZY<h";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(10, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(10, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "(";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "[Ktfu/\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = ".\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLineno());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getCharno());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(40, node0.getType());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "{*^?W:7_;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "[-,W}7[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "*";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(302, node0.getType());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getCharno());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "v#d!X&8'\\IB~Bun]os ";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(3, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "o?ivc_";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(304, node0.getType());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "(!org|mozilla/jRvacript/Scriptable;Lorg/moEill/jaDascrip//Conte7t;IaV";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "?|F,H$jT";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(3, node0.getChildCount());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "* u+/C; nU:I1a't";
      int int0 = (-27);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ")";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment();
      assertNotNull(assignment0);
      assertEquals("-1", assignment0.toString());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.depth());
      assertEquals(-1, assignment0.getAbsolutePosition());
      assertEquals(1, assignment0.getLength());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      
      Comment comment0 = assignment0.getJsDocNode();
      assertNull(comment0);
      assertEquals("-1", assignment0.toString());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.depth());
      assertEquals(-1, assignment0.getAbsolutePosition());
      assertEquals(1, assignment0.getLength());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("-1", assignment0.toString());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getType());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(0, assignment0.depth());
      assertEquals(-1, assignment0.getAbsolutePosition());
      assertEquals(1, assignment0.getLength());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-1, assignment0.getPosition());
      assertNull(assignment0.getJsDoc());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "]";
      int int0 = (-3532);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration(int0, int0);
      assertNotNull(variableDeclaration0);
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-3532, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-3532, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-3532, variableDeclaration0.getAbsolutePosition());
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertNull(comment0);
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-3532, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-3532, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-3532, variableDeclaration0.getAbsolutePosition());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-3532, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-3532, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-3532, variableDeclaration0.getAbsolutePosition());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(-3532, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-3532, variableDeclaration0.getLength());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-3532, variableDeclaration0.getAbsolutePosition());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "* {u+/C; nU:I1't";
      int int0 = 6;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "[JavaConstructor ";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = (-498);
      ForLoop forLoop0 = new ForLoop(int0, int0);
      assertNotNull(forLoop0);
      assertNull(forLoop0.getJsDoc());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getRp());
      assertEquals(119, forLoop0.getType());
      assertEquals(-498, forLoop0.getPosition());
      assertEquals(-498, forLoop0.getLength());
      assertEquals(-498, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(0, forLoop0.depth());
      
      Comment comment0 = forLoop0.getJsDocNode();
      assertNull(comment0);
      assertNull(forLoop0.getJsDoc());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getRp());
      assertEquals(119, forLoop0.getType());
      assertEquals(-498, forLoop0.getPosition());
      assertEquals(-498, forLoop0.getLength());
      assertEquals(-498, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(0, forLoop0.depth());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertNull(forLoop0.getJsDoc());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getRp());
      assertEquals(119, forLoop0.getType());
      assertEquals(-498, forLoop0.getPosition());
      assertEquals(-498, forLoop0.getLength());
      assertEquals(-498, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(0, forLoop0.depth());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("[]", treeSet0.toString());
      assertNull(forLoop0.getJsDoc());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getRp());
      assertEquals(119, forLoop0.getType());
      assertEquals(-498, forLoop0.getPosition());
      assertEquals(-498, forLoop0.getLength());
      assertEquals(-498, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(0, forLoop0.depth());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = ",K[B~fi<$N[(u$.j\\";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 0;
      XmlDotQuery xmlDotQuery0 = new XmlDotQuery(int0, int0);
      assertNotNull(xmlDotQuery0);
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      Comment comment0 = xmlDotQuery0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getRp());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, xmlDotQuery0.hasChildren());
      assertEquals("146", xmlDotQuery0.toString());
      assertEquals(-1, xmlDotQuery0.getOperatorPosition());
      assertEquals(0, xmlDotQuery0.getAbsolutePosition());
      assertEquals(0, xmlDotQuery0.getPosition());
      assertNull(xmlDotQuery0.getJsDoc());
      assertEquals(0, xmlDotQuery0.getLength());
      assertEquals(146, xmlDotQuery0.getType());
      assertEquals(-1, xmlDotQuery0.getLineno());
      assertEquals(0, xmlDotQuery0.depth());
      assertEquals(-1, xmlDotQuery0.getRp());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "!^FT;EKx\"}1";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ArrayComprehension arrayComprehension0 = new ArrayComprehension(int0);
      assertNotNull(arrayComprehension0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(0, arrayComprehension0.getPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(0, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      
      Comment comment0 = arrayComprehension0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(0, arrayComprehension0.getPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(0, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, arrayComprehension0.depth());
      assertEquals(-1, arrayComprehension0.getIfPosition());
      assertEquals(0, arrayComprehension0.getPosition());
      assertEquals(false, arrayComprehension0.hasChildren());
      assertNull(arrayComprehension0.getJsDoc());
      assertEquals(0, arrayComprehension0.getAbsolutePosition());
      assertEquals(-1, arrayComprehension0.getFilterRp());
      assertEquals("157", arrayComprehension0.toString());
      assertEquals(-1, arrayComprehension0.getLineno());
      assertEquals(1, arrayComprehension0.getLength());
      assertEquals(157, arrayComprehension0.getType());
      assertEquals(-1, arrayComprehension0.getFilterLp());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "* +/C; nU:I1t";
      int int0 = (-1635);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "sW4@r*s<(";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      int int0 = 4;
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(int0, int0);
      assertNotNull(conditionalExpression0);
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(4, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(4, conditionalExpression0.getAbsolutePosition());
      assertEquals(4, conditionalExpression0.getPosition());
      
      Comment comment0 = conditionalExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(4, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(4, conditionalExpression0.getAbsolutePosition());
      assertEquals(4, conditionalExpression0.getPosition());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(4, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(4, conditionalExpression0.getAbsolutePosition());
      assertEquals(4, conditionalExpression0.getPosition());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(4, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(4, conditionalExpression0.getAbsolutePosition());
      assertEquals(4, conditionalExpression0.getPosition());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "4XeZM";
      int int0 = 2542;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.isParsed());
      assertEquals(false, comment0.hasChildren());
      assertEquals(2542, comment0.getLength());
      assertEquals(2542, comment0.getAbsolutePosition());
      assertEquals(2542, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals("4XeZM", comment0.getValue());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.isParsed());
      assertEquals(false, comment0.hasChildren());
      assertEquals(2542, comment0.getLength());
      assertEquals(2542, comment0.getAbsolutePosition());
      assertEquals(2542, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(-1, comment0.getLineno());
      assertEquals("4XeZM", comment0.getValue());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "(~C.b<?_'\"H4up:ib";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      ConditionalExpression conditionalExpression0 = new ConditionalExpression();
      assertNotNull(conditionalExpression0);
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals(-1, conditionalExpression0.getAbsolutePosition());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-1, conditionalExpression0.getPosition());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      
      Comment comment0 = conditionalExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals(-1, conditionalExpression0.getAbsolutePosition());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-1, conditionalExpression0.getPosition());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals("102", conditionalExpression0.toString());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertEquals(-1, conditionalExpression0.getAbsolutePosition());
      assertEquals(1, conditionalExpression0.getLength());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-1, conditionalExpression0.getPosition());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals(102, conditionalExpression0.getType());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "u7 XP";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 98;
      WhileLoop whileLoop0 = new WhileLoop(int0, int0);
      assertNotNull(whileLoop0);
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(98, whileLoop0.getLength());
      assertEquals(98, whileLoop0.getAbsolutePosition());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-1, whileLoop0.getLineno());
      assertNull(whileLoop0.getJsDoc());
      assertEquals("117", whileLoop0.toString());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(98, whileLoop0.getPosition());
      assertEquals(117, whileLoop0.getType());
      
      Comment comment0 = whileLoop0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(98, whileLoop0.getLength());
      assertEquals(98, whileLoop0.getAbsolutePosition());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-1, whileLoop0.getLineno());
      assertNull(whileLoop0.getJsDoc());
      assertEquals("117", whileLoop0.toString());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(98, whileLoop0.getPosition());
      assertEquals(117, whileLoop0.getType());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(98, whileLoop0.getLength());
      assertEquals(98, whileLoop0.getAbsolutePosition());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-1, whileLoop0.getLineno());
      assertNull(whileLoop0.getJsDoc());
      assertEquals("117", whileLoop0.toString());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(98, whileLoop0.getPosition());
      assertEquals(117, whileLoop0.getType());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(98, whileLoop0.getLength());
      assertEquals(98, whileLoop0.getAbsolutePosition());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-1, whileLoop0.getLineno());
      assertNull(whileLoop0.getJsDoc());
      assertEquals("117", whileLoop0.toString());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(98, whileLoop0.getPosition());
      assertEquals(117, whileLoop0.getType());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(98, whileLoop0.getLength());
      assertEquals(98, whileLoop0.getAbsolutePosition());
      assertEquals(0, whileLoop0.depth());
      assertEquals(-1, whileLoop0.getLineno());
      assertNull(whileLoop0.getJsDoc());
      assertEquals("117", whileLoop0.toString());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(98, whileLoop0.getPosition());
      assertEquals(117, whileLoop0.getType());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "(Lorg|mozilla/javascript/Scriptable;Lorg/mozilla/jaDscript/Context;I)V";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       int int0 = (-1657);
//       String string0 = "";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       //  // Unstable assertion: assertTrue(boolean0);
//       
//       Comment comment0 = null;
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
//       //  // Unstable assertion: assertNull(jSDocInfo0);
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       int int0 = (-1657);
//       String string0 = "";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       //  // Unstable assertion: assertTrue(boolean0);
//       
//       Comment comment0 = null;
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }

  @Test
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "sQW4@Xs|<(";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      assertEquals(4, jsDocToken0.ordinal());
      
      int int0 = (-2937);
      ConditionalExpression conditionalExpression0 = new ConditionalExpression(int0, int0);
      assertNotNull(conditionalExpression0);
      assertEquals(-2937, conditionalExpression0.getPosition());
      assertEquals(-2937, conditionalExpression0.getAbsolutePosition());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-2937, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals("102", conditionalExpression0.toString());
      
      Comment comment0 = conditionalExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-2937, conditionalExpression0.getPosition());
      assertEquals(-2937, conditionalExpression0.getAbsolutePosition());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-2937, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals("102", conditionalExpression0.toString());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(-2937, conditionalExpression0.getPosition());
      assertEquals(-2937, conditionalExpression0.getAbsolutePosition());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-2937, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals("102", conditionalExpression0.toString());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(-2937, conditionalExpression0.getPosition());
      assertEquals(-2937, conditionalExpression0.getAbsolutePosition());
      assertEquals(102, conditionalExpression0.getType());
      assertEquals(0, conditionalExpression0.depth());
      assertEquals(false, conditionalExpression0.hasChildren());
      assertEquals(-2937, conditionalExpression0.getLength());
      assertEquals(-1, conditionalExpression0.getQuestionMarkPosition());
      assertEquals(-1, conditionalExpression0.getColonPosition());
      assertNull(conditionalExpression0.getJsDoc());
      assertEquals(-1, conditionalExpression0.getLineno());
      assertEquals("102", conditionalExpression0.toString());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
  }
}
