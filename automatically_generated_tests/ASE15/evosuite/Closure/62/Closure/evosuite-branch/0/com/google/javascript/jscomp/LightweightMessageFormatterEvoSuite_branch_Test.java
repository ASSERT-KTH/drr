/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:20:42 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JsMessageVisitor;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.ProcessClosurePrimitives;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.VarCheck;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LightweightMessageFormatterEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 39;
      String string0 = "\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(39, simpleRegion0.getBeginningLineNumber());
      assertEquals("\n", simpleRegion0.getSourceExcerpt());
      assertEquals(39, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("  39| ", string1);
      assertEquals(39, simpleRegion0.getBeginningLineNumber());
      assertEquals("\n", simpleRegion0.getSourceExcerpt());
      assertEquals(39, simpleRegion0.getEndingLineNumber());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 0;
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(0, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(0, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNull(string1);
      assertEquals(0, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(0, simpleRegion0.getEndingLineNumber());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "6y|";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.toString());
      assertEquals(1, sourceExcerptProvider_SourceExcerpt0.ordinal());
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.name());
      
      int int0 = (-2682);
      String string1 = sourceExcerptProvider_SourceExcerpt0.get((SourceExcerptProvider) compiler0, string0, int0, (SourceExcerptProvider.ExcerptFormatter) lightweightMessageFormatter_LineNumberingFormatter0);
      assertNull(string1);
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.toString());
      assertEquals(1, sourceExcerptProvider_SourceExcerpt0.ordinal());
      assertEquals("REGION", sourceExcerptProvider_SourceExcerpt0.name());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "WHAj9No";
      int int0 = 633;
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(633, simpleRegion0.getEndingLineNumber());
      assertEquals(633, simpleRegion0.getBeginningLineNumber());
      assertEquals("WHAj9No", simpleRegion0.getSourceExcerpt());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("  633| WHAj9No", string1);
      assertEquals(633, simpleRegion0.getEndingLineNumber());
      assertEquals(633, simpleRegion0.getBeginningLineNumber());
      assertEquals("WHAj9No", simpleRegion0.getSourceExcerpt());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 1617;
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = null;
      CheckLevel checkLevel0 = CheckLevel.OFF;
      DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[5];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(1617, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string1);
      assertEquals("WARNING - message not initialized using goog.getMsg\n", string1);
      assertEquals(1617, jSError0.getCharno());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
      
      JSError jSError0 = null;
      // Undeclared exception!
      try {
        String string0 = lightweightMessageFormatter0.formatError(jSError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "r{#";
      int int0 = (-1171);
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      DiagnosticType diagnosticType0 = VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[2];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1171, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("r{#: ERROR - accessing name null in externs has no effect\n", string1);
      assertEquals(-1171, jSError0.getCharno());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "WHAj9No";
      int int0 = 633;
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      DiagnosticType diagnosticType0 = ProcessClosurePrimitives.LATE_PROVIDE_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[9];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(633, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("WHAj9No:633: WARNING - required \"null\" namespace not provided yet\n", string1);
      assertEquals(633, jSError0.getCharno());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "6y|";
      int int0 = (-2682);
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatLine(string0, int0);
      assertNotNull(string1);
      assertEquals("6y|", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }
}
