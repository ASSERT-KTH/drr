/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:34:10 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CrossModuleMethodMotion;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.ExternExportsPass;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class LightweightMessageFormatterEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      byte byte0 = (byte) (-2);
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "\n";
      SimpleRegion simpleRegion0 = new SimpleRegion((int) byte0, (int) byte0, string0);
      assertEquals(-2, simpleRegion0.getBeginningLineNumber());
      assertEquals(-2, simpleRegion0.getEndingLineNumber());
      assertEquals("\n", simpleRegion0.getSourceExcerpt());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals(-2, simpleRegion0.getBeginningLineNumber());
      assertEquals(-2, simpleRegion0.getEndingLineNumber());
      assertEquals("\n", simpleRegion0.getSourceExcerpt());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("  -2| ", string1);
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 5397;
      String string0 = "s*~D$|=)`:PF{O";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals(5397, simpleRegion0.getBeginningLineNumber());
      assertEquals("s*~D$|=)`:PF{O", simpleRegion0.getSourceExcerpt());
      assertEquals(5397, simpleRegion0.getEndingLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals(5397, simpleRegion0.getBeginningLineNumber());
      assertEquals("s*~D$|=)`:PF{O", simpleRegion0.getSourceExcerpt());
      assertEquals(5397, simpleRegion0.getEndingLineNumber());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("  5397| s*~D$|=)`:PF{O", string1);
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 1457;
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertNotNull(sourceFile_OnDisk0);
      
      Region region0 = sourceFile_OnDisk0.getRegion(int0);
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertNull(region0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion(region0);
      assertEquals("/", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/", sourceFile_OnDisk0.getName());
      assertEquals("/", sourceFile_OnDisk0.toString());
      assertNull(string1);
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 1457;
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertEquals(1457, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(1457, simpleRegion0.getEndingLineNumber());
      assertNotNull(simpleRegion0);
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertEquals(1457, simpleRegion0.getBeginningLineNumber());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(1457, simpleRegion0.getEndingLineNumber());
      assertNull(string1);
  }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 1457;
      String string0 = "";
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      DiagnosticType diagnosticType0 = ExternExportsPass.EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[12];
      JSError jSError0 = JSError.make(string0, int0, int0, checkLevel0, diagnosticType0, stringArray0);
      assertEquals(1457, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals(1457, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(":1457: ERROR - Unable to determine type of parameter null for exported function null\n", string1);
  }

  @Test
  public void test5()  throws Throwable  {
      int int0 = 1457;
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = ExternExportsPass.EXPORTED_FUNCTION_UNKNOWN_PARAMETER_TYPE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[12];
      JSError jSError0 = JSError.make(stringArray0[3], int0, int0, diagnosticType0, stringArray0);
      assertEquals(1457, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string0 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertEquals(1457, jSError0.getCharno());
      assertNotNull(string0);
      assertEquals("WARNING - Unable to determine type of parameter null for exported function null\n", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0);
      assertNotNull(lightweightMessageFormatter0);
      
      String string0 = "!E. v%FL8{";
      int int0 = (-1577);
      DiagnosticType diagnosticType0 = CrossModuleMethodMotion.NULL_COMMON_MODULE_ERROR;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[17];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertEquals(-1577, jSError0.getCharno());
      assertNotNull(jSError0);
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertEquals(-1577, jSError0.getCharno());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("!E. v%FL8{: ERROR - null deepest common module\n", string1);
  }
}
