/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:11:26 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.deps.SimpleDependencyInfo;
import com.google.javascript.jscomp.deps.SortedDependencies;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class SortedDependenciesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Stack<SimpleDependencyInfo> stack0 = new Stack<SimpleDependencyInfo>();
      assertNotNull(stack0);
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      String string0 = "com.googlq.common.collect.HashMultimap";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) arrayList0, (List<String>) arrayList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = stack0.add(simpleDependencyInfo0);
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) stack0);
      assertNotNull(sortedDependencies0);
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      
      boolean boolean1 = arrayList0.add(string0);
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("[com.googlq.common.collect.HashMultimap]", arrayList0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) stack0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[com.googlq.common.collect.HashMultimap], requires=[com.googlq.common.collect.HashMultimap])]", stack0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Stack<SimpleDependencyInfo> stack0 = new Stack<SimpleDependencyInfo>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      
      String string0 = "com.googlq.common.collect.HashMultimap";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) arrayList0, (List<String>) arrayList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      
      boolean boolean0 = stack0.add(simpleDependencyInfo0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add(simpleDependencyInfo0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[]), DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) stack0);
      assertNotNull(sortedDependencies0);
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[]), DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(false, stack0.empty());
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) stack0);
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[]), DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertEquals(false, stack0.empty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Stack<SimpleDependencyInfo> stack0 = new Stack<SimpleDependencyInfo>();
      assertNotNull(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      
      String string0 = "com.googlq.common.collect.HashMultimap";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) arrayList0, (List<String>) arrayList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      boolean boolean0 = stack0.add(simpleDependencyInfo0);
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals("[]", arrayList0.toString());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) stack0);
      assertNotNull(sortedDependencies0);
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      
      LinkedList<SimpleDependencyInfo> linkedList0 = new LinkedList<SimpleDependencyInfo>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) linkedList0);
      assertNotNull(list0);
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Stack<SimpleDependencyInfo> stack0 = new Stack<SimpleDependencyInfo>();
      assertNotNull(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      
      String string0 = "#}Hjf+*mX>0$4[Fd";
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getName());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = stack0.add(simpleDependencyInfo0);
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getName());
      assertEquals("[DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='#}Hjf+*mX>0$4[Fd', provides=[], requires=[])]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertTrue(boolean0);
      
      String string1 = "|x]xm\",I?m";
      assertNotSame(string1, string0);
      
      Stack<String> stack1 = new Stack<String>();
      assertNotNull(stack1);
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(true, stack1.isEmpty());
      assertEquals(true, stack1.empty());
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string1, (List<String>) stack1, (List<String>) stack1);
      assertNotNull(simpleDependencyInfo1);
      assertEquals("|x]xm\",I?m", simpleDependencyInfo1.getName());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(true, stack1.isEmpty());
      assertEquals(true, stack1.empty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(string1, string0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) stack0);
      assertNotNull(sortedDependencies0);
      assertEquals("[DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='#}Hjf+*mX>0$4[Fd', provides=[], requires=[])]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      
      boolean boolean1 = stack0.add(simpleDependencyInfo1);
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals("[DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='#}Hjf+*mX>0$4[Fd', provides=[], requires=[]), DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='|x]xm\",I?m', provides=[], requires=[])]", stack0.toString());
      assertEquals("|x]xm\",I?m", simpleDependencyInfo1.getName());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(true, stack1.isEmpty());
      assertEquals(true, stack1.empty());
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedDependenciesOf((List<SimpleDependencyInfo>) stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Stack<SimpleDependencyInfo> stack0 = new Stack<SimpleDependencyInfo>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      String string0 = "#}Hjf+*mX>0$4[Fd";
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) vector0, (List<String>) vector0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getName());
      
      boolean boolean0 = stack0.add(simpleDependencyInfo0);
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='#}Hjf+*mX>0$4[Fd', provides=[], requires=[])]", stack0.toString());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("#}Hjf+*mX>0$4[Fd", simpleDependencyInfo0.getName());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) stack0);
      assertNotNull(sortedDependencies0);
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='#}Hjf+*mX>0$4[Fd', provides=[], requires=[])]", stack0.toString());
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getSortedList();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='#}Hjf+*mX>0$4[Fd', path='#}Hjf+*mX>0$4[Fd', provides=[], requires=[])]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Stack<SimpleDependencyInfo> stack0 = new Stack<SimpleDependencyInfo>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String string0 = "com.googlq.common.collect.HashMultimap";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) arrayList0, (List<String>) arrayList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      
      boolean boolean0 = stack0.add(simpleDependencyInfo0);
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getName());
      assertEquals("com.googlq.common.collect.HashMultimap", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertTrue(boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) stack0);
      assertNotNull(sortedDependencies0);
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      List<SimpleDependencyInfo> list0 = sortedDependencies0.getInputsWithoutProvides();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("[DependencyInfo(relativePath='com.googlq.common.collect.HashMultimap', path='com.googlq.common.collect.HashMultimap', provides=[], requires=[])]", stack0.toString());
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(false, stack0.isEmpty());
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<SimpleDependencyInfo> arrayList0 = new ArrayList<SimpleDependencyInfo>();
      assertNotNull(arrayList0);
      assertEquals("[]", arrayList0.toString());
      assertEquals(0, arrayList0.size());
      assertEquals(true, arrayList0.isEmpty());
      
      String string0 = "bf";
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertEquals(true, arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals("[]", arrayList1.toString());
      
      boolean boolean0 = arrayList1.add(string0);
      assertEquals("[bf]", arrayList1.toString());
      assertEquals(false, arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) arrayList1, (List<String>) arrayList1);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("bf", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("bf", simpleDependencyInfo0.getName());
      assertEquals("[bf]", arrayList1.toString());
      assertEquals(false, arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      boolean boolean1 = arrayList0.add(simpleDependencyInfo0);
      assertEquals("bf", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("bf", simpleDependencyInfo0.getName());
      assertEquals("[bf]", arrayList1.toString());
      assertEquals(false, arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertEquals("[DependencyInfo(relativePath='bf', path='bf', provides=[bf], requires=[bf])]", arrayList0.toString());
      assertEquals(false, arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SortedDependencies<SimpleDependencyInfo> sortedDependencies0 = null;
      try {
        sortedDependencies0 = new SortedDependencies<SimpleDependencyInfo>((List<SimpleDependencyInfo>) arrayList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // bf -> bf
         //
      }
  }
}
