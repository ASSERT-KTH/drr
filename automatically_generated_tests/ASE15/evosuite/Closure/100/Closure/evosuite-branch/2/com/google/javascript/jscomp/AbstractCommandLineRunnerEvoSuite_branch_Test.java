/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:49:32 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCommandLineRunner;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.PhaseOptimizer;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.SimpleErrorReporter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

 
public class AbstractCommandLineRunnerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "]3'v%w=,]wi";
      int int0 = 0;
      simpleErrorReporter0.error(string0, string0, int0, string0, int0);
      List<String> list0 = simpleErrorReporter0.errors();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      CompilerOptions compilerOptions0 = null;
      // Undeclared exception!
      try {
        AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // --define flag syntax invalid: ]3'v%w=,]wi
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      AbstractCommandLineRunner.createDefineReplacements(list0, compilerOptions0);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
  }

  @Test
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Bad --externs flag. ";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = stringArray0[1];
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      JSModule jSModule0 = null;
      String string1 = commandLineRunner0.expandManifest(jSModule0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNull(string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      JSModule jSModule0 = null;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputManifest(string0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      String string1 = commandLineRunner0.expandManifest(jSModule0);
      assertSame(string1, string0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(string1);
      assertEquals(")bKgNhZZk7f;lf", string1);
  }

  @Test
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "]aZaH";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      compilerOptions0.sourceMapOutputPath = stringArray0[4];
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0.sourceMapOutputPath);
      
      JSModule jSModule0 = new JSModule(stringArray0[1]);
      assertEquals("]aZaH", jSModule0.getName());
      assertEquals("]aZaH", jSModule0.toString());
      assertNotNull(jSModule0);
      
      String string1 = commandLineRunner0.expandSourceMapPath(compilerOptions0, jSModule0);
      assertSame(string1, string0);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.lineBreak);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals("]aZaH", jSModule0.getName());
      assertEquals("]aZaH", jSModule0.toString());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(string1);
      assertEquals("]aZaH", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Bad --externs flag. ";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = stringArray0[1];
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      String string1 = "RM";
      assertNotSame(string1, string0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setCharset(string1);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertNotSame(string1, string0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkCaja);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compilerOptions0);
      
      try {
        commandLineRunner0.setRunOptions(compilerOptions0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // RM is not a valid charset name.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "]aZaH";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      compilerOptions0.sourceMapOutputPath = stringArray0[4];
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0.sourceMapOutputPath);
      
      JSModule jSModule0 = new JSModule(compilerOptions0.nameReferenceReportPath);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(jSModule0);
      
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(result0);
      
      JSModule[] jSModuleArray0 = new JSModule[1];
      jSModuleArray0[0] = jSModule0;
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertNull(jSModule0.toString());
      assertNull(jSModule0.getName());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNull(jSModuleArray0[0].toString());
      assertNull(jSModuleArray0[0].getName());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(jSModuleArray0[0]);
      
      // Undeclared exception!
      try {
        int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "]aZaH";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[2];
      assertNotNull(stringArray0[4]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compilerOptions0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(stringArray0[3], compilerOptions0.jsOutputFile);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertEquals("]aZaH", jSSourceFile0.getName());
      assertEquals("]aZaH", jSSourceFile0.getOriginalPath());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(jSSourceFile0);
      
      Result result0 = compiler0.compile(jSSourceFile0, jSSourceFile0, compilerOptions0);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("]aZaH", jSSourceFile0.getName());
      assertEquals("]aZaH", jSSourceFile0.getOriginalPath());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(result0);
      
      JSModule[] jSModuleArray0 = new JSModule[5];
      int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.optimizeParameters);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals("]aZaH", jSSourceFile0.getName());
      assertEquals("]aZaH", jSSourceFile0.getOriginalPath());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(1, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "6";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = commandLineRunner0.getCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNull(compiler0);
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, stringArray0[2], stringArray0[3], stringArray0[1]);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = ")8[IZO";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, string1, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ")8[IZO";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      String string1 = "O";
      assertNotSame(string1, string0);
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, string1, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Bad --externs flag. ";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string1 = "`";
      assertNotSame(string1, string0);
      
      AbstractCommandLineRunner.writeOutput(mockPrintStream0, compiler0, string0, string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "\\-";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("\\-", jSModule0.toString());
      assertEquals("\\-", jSModule0.getName());
      assertNotNull(jSModule0);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      JSModule[] jSModuleArray0 = new JSModule[1];
      jSModuleArray0[0] = jSModule0;
      assertEquals("\\-", jSModule0.toString());
      assertEquals("\\-", jSModule0.getName());
      assertEquals("\\-", jSModuleArray0[0].toString());
      assertEquals("\\-", jSModuleArray0[0].getName());
      assertNotNull(jSModuleArray0[0]);
      
      try {
        Map<String, String> map0 = AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected module wrapper to have <name>:<wrapper> format: removeUnreachableCode
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "]aZaH";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compiler0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      JSModule jSModule0 = new JSModule(compilerOptions0.debugFunctionSideEffectsPath);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(jSModule0);
      
      LinkedList<JSSourceFile> linkedList0 = new LinkedList<JSSourceFile>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Result result0 = compiler0.compile((List<JSSourceFile>) linkedList0, (List<JSSourceFile>) linkedList0, compilerOptions0);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(result0);
      
      JSModule[] jSModuleArray0 = new JSModule[1];
      jSModuleArray0[0] = jSModule0;
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineFunctions);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generateExports);
      assertNull(jSModule0.getName());
      assertNull(jSModule0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNull(jSModuleArray0[0].getName());
      assertNull(jSModuleArray0[0].toString());
      assertNotNull(jSModuleArray0[0]);
      
      // Undeclared exception!
      try {
        int int0 = commandLineRunner0.processResults(result0, jSModuleArray0, compilerOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "Inalid module name: '";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("Inalid module name: '", jSModule0.toString());
      assertEquals("Inalid module name: '", jSModule0.getName());
      assertNotNull(jSModule0);
      
      List<String> list0 = jSModule0.getProvides();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("Inalid module name: '", jSModule0.toString());
      assertEquals("Inalid module name: '", jSModule0.getName());
      assertNotNull(list0);
      
      JSModule[] jSModuleArray0 = new JSModule[1];
      jSModuleArray0[0] = jSModule0;
      assertEquals("Inalid module name: '", jSModule0.toString());
      assertEquals("Inalid module name: '", jSModule0.getName());
      assertEquals("Inalid module name: '", jSModuleArray0[0].getName());
      assertEquals("Inalid module name: '", jSModuleArray0[0].toString());
      assertNotNull(jSModuleArray0[0]);
      
      try {
        Map<String, String> map0 = AbstractCommandLineRunner.parseModuleWrappers(list0, jSModuleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown module: 'Inalid module name'
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "y>Wq:CKYbTItS";
      int int0 = (-3128);
      simpleErrorReporter0.warning(string0, string0, int0, string0, int0);
      List<String> list0 = simpleErrorReporter0.warnings();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid module name: 'y>Wq'
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected 2-4 colon-delimited parts in module spec: removeUnreachableCode
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "le{Fe8-/";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(string0);
      assertEquals(false, arrayList0.isEmpty());
      assertEquals("[le{Fe8-/]", arrayList0.toString());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      List<String> list0 = simpleErrorReporter0.warnings();
      assertNull(list0);
      
      // Undeclared exception!
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(arrayList0, list0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      // Undeclared exception!
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(stack0, stack0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "kokq:CKYTI(tS";
      int int0 = (-3085);
      simpleErrorReporter0.warning(string0, string0, int0, string0, int0);
      List<String> list0 = simpleErrorReporter0.warnings();
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, list0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid js file count 'CKYTI(tS' for module: kokq
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      List<String> list0 = simpleErrorReporter0.errors();
      assertNull(list0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try {
        JSModule[] jSModuleArray0 = AbstractCommandLineRunner.createJsModules(list0, linkedList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Bad --externs flag. ";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPropertyMapInputFile(string0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertTrue(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertTrue(compilerOptions0.closurePass);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      try {
        commandLineRunner0.setRunOptions(compilerOptions0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setVariableMapInputFile(stringArray0[1]);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.checkControlStructures);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineVariables);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      try {
        commandLineRunner0.setRunOptions(compilerOptions0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setCreateSourceMap(stringArray0[0]);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.collapseProperties);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.prettyPrint);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
  }

  @Test
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "Bad --externs flag. ";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = stringArray0[1];
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJsOutputFile(stringArray0[0]);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compilerOptions0);
      
      commandLineRunner0.setRunOptions(compilerOptions0);
      assertTrue(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkTypes);
      assertTrue(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.removeDeadCode);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
  }

  @Test
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      // Undeclared exception!
      try {
        commandLineRunner0.run();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setDefine(linkedList0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setVariableMapOutputFile(stringArray0[0]);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test28()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintTree(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      String string0 = "3O!L";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJsOutputFile(string0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJscompWarning(linkedList0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test30()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintTree(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(closureCodingConvention0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setCodingConvention(closureCodingConvention0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals("goog.global", closureCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", closureCodingConvention0.getExportSymbolFunction());
      assertNull(closureCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", closureCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.abstractMethod", closureCodingConvention0.getAbstractMethodName());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "+=rKw(";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputWrapperMarker(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setLoggingLevel(stringArray0[0]);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "false";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setCreateSourceMap(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJs(list0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test33()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintTree(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setCreateNameMapFiles(boolean0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintAst(boolean0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "false";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setCreateSourceMap(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      CompilerOptions.DevMode compilerOptions_DevMode0 = CompilerOptions.DevMode.START;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJscompDevMode(compilerOptions_DevMode0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setManageClosureDependencies(boolean0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "]aZaH";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModule(list0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "G,5Hs\\";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPropertyMapOutputFile(string0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "G,5Hs\\";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setExterns(stack0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "6";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setJscompError(list0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModuleOutputPathPrefix(stringArray0[0]);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test42()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setPrintTree(boolean0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      List<String> list0 = PhaseOptimizer.OPTIMAL_ORDER;
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setJscompOff(list0);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test43()  throws Throwable  {
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      String string0 = "gA8TrIuY:hZH=f8Dm]>";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setOutputWrapper(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      int int0 = 2471;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setSummaryDetailLevel(int0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }

  @Test
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setComputePhaseOrdering(boolean0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = ")bKgNhZZk7f;lf";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = commandLineRunner0.getCommandLineConfig();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setModuleWrapper(linkedList0);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig0);
      assertSame(abstractCommandLineRunner_CommandLineConfig0, abstractCommandLineRunner_CommandLineConfig1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "false";
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig0 = new AbstractCommandLineRunner.CommandLineConfig();
      assertNotNull(abstractCommandLineRunner_CommandLineConfig0);
      
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig1 = abstractCommandLineRunner_CommandLineConfig0.setCreateSourceMap(string0);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig1);
      
      boolean boolean0 = false;
      AbstractCommandLineRunner.CommandLineConfig abstractCommandLineRunner_CommandLineConfig2 = abstractCommandLineRunner_CommandLineConfig1.setPrintPassGraph(boolean0);
      assertSame(abstractCommandLineRunner_CommandLineConfig2, abstractCommandLineRunner_CommandLineConfig1);
      assertSame(abstractCommandLineRunner_CommandLineConfig1, abstractCommandLineRunner_CommandLineConfig2);
      assertNotNull(abstractCommandLineRunner_CommandLineConfig2);
  }
}
