/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 02:18:39 GMT 2014
 */

package com.google.javascript.jscomp.deps;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.deps.SimpleDependencyInfo;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SimpleDependencyInfoEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList0.add(string0);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertTrue(boolean0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList1, (List<String>) linkedList1);
      assertNotNull(simpleDependencyInfo0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList1);
      assertNotNull(simpleDependencyInfo1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      assertEquals(1, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean1 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(boolean1 == boolean0);
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals("[]", linkedList1.toString());
      assertEquals(0, linkedList1.size());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(1, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerLast(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList1, (List<String>) linkedList1);
      assertNotNull(simpleDependencyInfo1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      
      boolean boolean1 = simpleDependencyInfo1.equals((Object) simpleDependencyInfo0);
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      assertEquals("", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      assertEquals("[]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "RC\"`W";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      String string1 = simpleDependencyInfo0.toString();
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("DependencyInfo(relativePath='RC\"`W', path='RC\"`W', provides=[], requires=[])", string1);
      
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string0, string1, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(string1, string0);
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(string0, string1);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("DependencyInfo(relativePath='RC\"`W', path='RC\"`W', provides=[], requires=[])", simpleDependencyInfo1.getName());
      assertEquals("RC\"`W", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      
      boolean boolean0 = simpleDependencyInfo1.equals((Object) simpleDependencyInfo0);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertNotSame(string1, string0);
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(string0, string1);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("DependencyInfo(relativePath='RC\"`W', path='RC\"`W', provides=[], requires=[])", simpleDependencyInfo1.getName());
      assertEquals("RC\"`W", simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = null;
      SimpleDependencyInfo simpleDependencyInfo1 = new SimpleDependencyInfo(string1, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNull(simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      
      boolean boolean0 = simpleDependencyInfo1.equals((Object) simpleDependencyInfo0);
      assertNotSame(simpleDependencyInfo0, simpleDependencyInfo1);
      assertNotSame(simpleDependencyInfo1, simpleDependencyInfo0);
      assertFalse(simpleDependencyInfo0.equals((Object)simpleDependencyInfo1));
      assertFalse(simpleDependencyInfo1.equals((Object)simpleDependencyInfo0));
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNull(simpleDependencyInfo1.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) string0);
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      
      boolean boolean0 = simpleDependencyInfo0.equals((Object) simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "RC\"`W";
      List<String> list0 = null;
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, list0, list0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      
      // Undeclared exception!
      try {
        Collection<String> collection0 = simpleDependencyInfo0.getRequires();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Collection<String> collection0 = simpleDependencyInfo0.getProvides();
      assertNotNull(collection0);
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "RC\"`W";
      List<String> list0 = null;
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, list0, list0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      
      String string1 = simpleDependencyInfo0.getPathRelativeToClosureBase();
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("RC\"`W", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("RC\"`W", simpleDependencyInfo0.getName());
      assertEquals("RC\"`W", string1);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      SimpleDependencyInfo simpleDependencyInfo0 = new SimpleDependencyInfo(string0, string0, (List<String>) linkedList0, (List<String>) linkedList0);
      assertNotNull(simpleDependencyInfo0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      
      String string1 = simpleDependencyInfo0.getName();
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", simpleDependencyInfo0.getPathRelativeToClosureBase());
      assertEquals("", simpleDependencyInfo0.getName());
      assertEquals("", string1);
  }
}
