/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:19:44 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.JsMessageDefinition;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeNative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CodingConventionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Node node0 = null;
      JsMessageDefinition jsMessageDefinition0 = new JsMessageDefinition(node0, node0, node0);
      assertNotNull(jsMessageDefinition0);
      
      Node node1 = jsMessageDefinition0.getMessageNode();
      assertNull(node1);
      
      CodingConvention.SubclassType codingConvention_SubclassType0 = CodingConvention.SubclassType.INHERITS;
      CodingConvention.SubclassRelationship codingConvention_SubclassRelationship0 = null;
      try {
        codingConvention_SubclassRelationship0 = new CodingConvention.SubclassRelationship(codingConvention_SubclassType0, node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "license";
      CodingConvention.DelegateRelationship codingConvention_DelegateRelationship0 = new CodingConvention.DelegateRelationship(string0, string0);
      assertNotNull(codingConvention_DelegateRelationship0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "RCv/mCQ";
      int int0 = 250;
      Node node0 = Node.newString(int0, string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(250, node0.getType());
      assertNotNull(node0);
      
      CodingConvention.ObjectLiteralCast codingConvention_ObjectLiteralCast0 = new CodingConvention.ObjectLiteralCast(string0, node0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(250, node0.getType());
      assertNotNull(codingConvention_ObjectLiteralCast0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "";
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(string0);
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      
      JSTypeNative jSTypeNative0 = codingConvention_AssertionFunctionSpec0.getAssertedType();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "i| JEE`033f";
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(string0, jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      
      Node node0 = null;
      Node node1 = codingConvention_AssertionFunctionSpec0.getAssertedParam(node0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "IX|U9#A74?^_wh2(h\"4";
      JSTypeNative jSTypeNative0 = JSTypeNative.NULL_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec(string0, jSTypeNative0);
      assertNotNull(codingConvention_AssertionFunctionSpec0);
      
      String string1 = codingConvention_AssertionFunctionSpec0.getFunctionName();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("IX|U9#A74?^_wh2(h\"4", string1);
      assertNotNull(string1);
  }
}
