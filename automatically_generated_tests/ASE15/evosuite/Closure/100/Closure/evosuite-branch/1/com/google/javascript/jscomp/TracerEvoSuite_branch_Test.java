/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 01:57:43 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Tracer;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class TracerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tracer.AtomicTracerStatMap tracer_AtomicTracerStatMap0 = new Tracer.AtomicTracerStatMap();
      assertNotNull(tracer_AtomicTracerStatMap0);
      
      String string0 = "gw(>RtbWvt\"E05;?";
      long long0 = 774L;
      tracer_AtomicTracerStatMap0.incrementBy(string0, long0);
      tracer_AtomicTracerStatMap0.incrementBy(string0, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      String string0 = "xp|}4lmc.2#}$=D<>bJ";
      Tracer tracer0 = Tracer.shortName(tracer_ThreadTrace0, string0);
      assertNotNull(tracer0);
      
      Tracer.Stat tracer_Stat0 = Tracer.getStatsForType(string0);
      assertNotNull(tracer_Stat0);
      
      tracer_ThreadTrace0.truncateEvents();
      tracer_ThreadTrace0.truncateOutstandingEvents();
      int int0 = tracer_Stat0.getCount();
      assertEquals(0, int0);
      
      tracer_ThreadTrace0.endEvent(tracer0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "%=Akc-[2zn|#)H;aYGS";
      Tracer tracer0 = new Tracer(string0, string0);
      assertNotNull(tracer0);
      
      long long0 = tracer0.stop();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      String string0 = "xp|}4lmc.2#}$=D<>bJ";
      Tracer tracer0 = Tracer.shortName(tracer_ThreadTrace0, string0);
      assertNotNull(tracer0);
      
      Tracer.Stat tracer_Stat0 = Tracer.getStatsForType(string0);
      assertNotNull(tracer_Stat0);
      
      tracer_ThreadTrace0.truncateOutstandingEvents();
      int int0 = tracer_Stat0.getCount();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try {
        tracer_ThreadTrace0.endEvent(tracer0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tracer.Stat tracer_Stat0 = new Tracer.Stat();
      assertNotNull(tracer_Stat0);
      
      Tracer.initCurrentThreadTrace();
      int int0 = tracer_Stat0.getCount();
      assertEquals(0, int0);
      
      String string0 = "%=Akc-[2zn|#)H;aYGS";
      String string1 = null;
      Tracer tracer0 = new Tracer(string0, string1);
      assertNotNull(tracer0);
      
      Tracer.clearTracingStatisticsTestingOnly();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Map<String, Long> map0 = Tracer.getTypeToTimeMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tracer.enableTypeMaps();
      Map<String, Long> map0 = Tracer.getTypeToSilentMap();
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tracer.enableTypeMaps();
      Map<String, Long> map0 = Tracer.getTypeToCountMap();
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tracer.enableTypeMaps();
      Tracer.enableTypeMaps();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1);
      String string0 = null;
      Tracer.logAndClearCurrentThreadTrace();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1);
      String string0 = null;
      Tracer tracer0 = new Tracer(string0);
      assertNotNull(tracer0);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = Tracer.getThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      tracer_ThreadTrace0.truncateEvents();
      Tracer.logAndClearCurrentThreadTrace();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = null;
      Tracer tracer0 = Tracer.shortName(string0, string0);
      assertNotNull(tracer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Tracer.getCurrentThreadTraceReport();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tracer.clearCurrentThreadTrace();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      Tracer.setPrettyPrint(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-1);
      Tracer.initCurrentThreadTrace(int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tracer.initCurrentThreadTrace();
      String string0 = "%=Akc-[2zn|#)H;aYGS";
      String string1 = null;
      Tracer tracer0 = new Tracer(string0, string1);
      assertNotNull(tracer0);
      
      Tracer.clearTracingStatisticsTestingOnly();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tracer.Stat tracer_Stat0 = new Tracer.Stat();
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getSilentCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tracer.Stat tracer_Stat0 = new Tracer.Stat();
      assertNotNull(tracer_Stat0);
      
      int int0 = tracer_Stat0.getTotalTime();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      int int0 = 1069;
      Tracer.appendSpaces(stringBuilder0, int0);
      assertEquals("                ", stringBuilder0.toString());
      
      String string0 = null;
      Tracer tracer0 = new Tracer(string0, string0);
      assertNotNull(tracer0);
      
      Tracer.clearTracingStatisticsTestingOnly();
      long long0 = tracer0.stop(int0);
      assertEquals(0L, long0);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = new Tracer.ThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      Tracer.ThreadTrace tracer_ThreadTrace1 = Tracer.getThreadTrace();
      assertNotSame(tracer_ThreadTrace1, tracer_ThreadTrace0);
      assertFalse(tracer_ThreadTrace1.equals((Object)tracer_ThreadTrace0));
      assertNotNull(tracer_ThreadTrace1);
      
      Tracer.enableTypeMaps();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Map<String, Long> map0 = Tracer.getTypeToCountMap();
      assertNull(map0);
      
      Tracer.ThreadTrace tracer_ThreadTrace0 = Tracer.getThreadTrace();
      assertNotNull(tracer_ThreadTrace0);
      
      String string0 = "yzL'slstEc,";
      Tracer tracer0 = new Tracer(string0, string0);
      assertNotNull(tracer0);
      
      int int0 = 559;
      // Undeclared exception!
      try {
        tracer_ThreadTrace0.endEvent(tracer0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tracer.enableTypeMaps();
      Map<String, Long> map0 = Tracer.getTypeToTimeMap();
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
  }
}
