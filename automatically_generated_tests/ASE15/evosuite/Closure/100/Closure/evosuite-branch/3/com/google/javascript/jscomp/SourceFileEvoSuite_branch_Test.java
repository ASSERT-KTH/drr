/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:33:53 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceFile;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.junit.runner.RunWith;

 
public class SourceFileEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "E#0";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertEquals("E#0", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("E#0", sourceFile_Preloaded0.getName());
      assertNotNull(sourceFile_Preloaded0);
      
      int int0 = (-861);
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertEquals("E#0", simpleRegion0.getSourceExcerpt());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("E#0", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("E#0", sourceFile_Preloaded0.getName());
      assertNotNull(simpleRegion0);
  }

  @Test
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/US-ASCII05xf;hLd?k");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "5xf;hLd?k";
      assertNotSame(string1, string0);
      
      String string2 = "US-ASCII";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      byte[] byteArray0 = new byte[5];
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(sourceFile_OnDisk0);
      
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_OnDisk0.getRegion((int) byteArray0[2]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(2, simpleRegion0.getEndingLineNumber());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(simpleRegion0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "";
      JSSourceFile jSSourceFile0 = JSSourceFile.fromCode(string0, string0);
      assertEquals("", jSSourceFile0.getOriginalPath());
      assertEquals("", jSSourceFile0.getName());
      assertNotNull(jSSourceFile0);
      
      int int0 = 1921;
      Region region0 = jSSourceFile0.getRegion(int0);
      assertEquals("", jSSourceFile0.getOriginalPath());
      assertEquals("", jSSourceFile0.getName());
      assertNull(region0);
  }

  @Test
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/US-ASCII05xf;hLd?k");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "5xf;hLd?k";
      assertNotSame(string1, string0);
      
      String string2 = "US-ASCII";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = 0;
      String string3 = sourceFile_OnDisk0.getLine(int0);
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/US-ASCII05xf;hLd?k");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      String string1 = "5xf;hLd?k";
      assertNotSame(string1, string0);
      
      String string2 = "US-ASCII";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = 704;
      String string3 = sourceFile_OnDisk0.getLine(int0);
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNull(string3);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = "US-ASCII";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = 0;
      String string2 = sourceFile_OnDisk0.getLine(int0);
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string2);
      
      String string3 = sourceFile_OnDisk0.getLine(int0);
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string3);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "E#0";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertEquals("E#0", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("E#0", sourceFile_Preloaded0.getName());
      assertNotNull(sourceFile_Preloaded0);
      
      String string1 = sourceFile_Preloaded0.getOriginalPath();
      assertEquals("E#0", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("E#0", sourceFile_Preloaded0.getName());
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("E#0", string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      Charset charset0 = null;
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0, charset0);
      assertEquals("", sourceFile_OnDisk0.getName());
      assertEquals("", sourceFile_OnDisk0.getOriginalPath());
      assertNotNull(sourceFile_OnDisk0);
      
      String string1 = sourceFile_OnDisk0.getOriginalPath();
      assertEquals("", sourceFile_OnDisk0.getName());
      assertEquals("", sourceFile_OnDisk0.getOriginalPath());
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "\"H$#";
      SourceFile.OnDisk sourceFile_OnDisk0 = (SourceFile.OnDisk)SourceFile.fromFile(string0);
      assertEquals("\"H$#", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("\"H$#", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      int int0 = 0;
      byte byte0 = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, (int) byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(-4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, string0, (InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(-4, byteArrayInputStream0.available());
      assertEquals("", sourceFile_Preloaded0.getName());
      assertEquals("", sourceFile_Preloaded0.getOriginalPath());
      assertNotNull(sourceFile_Preloaded0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "\"H$#";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getName());
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getOriginalPath());
      assertNotNull(jSSourceFile0);
      
      String string1 = jSSourceFile0.getCodeNoCache();
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getName());
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getOriginalPath());
      assertNull(string1);
      
      // Undeclared exception!
      try {
        SourceFile sourceFile0 = SourceFile.fromFile(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "|o6R6";
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) byte0, (int) byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromInputStream(string0, (InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("|o6R6", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("|o6R6", sourceFile_Preloaded0.getName());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(sourceFile_Preloaded0);
      
      sourceFile_Preloaded0.clearCachedSource();
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("|o6R6", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("|o6R6", sourceFile_Preloaded0.getName());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "5xf;hLd?k";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string0, string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/5xf;hLd?k05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/5xf;hLd?k05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertNotNull(sourceFile_OnDisk0);
      
      int int0 = 0;
      String string1 = sourceFile_OnDisk0.getLine(int0);
      assertEquals("/tmp/5xf;hLd?k05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/5xf;hLd?k05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertNull(string1);
      
      StringReader stringReader0 = (StringReader)sourceFile_OnDisk0.getCodeReader();
      assertEquals("/tmp/5xf;hLd?k05xf;hLd?k", sourceFile_OnDisk0.getOriginalPath());
      assertEquals("/tmp/5xf;hLd?k05xf;hLd?k", sourceFile_OnDisk0.getName());
      assertEquals(true, stringReader0.markSupported());
      assertEquals(true, stringReader0.ready());
      assertNotNull(stringReader0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "\"H$#";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile((File) mockFile0);
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getName());
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getOriginalPath());
      assertNotNull(jSSourceFile0);
      
      jSSourceFile0.clearCachedSource();
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getName());
      assertEquals("\"H$#/\"H$#", jSSourceFile0.getOriginalPath());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = "US-ASCII";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getOriginalPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(sourceFile_OnDisk0);
      
      MockFileReader mockFileReader0 = (MockFileReader)sourceFile_OnDisk0.getCodeReader();
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, mockFileReader0.markSupported());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(mockFileReader0);
      
      SourceFile.Preloaded sourceFile_Preloaded0 = (SourceFile.Preloaded)SourceFile.fromReader(string1, (Reader) mockFileReader0);
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getName());
      assertEquals("/tmp/US-ASCII0", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(false, mockFileReader0.markSupported());
      assertEquals("US-ASCII", sourceFile_Preloaded0.getName());
      assertEquals("US-ASCII", sourceFile_Preloaded0.getOriginalPath());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(sourceFile_Preloaded0);
  }
}
