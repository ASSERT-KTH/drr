/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:07:33 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.RecordTypeBuilder;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class JSTypeRegistryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "?\"0E~I3~tx";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      
      node0.addChildrenToBack(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      
      StaticScope<JSType> staticScope0 = null;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, staticScope0);
      assertNotNull(unionType0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(40, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "?\"0Y~3~tx";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      
      StaticScope<JSType> staticScope0 = null;
      jSTypeRegistry0.identifyNonNullableName(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createFromTypeNodes(node0, string0, staticScope0);
      assertNotNull(namedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "t='RQ A'5$ !<";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("t='RQ A'5$ !<", templateType0.toString());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("t='RQ A'5$ !<", templateType0.getReferenceName());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      
      int int0 = 306;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(306, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(306, node0.getCharno());
      assertEquals(1253682, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-2147483342, node0.getSourceOffset());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) templateType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("", templateType0.getReferenceName());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("", templateType0.toString());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      
      int int0 = 305;
      Node node0 = new Node(int0, int0, int0);
      assertNotNull(node0);
      assertEquals(305, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(305, node0.getCharno());
      assertEquals(305, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1249585, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-2147483343, node0.getSourceOffset());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) templateType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "yqSrWwVw*PxQnd.n<5";
      int int0 = 304;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(83, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotNull(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(-1, node0.getCharno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(3, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(83, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(304, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-2147483344, node1.getSourceOffset());
      assertNull(node1.getSourceFileName());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(304, node1.getType());
      assertEquals(1245488, node1.getSourcePosition());
      assertEquals(304, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node1, string0, (StaticScope<JSType>) errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: LP
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "SET_REF_OP";
      int int0 = 301;
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(3, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(301, node1.getLineno());
      assertEquals(301, node1.getType());
      assertEquals(-2147483347, node1.getSourceOffset());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(301, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1233197, node1.getSourcePosition());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(3, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node1, string0, (StaticScope<JSType>) errorFunctionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: LP
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noObjectType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
      jSTypeRegistry0.setResolveMode(jSTypeRegistry_ResolveMode0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createFromTypeNodes(node0, string0, (StaticScope<JSType>) noObjectType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unexpected node in type expression: LP
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)instanceObjectType0.getImplicitPrototype();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = jSTypeRegistry0.resetImplicitPrototype((JSType) noType0, (ObjectType) prototypeObjectType0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "O,V{E+9a+CvH~";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertTrue(boolean0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "msg.jsdoc.function.thisnotobject";
      int int0 = 0;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) namedType0, (ObjectType) errorFunctionType0);
      assertFalse(boolean0);
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[6];
      jSTypeArray0[0] = (JSType) noResolvedType0;
      assertNotNull(jSTypeArray0[0]);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(true, jSTypeArray0[0].matchesObjectContext());
      assertEquals(true, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(true, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "O,V{E+9a+CvH~";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      
      ObjectType objectType0 = allType0.toObjectType();
      assertNull(objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) objectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isInterface());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      int int0 = (-2133);
      String string0 = "!F2Ajq<2+LrCC1";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.setTemplateTypeName(string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      
      TemplateType templateType0 = (TemplateType)jSTypeRegistry0.getType((StaticScope<JSType>) noResolvedType0, string0, string0, int0, int0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isNullType());
      assertEquals("!F2Ajq<2+LrCC1", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("!F2Ajq<2+LrCC1", templateType0.toString());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "msg.jsdoc.function.thisnotobject";
      boolean boolean0 = jSTypeRegistry0.hasNamespace(string0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = jSTypeRegistry0.isLastGeneration();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean1);
      assertNotNull(unknownType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalType());
      
      int int0 = unknownType0.getPropertiesCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalType());
      
      String string0 = "Yn";
      jSTypeRegistry0.forwardDeclareType(string0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) unknownType0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalType());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) unknownType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
      
      String string0 = "Error";
      jSTypeRegistry0.overwriteDeclaredType(string0, (JSType) noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getTemplateTypeName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Date";
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = null;
      // Undeclared exception!
      try {
        jSTypeRegistry0.overwriteDeclaredType(string1, (JSType) functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Date";
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = jSTypeRegistry0.declareType(string0, (JSType) functionType0);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      
      int int0 = unknownType0.getPropertiesCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      
      String string0 = "Yn";
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) unknownType0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      
      jSTypeRegistry0.resolveTypesInScope((StaticScope<JSType>) unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      
      jSTypeRegistry0.incrementGeneration();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ULIAg";
      Iterable<ObjectType> iterable0 = jSTypeRegistry0.getEachReferenceTypeWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "prototype";
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "msg.jsdoc.function.thisnotobject";
      Iterable<JSType> iterable0 = jSTypeRegistry0.getTypesWithProperty(string0);
      assertNotNull(iterable0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      
      String string0 = "ci>^I";
      boolean boolean0 = jSTypeRegistry0.canPropertyBeDefined((JSType) recordType0, string0);
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      
      Node node0 = unknownType0.getRootNode();
      assertNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      
      String string0 = "Yn";
      boolean boolean1 = unknownType0.defineInferredProperty(string0, (JSType) unknownType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      
      UnknownType unknownType1 = (UnknownType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) unknownType0, string0);
      assertNotNull(unknownType1);
      assertFalse(unknownType1.equals((Object)unknownType0));
      assertFalse(unknownType0.equals((Object)unknownType1));
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isInterface());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isNominalType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(true, unknownType1.hasDisplayName());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isEnumElementType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isConstructor());
      assertEquals(false, unknownType1.isOrdinaryFunction());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.isNoResolvedType());
      assertEquals("Unknown", unknownType1.getDisplayName());
      assertEquals(false, unknownType1.isFunctionPrototypeType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(false, unknownType1.isEnumType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals("?", unknownType1.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isInterface());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertNotSame(unknownType1, unknownType0);
      assertNotSame(unknownType0, unknownType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "msg.jsdoc.function.thisnotobject";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      
      NoType noType0 = (NoType)jSTypeRegistry0.getGreatestSubtypeWithProperty((JSType) errorFunctionType0, string0);
      assertNotNull(noType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNoResolvedType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = null;
      String string0 = "prototype";
      // Undeclared exception!
      try {
        jSTypeRegistry0.unregisterPropertyOnType(string0, (JSType) objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("*", allType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
      
      String string0 = "yqSrWwVw*PxQnd.n<5";
      jSTypeRegistry0.unregisterPropertyOnType(string0, (JSType) allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("*", allType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isVoidType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      String string0 = "?\"0Y~I3~tx";
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[8];
      JSTypeNative jSTypeNative1 = JSTypeNative.REFERENCE_ERROR_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[1].toString());
      assertEquals(47, jSTypeNativeArray0[1].ordinal());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals(47, jSTypeNativeArray0[2].ordinal());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].name());
      
      jSTypeNativeArray0[5] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[5].name());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[5].toString());
      assertEquals(47, jSTypeNativeArray0[5].ordinal());
      
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[0].name());
      assertEquals(47, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[4] = jSTypeNative1;
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[4].toString());
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[4].name());
      assertEquals(25, jSTypeNativeArray0[4].ordinal());
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals(25, jSTypeNativeArray0[3].ordinal());
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[3].toString());
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[3].name());
      
      jSTypeNativeArray0[6] = jSTypeNative1;
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[6].toString());
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[6].name());
      assertEquals(25, jSTypeNativeArray0[6].ordinal());
      
      jSTypeNativeArray0[7] = jSTypeNative1;
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[7].name());
      assertEquals("REFERENCE_ERROR_TYPE", jSTypeNativeArray0[7].toString());
      assertEquals(25, jSTypeNativeArray0[7].ordinal());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = unknownType0.getRootNode();
      assertNull(node0);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "Yn";
      boolean boolean1 = unknownType0.defineInferredProperty(string0, (JSType) unknownType0, node0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.registerPropertyOnType(string0, (JSType) unknownType0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "msg.jsdoc.function.thisnotobject";
      int int0 = 0;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = jSTypeRegistry0.declareType(string0, (JSType) namedType0);
      assertTrue(boolean0);
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[3];
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) allType0, boolean0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      
      String string0 = null;
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) functionType0);
      assertNotNull(enumType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isConstructor());
      assertEquals(true, allType0.isAllType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isStringValueType());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "ci>^I";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("ci>^I", templateType0.getReferenceName());
      assertEquals("ci>^I", templateType0.toString());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionTypeWithVarArgs((ObjectType) recordType0, (JSType) templateType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals("ci>^I", templateType0.getReferenceName());
      assertEquals("ci>^I", templateType0.toString());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
      
      Collection<FunctionType> collection0 = jSTypeRegistry0.getDirectImplementors((ObjectType) noType0);
      assertNotNull(collection0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isEnumElementType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isFunctionPrototypeType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = (FunctionType)jSTypeRegistry0.createFunctionType((ObjectType) noResolvedType0, (JSType) noResolvedType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = unknownType0.isResolved();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.setLastGeneration(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) unknownType0, (JSType) unknownType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeRegistry.ResolveMode jSTypeRegistry_ResolveMode0 = jSTypeRegistry0.getResolveMode();
      assertEquals(JSTypeRegistry.ResolveMode.LAZY_NAMES, jSTypeRegistry_ResolveMode0);
      assertEquals(1, jSTypeRegistry_ResolveMode0.ordinal());
      assertEquals("LAZY_NAMES", jSTypeRegistry_ResolveMode0.toString());
      assertEquals("LAZY_NAMES", jSTypeRegistry_ResolveMode0.name());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      JSType[] jSTypeArray0 = new JSType[7];
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType((JSType) allType0, boolean0, jSTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "";
      int int0 = 699;
      NamedType namedType0 = (NamedType)jSTypeRegistry0.createNamedType(string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "msg.jsdoc.function.thisnotobject";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertNotNull(functionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[3];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, boolean0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEnumType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      SimpleErrorReporter simpleErrorReporter1 = (SimpleErrorReporter)jSTypeRegistry0.getErrorReporter();
      assertNotNull(simpleErrorReporter1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertSame(simpleErrorReporter1, simpleErrorReporter0);
      assertSame(simpleErrorReporter0, simpleErrorReporter1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) allType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewReturnType(functionType0, (JSType) allType0);
      assertNotNull(functionType1);
      assertTrue(functionType1.equals((Object)functionType0));
      assertTrue(functionType0.equals((Object)functionType1));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNominalType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isUnionType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNominalType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      HashMap<String, RecordTypeBuilder.RecordProperty> hashMap0 = new HashMap<String, RecordTypeBuilder.RecordProperty>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = jSTypeRegistry0.createRecordType((Map<String, RecordTypeBuilder.RecordProperty>) hashMap0);
      assertNotNull(recordType0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isEnumType());
      assertEquals(false, recordType0.isOrdinaryFunction());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNoResolvedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isCheckedUnknownType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNominalType());
      assertEquals(false, recordType0.isInterface());
      assertEquals(false, recordType0.isEnumElementType());
      assertEquals(false, recordType0.isConstructor());
      assertEquals(false, recordType0.isFunctionPrototypeType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createNativeAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createDefaultObjectUnion((JSType) instanceObjectType0);
      assertNotNull(unionType0);
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isEnumElementType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isNominalType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(0, noType0.getExtendedInterfacesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNullType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isFunctionPrototypeType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isCheckedUnknownType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNoResolvedType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isReturnTypeInferred());
      assertEquals(false, noType0.isEnumType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isVoidType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) allType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoResolvedType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNominalType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isFunctionPrototypeType());
      assertEquals(false, allType0.isEnumElementType());
      assertEquals(true, allType0.hasDisplayName());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isOrdinaryFunction());
      assertEquals(false, allType0.isInterface());
      assertEquals(false, allType0.isEnumType());
      assertEquals(false, allType0.isCheckedUnknownType());
      assertEquals(false, allType0.isConstructor());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoType());
      assertEquals("<Any Type>", allType0.getDisplayName());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNullType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearTemplateTypeName();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)booleanType0.dereference();
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "+qJ.-+ya(";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      
      jSTypeRegistry0.registerTypeImplementingInterface(errorFunctionType0, instanceObjectType0);
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, booleanType0.isEnumType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNominalType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isConstructor());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionPrototypeType());
      assertEquals(false, booleanType0.isCheckedUnknownType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isInterface());
      assertEquals(false, booleanType0.isOrdinaryFunction());
      assertEquals(false, booleanType0.isNoResolvedType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isEnumElementType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals("boolean", booleanType0.getDisplayName());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      jSTypeRegistry0.clearNamedTypes();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "?\"0E~I3~tx";
      Node node0 = Node.newString(string0);
      assertNotNull(node0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      
      StaticScope<JSType> staticScope0 = null;
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createFromTypeNodes(node0, string0, staticScope0);
      assertNotNull(unionType0);
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ci>^I";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("ci>^I", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("ci>^I", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType((ObjectType) templateType0);
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals("ci>^I", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("ci>^I", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }
}
