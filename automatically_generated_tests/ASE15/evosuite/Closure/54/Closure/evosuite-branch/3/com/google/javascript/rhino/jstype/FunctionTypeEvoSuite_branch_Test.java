/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:42:23 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import com.google.javascript.rhino.jstype.VoidType;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class FunctionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(false, noResolvedType0.hasCachedValues());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertNotNull(noResolvedType0);
//       
//       String string0 = noResolvedType0.toDebugHashCodeString();
//       assertEquals("function (this:me, {9}): me", string0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, noResolvedType0.isFunctionPrototypeType());
//       assertEquals(true, noResolvedType0.isConstructor());
//       assertEquals(false, noResolvedType0.isBooleanValueType());
//       assertEquals(2147483647, noResolvedType0.getMaxArguments());
//       assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, noResolvedType0.isNullable());
//       assertEquals(true, noResolvedType0.hasInstanceType());
//       assertEquals(false, noResolvedType0.isNumberValueType());
//       assertEquals(false, noResolvedType0.isRecordType());
//       assertEquals(false, noResolvedType0.isTemplateType());
//       assertEquals(false, noResolvedType0.isStringValueType());
//       assertEquals(false, noResolvedType0.isUnionType());
//       assertEquals(false, noResolvedType0.isVoidType());
//       assertEquals(false, noResolvedType0.isEnumElementType());
//       assertEquals(false, noResolvedType0.isOrdinaryFunction());
//       assertEquals(false, noResolvedType0.isNullType());
//       assertEquals(true, noResolvedType0.matchesObjectContext());
//       assertEquals(2147483647, noResolvedType0.getPropertiesCount());
//       assertEquals(true, noResolvedType0.matchesNumberContext());
//       assertEquals(false, noResolvedType0.isCheckedUnknownType());
//       assertEquals(true, noResolvedType0.canBeCalled());
//       assertEquals(false, noResolvedType0.isAllType());
//       assertEquals(false, noResolvedType0.isInterface());
//       assertEquals(false, noResolvedType0.isReturnTypeInferred());
//       assertEquals(false, noResolvedType0.isResolved());
//       assertEquals(false, noResolvedType0.isFunctionType());
//       assertNull(noResolvedType0.getTemplateTypeName());
//       assertEquals(true, noResolvedType0.matchesStringContext());
//       assertEquals(false, noResolvedType0.isNominalType());
//       assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
//       assertEquals(false, noResolvedType0.isEnumType());
//       assertEquals(true, noResolvedType0.hasCachedValues());
//       assertNull(noResolvedType0.getReferenceName());
//       assertEquals(false, noResolvedType0.isNoObjectType());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       NullType nullType0 = new NullType(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isOrdinaryFunction());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isInterface());
//       assertEquals(false, nullType0.isNominalType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isConstructor());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals("null", nullType0.getDisplayName());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isFunctionPrototypeType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isEnumType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isCheckedUnknownType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isNoResolvedType());
//       assertEquals(false, nullType0.isEnumElementType());
//       assertEquals(false, nullType0.isRecordType());
//       assertNotNull(nullType0);
//       
//       Vector<JSType> vector0 = new Vector<JSType>();
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals(10, vector0.capacity());
//       assertEquals("[]", vector0.toString());
//       assertNotNull(vector0);
//       
//       FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals(10, vector0.capacity());
//       assertEquals("[]", vector0.toString());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isOrdinaryFunction());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isInterface());
//       assertEquals(false, nullType0.isNominalType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isConstructor());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals("null", nullType0.getDisplayName());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isFunctionPrototypeType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isEnumType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isCheckedUnknownType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isNoResolvedType());
//       assertEquals(false, nullType0.isEnumElementType());
//       assertEquals(false, nullType0.isRecordType());
//       assertNotNull(functionType0);
//       
//       String string0 = functionType0.toDebugHashCodeString();
//       assertEquals("function (): {259}", string0);
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals(10, vector0.capacity());
//       assertEquals("[]", vector0.toString());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isInterface());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(true, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.hasInstanceType());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isNominalType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isNumberValueType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isOrdinaryFunction());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isInterface());
//       assertEquals(false, nullType0.isNominalType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isConstructor());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals("null", nullType0.getDisplayName());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isFunctionPrototypeType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isEnumType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isCheckedUnknownType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isNoResolvedType());
//       assertEquals(false, nullType0.isEnumElementType());
//       assertEquals(false, nullType0.isRecordType());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       ErrorReporter errorReporter0 = null;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(jSTypeRegistry0);
//       
//       String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(errorFunctionType0);
//       
//       String string1 = errorFunctionType0.toDebugHashCodeString();
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals("function (this:{-1696476910}, {11}, {11}, {11}): {-1696476910}", string1);
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(1, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isStringValueType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertNotNull(functionType1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(parameterizedType0);
      
      ErrorReporter errorReporter1 = jSTypeRegistry0.getErrorReporter();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(errorReporter1);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.toString());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertNotNull(templateType0);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.forceResolve(errorReporter1, (StaticScope<JSType>) templateType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertEquals(true, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isVoidType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.toString());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.getReferenceName());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isEnumElementType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, parameterizedType1.isFunctionPrototypeType());
      assertEquals(true, parameterizedType1.isFunctionType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isRecordType());
      assertEquals(true, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isAllType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isNullType());
      assertNotNull(parameterizedType1);
      
      boolean boolean0 = jSTypeRegistry0.resetImplicitPrototype((JSType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      JSType[] jSTypeArray0 = new JSType[16];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, jSTypeArray0);
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(16, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNotNull(functionType0);
      
      functionType0.clearCachedValues();
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(16, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "...[";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noResolvedType0, (JSType) noResolvedType0);
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      Node node0 = parameterizedType0.getRootNode();
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)functionType0.getPrototype();
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(prototypeObjectType0);
      
      functionType0.setPrototypeBasedOn((ObjectType) noResolvedType0);
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isEquivalentTo((JSType) errorFunctionType0);
      assertTrue(boolean0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean1 = functionType0.canTestForShallowEqualityWith((JSType) errorFunctionType0);
      assertFalse(boolean1);
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "j";
      Node node0 = Node.newString(string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unresolvedTypeExpression0);
      
      Node node1 = unresolvedTypeExpression0.getPropertyNode(string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node1);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node1);
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      String string1 = functionType0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("function (this:j): ?", string1);
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = functionType0.canAssignTo((JSType) errorFunctionType0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLength());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(voidType0);
      
      String string0 = "...[";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noResolvedType0, (JSType) noResolvedType0);
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      Node node0 = parameterizedType0.getRootNode();
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(node0);
      
      FunctionType functionType1 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotSame(functionType1, functionType0);
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.isInterface());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isStringValueType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      
      JSType[] jSTypeArray0 = new JSType[7];
      jSTypeArray0[0] = (JSType) voidType0;
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isFunctionType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(true, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[0]);
      
      jSTypeArray0[1] = (JSType) voidType0;
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[1].isRecordType());
      assertEquals(false, jSTypeArray0[1].isNullType());
      assertEquals(false, jSTypeArray0[1].isConstructor());
      assertEquals(true, jSTypeArray0[1].isVoidType());
      assertEquals(false, jSTypeArray0[1].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[1].isFunctionType());
      assertEquals(false, jSTypeArray0[1].isNumberValueType());
      assertEquals(false, jSTypeArray0[1].isAllType());
      assertEquals(false, jSTypeArray0[1].isUnionType());
      assertEquals(false, jSTypeArray0[1].isStringValueType());
      assertEquals(false, jSTypeArray0[1].isEnumElementType());
      assertEquals(false, jSTypeArray0[1].isNoObjectType());
      assertEquals(false, jSTypeArray0[1].isResolved());
      assertEquals(false, jSTypeArray0[1].isTemplateType());
      assertEquals(false, jSTypeArray0[1].isNoType());
      assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      assertEquals(false, jSTypeArray0[1].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[1].isInterface());
      assertEquals(false, jSTypeArray0[1].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[1].isEnumType());
      assertEquals(false, jSTypeArray0[1].isNoResolvedType());
      assertEquals(false, jSTypeArray0[1].isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[1]);
      
      jSTypeArray0[2] = (JSType) parameterizedType0;
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(true, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[2]);
      
      jSTypeArray0[3] = (JSType) functionType1;
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, jSTypeArray0[3].isFunctionType());
      assertEquals(false, jSTypeArray0[3].isNoResolvedType());
      assertEquals(false, jSTypeArray0[3].isNoObjectType());
      assertEquals(false, jSTypeArray0[3].isRecordType());
      assertEquals(true, jSTypeArray0[3].isInterface());
      assertEquals(false, jSTypeArray0[3].isResolved());
      assertEquals(false, jSTypeArray0[3].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[3].isStringValueType());
      assertEquals(false, jSTypeArray0[3].isVoidType());
      assertEquals(false, jSTypeArray0[3].isBooleanValueType());
      assertEquals(false, jSTypeArray0[3].isNominalType());
      assertEquals(false, jSTypeArray0[3].isTemplateType());
      assertEquals(false, jSTypeArray0[3].isNullType());
      assertEquals(false, jSTypeArray0[3].isUnionType());
      assertEquals(false, jSTypeArray0[3].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[3].isConstructor());
      assertEquals(false, jSTypeArray0[3].isAllType());
      assertEquals(false, jSTypeArray0[3].isNumberValueType());
      assertEquals(false, jSTypeArray0[3].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[3].isNoType());
      assertEquals(false, jSTypeArray0[3].isEnumType());
      assertEquals(false, jSTypeArray0[3].isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.isInterface());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isStringValueType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[3]);
      
      jSTypeArray0[4] = (JSType) parameterizedType0;
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, jSTypeArray0[4].isBooleanValueType());
      assertEquals(false, jSTypeArray0[4].isStringValueType());
      assertEquals(false, jSTypeArray0[4].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[4].isInterface());
      assertEquals(false, jSTypeArray0[4].isFunctionType());
      assertEquals(false, jSTypeArray0[4].isNoObjectType());
      assertEquals(false, jSTypeArray0[4].isAllType());
      assertEquals(false, jSTypeArray0[4].isResolved());
      assertEquals(false, jSTypeArray0[4].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[4].isCheckedUnknownType());
      assertEquals(true, jSTypeArray0[4].isConstructor());
      assertEquals(false, jSTypeArray0[4].isUnionType());
      assertEquals(false, jSTypeArray0[4].isNumberValueType());
      assertEquals(true, jSTypeArray0[4].isNoResolvedType());
      assertEquals(false, jSTypeArray0[4].isRecordType());
      assertEquals(false, jSTypeArray0[4].isTemplateType());
      assertEquals(false, jSTypeArray0[4].isNullType());
      assertEquals(false, jSTypeArray0[4].isNominalType());
      assertEquals(false, jSTypeArray0[4].isVoidType());
      assertEquals(false, jSTypeArray0[4].isEnumType());
      assertEquals(false, jSTypeArray0[4].isNoType());
      assertEquals(false, jSTypeArray0[4].isEnumElementType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[4]);
      
      jSTypeArray0[5] = (JSType) voidType0;
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[5].isUnionType());
      assertEquals(false, jSTypeArray0[5].isNoResolvedType());
      assertEquals(false, jSTypeArray0[5].isNumberValueType());
      assertEquals(false, jSTypeArray0[5].isResolved());
      assertEquals(false, jSTypeArray0[5].isEnumElementType());
      assertEquals(false, jSTypeArray0[5].isConstructor());
      assertEquals(true, jSTypeArray0[5].isVoidType());
      assertEquals(false, jSTypeArray0[5].isRecordType());
      assertEquals(false, jSTypeArray0[5].isNullType());
      assertEquals(false, jSTypeArray0[5].isTemplateType());
      assertEquals(false, jSTypeArray0[5].isNoObjectType());
      assertEquals(false, jSTypeArray0[5].isEnumType());
      assertEquals(false, jSTypeArray0[5].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[5].isFunctionType());
      assertEquals(false, jSTypeArray0[5].isNoType());
      assertEquals(false, jSTypeArray0[5].isInterface());
      assertEquals(false, jSTypeArray0[5].isBooleanValueType());
      assertEquals(false, jSTypeArray0[5].isStringValueType());
      assertEquals(false, jSTypeArray0[5].isNominalType());
      assertEquals(false, jSTypeArray0[5].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[5].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[5].isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[5]);
      
      jSTypeArray0[6] = (JSType) functionType0;
      assertEquals(false, jSTypeArray0[6].isEnumType());
      assertEquals(false, jSTypeArray0[6].isAllType());
      assertEquals(false, jSTypeArray0[6].isUnionType());
      assertEquals(false, jSTypeArray0[6].isTemplateType());
      assertEquals(false, jSTypeArray0[6].isRecordType());
      assertEquals(true, jSTypeArray0[6].isConstructor());
      assertEquals(false, jSTypeArray0[6].isStringValueType());
      assertEquals(false, jSTypeArray0[6].isNominalType());
      assertEquals(false, jSTypeArray0[6].isVoidType());
      assertEquals(false, jSTypeArray0[6].isNoResolvedType());
      assertEquals(false, jSTypeArray0[6].isNoType());
      assertEquals(false, jSTypeArray0[6].isEnumElementType());
      assertEquals(false, jSTypeArray0[6].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[6].isNullType());
      assertEquals(true, jSTypeArray0[6].isFunctionType());
      assertEquals(false, jSTypeArray0[6].isNoObjectType());
      assertEquals(false, jSTypeArray0[6].isInterface());
      assertEquals(false, jSTypeArray0[6].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[6].isNumberValueType());
      assertEquals(false, jSTypeArray0[6].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[6].isBooleanValueType());
      assertEquals(false, jSTypeArray0[6].isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[6]);
      
      UnionType unionType0 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeArray0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(unionType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertNotNull(noObjectType0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithNewThisType((FunctionType) noObjectType0, (ObjectType) noObjectType0);
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertNotNull(functionType0);
      
      String string0 = functionType0.toString();
      assertEquals("function (new:NoObject, ...[?]): NoObject", string0);
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isResolved());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      errorFunctionType0.setInstanceType(templateType0);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.toString());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("\t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.getReferenceName());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = errorFunctionType0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("function (*, *, *): \t\u000B\r \u0085\u1680\u2028\u2029\u205F\u3000", string1);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(nullType0);
      
      String string0 = "4";
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(functionType0);
      
      Node node0 = Node.newString(string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(unresolvedTypeExpression0);
      
      UnionType unionType0 = (UnionType)JSType.safeResolve(unresolvedTypeExpression0, simpleErrorReporter0, functionType0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(false, unionType0.isEnumElementType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isConstructor());
      assertEquals(false, unionType0.isNoResolvedType());
      assertEquals(false, unionType0.isEnumType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNominalType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isCheckedUnknownType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isOrdinaryFunction());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionPrototypeType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isInterface());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(true, unresolvedTypeExpression0.isResolved());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getCharno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertNotNull(unionType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean0 = JSType.isSubtype(functionType0, functionType0);
      assertTrue(boolean0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = 105;
      Node node0 = new Node(int0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      String string0 = "";
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getLeastSupertype((JSType) functionType0);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isInterface());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertNotNull(functionType1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertNotNull(voidType0);
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) voidType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertNotNull(enumType0);
      
      Node node0 = enumType0.getRootNode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isFunctionType());
      assertNotNull(functionType0);
      
      // Undeclared exception!
      try {
        ObjectType objectType0 = functionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNotNull(errorFunctionType0);
      
      // Undeclared exception!
      try {
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      String string0 = "call";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      NoResolvedType noResolvedType1 = (NoResolvedType)FunctionType.getTopDefiningInterface((ObjectType) noResolvedType0, string0);
      assertSame(noResolvedType0, noResolvedType1);
      assertSame(noResolvedType1, noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(false, noResolvedType1.isNullType());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "2U3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) errorFunctionType0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertNull(objectType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ObjectType objectType0 = errorFunctionType0.getParentScope();
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(true, objectType0.isFunctionType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isNominalType());
      assertNotNull(objectType0);
      
      JSType jSType0 = objectType0.getLeastSupertype((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, objectType0.isEnumType());
      assertEquals(false, objectType0.hasCachedValues());
      assertEquals(true, objectType0.isConstructor());
      assertEquals(false, objectType0.isBooleanValueType());
      assertEquals(false, objectType0.isAllType());
      assertEquals(true, objectType0.hasReferenceName());
      assertEquals(false, objectType0.isOrdinaryFunction());
      assertEquals(false, objectType0.isResolved());
      assertEquals(false, objectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, objectType0.isInterface());
      assertEquals(false, objectType0.isEnumElementType());
      assertEquals(false, objectType0.isStringValueType());
      assertEquals(false, objectType0.isNoResolvedType());
      assertEquals(false, objectType0.isUnionType());
      assertEquals(false, objectType0.isNoType());
      assertEquals(false, objectType0.isFunctionPrototypeType());
      assertEquals(false, objectType0.isNullType());
      assertEquals(false, objectType0.isTemplateType());
      assertEquals(false, objectType0.isVoidType());
      assertEquals(false, objectType0.isNumberValueType());
      assertEquals(true, objectType0.isFunctionType());
      assertEquals(false, objectType0.isCheckedUnknownType());
      assertEquals(false, objectType0.isNoObjectType());
      assertEquals(true, objectType0.isNativeObjectType());
      assertEquals(false, objectType0.isNominalType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isVoidType());
      assertNotNull(jSType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertNotNull(voidType0);
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) voidType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertNotNull(enumType0);
      
      Node node0 = enumType0.getRootNode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertNotNull(functionType0);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      JSType jSType0 = enumType0.getNativeType(jSTypeNative0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertNotNull(jSType0);
      
      JSType jSType1 = functionType0.getLeastSupertype(jSType0);
      assertSame(jSType0, jSType1);
      assertSame(jSType1, jSType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType1.isResolved());
      assertEquals(false, jSType1.isNoObjectType());
      assertEquals(false, jSType1.isVoidType());
      assertEquals(false, jSType1.isTemplateType());
      assertEquals(false, jSType1.isCheckedUnknownType());
      assertEquals(false, jSType1.isNullType());
      assertEquals(false, jSType1.isBooleanValueType());
      assertEquals(false, jSType1.isUnionType());
      assertEquals(false, jSType1.isNumberValueType());
      assertEquals(false, jSType1.isFunctionPrototypeType());
      assertEquals(false, jSType1.isNoResolvedType());
      assertEquals(false, jSType1.isInterface());
      assertEquals(false, jSType1.isNoType());
      assertEquals(false, jSType1.isOrdinaryFunction());
      assertEquals(false, jSType1.isRecordType());
      assertEquals(false, jSType1.isEnumElementType());
      assertEquals(false, jSType1.isStringValueType());
      assertEquals(false, jSType1.isAllType());
      assertEquals(true, jSType1.isFunctionType());
      assertEquals(true, jSType1.isConstructor());
      assertEquals(false, jSType1.isEnumType());
      assertEquals(false, jSType1.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isAllType());
      assertNotNull(jSType1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[0] = (JSType) errorFunctionType0;
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isTemplateType());
      assertEquals(true, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(true, jSTypeArray0[0].isFunctionType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[0]);
      
      jSTypeArray0[1] = (JSType) parameterizedType0;
      assertEquals(false, jSTypeArray0[1].isNoType());
      assertEquals(false, jSTypeArray0[1].isInterface());
      assertEquals(false, jSTypeArray0[1].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[1].isAllType());
      assertEquals(false, jSTypeArray0[1].isVoidType());
      assertEquals(false, jSTypeArray0[1].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[1].isNoObjectType());
      assertEquals(false, jSTypeArray0[1].isEnumElementType());
      assertEquals(false, jSTypeArray0[1].isNominalType());
      assertEquals(true, jSTypeArray0[1].isConstructor());
      assertEquals(false, jSTypeArray0[1].isNullType());
      assertEquals(false, jSTypeArray0[1].isStringValueType());
      assertEquals(false, jSTypeArray0[1].isEnumType());
      assertEquals(false, jSTypeArray0[1].isRecordType());
      assertEquals(false, jSTypeArray0[1].isBooleanValueType());
      assertEquals(true, jSTypeArray0[1].isFunctionType());
      assertEquals(false, jSTypeArray0[1].isNumberValueType());
      assertEquals(false, jSTypeArray0[1].isNoResolvedType());
      assertEquals(false, jSTypeArray0[1].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[1].isResolved());
      assertEquals(false, jSTypeArray0[1].isTemplateType());
      assertEquals(false, jSTypeArray0[1].isUnionType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[1]);
      
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getGreatestSubtype(jSTypeArray0[2]);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.hasInstanceType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
      
      FunctionType functionType2 = (FunctionType)functionType1.getLeastSupertype((JSType) functionType0);
      assertNotSame(functionType2, functionType1);
      assertSame(functionType2, functionType0);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType0, functionType1);
      assertSame(functionType0, functionType2);
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertNull(functionType2.getTemplateTypeName());
      assertEquals(false, functionType2.isEnumType());
      assertEquals(false, functionType2.isResolved());
      assertEquals(false, functionType2.isCheckedUnknownType());
      assertEquals(3, functionType2.getMaxArguments());
      assertEquals(true, functionType2.canBeCalled());
      assertEquals(false, functionType2.isReturnTypeInferred());
      assertEquals(false, functionType2.isNominalType());
      assertEquals(false, functionType2.isEnumElementType());
      assertEquals(false, functionType2.isNoObjectType());
      assertEquals(false, functionType2.isNoResolvedType());
      assertEquals(true, functionType2.hasCachedValues());
      assertEquals(false, functionType2.isNoType());
      assertEquals(true, functionType2.isFunctionType());
      assertEquals(false, functionType2.isUnionType());
      assertEquals(false, functionType2.isAllType());
      assertEquals(false, functionType2.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType2.isFunctionPrototypeType());
      assertEquals(false, functionType2.isVoidType());
      assertEquals(false, functionType2.hasInstanceType());
      assertEquals(false, functionType2.isStringValueType());
      assertEquals(false, functionType2.isTemplateType());
      assertEquals(false, functionType2.isNumberValueType());
      assertEquals(false, functionType2.isRecordType());
      assertEquals(false, functionType2.isBooleanValueType());
      assertEquals(false, functionType2.isConstructor());
      assertEquals(true, functionType2.isOrdinaryFunction());
      assertEquals(false, functionType2.isInterface());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.hasInstanceType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNominalType());
      assertNotNull(functionType2);
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType0.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(errorFunctionType0);
      
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.toString());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(templateType0);
      
      boolean boolean0 = false;
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderShallowEquality((JSType) templateType0);
      assertEquals(false, templateType0.isUnionType());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.toString());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(jSType_TypePair0);
      
      boolean boolean1 = jSTypeRegistry0.resetImplicitPrototype((JSType) errorFunctionType0, (ObjectType) errorFunctionType0);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertTrue(boolean1 == boolean0);
      
      JSType[] jSTypeArray0 = new JSType[3];
      String string1 = errorFunctionType0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("function (new:\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000, *, *, *): \t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) errorFunctionType0, boolean0, jSTypeArray0);
      assertNotSame(string0, string1);
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(functionType0);
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 8239;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(8239, node0.getType());
      assertEquals(-2147479553, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33751039, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8239, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(8239, node0.getType());
      assertEquals(-2147479553, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33751039, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8239, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(unresolvedTypeExpression0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Node node1 = unresolvedTypeExpression0.getRootNode();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(8239, node0.getType());
      assertEquals(-2147479553, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33751039, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8239, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNull(node1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      ArrowType arrowType0 = new ArrowType(jSTypeRegistry0, node1, jSTypeArray0[1]);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(8239, node0.getType());
      assertEquals(-2147479553, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33751039, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8239, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(arrowType0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      FunctionType functionType1 = new FunctionType(jSTypeRegistry0, string0, node1, arrowType0, errorFunctionType0, string0, boolean1, boolean1);
      assertNotSame(functionType1, functionType0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isNullType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(8239, node0.getType());
      assertEquals(-2147479553, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33751039, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8239, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      FunctionType functionType2 = (FunctionType)functionType1.getGreatestSubtype((JSType) functionType0);
      assertNotSame(functionType1, functionType2);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType0, functionType2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(functionType2, functionType1);
      assertNotSame(functionType2, functionType0);
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isNullType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, functionType2.isNoResolvedType());
      assertEquals(2147483647, functionType2.getMaxArguments());
      assertEquals(true, functionType2.canBeCalled());
      assertEquals(false, functionType2.isNullType());
      assertEquals(false, functionType2.isEnumElementType());
      assertEquals(false, functionType2.isNominalType());
      assertEquals(false, functionType2.isNoObjectType());
      assertEquals(true, functionType2.isOrdinaryFunction());
      assertEquals(false, functionType2.hasCachedValues());
      assertEquals(false, functionType2.isStringValueType());
      assertEquals(false, functionType2.hasInstanceType());
      assertEquals(false, functionType2.isVoidType());
      assertEquals(0, functionType2.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, functionType2.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType2.isReturnTypeInferred());
      assertEquals(false, functionType2.isEnumType());
      assertEquals(false, functionType2.isAllType());
      assertEquals(false, functionType2.isCheckedUnknownType());
      assertEquals(false, functionType2.isNoType());
      assertEquals(false, functionType2.isInterface());
      assertEquals(false, functionType2.isTemplateType());
      assertEquals(false, functionType2.isConstructor());
      assertEquals(false, functionType2.isRecordType());
      assertEquals(false, functionType2.isBooleanValueType());
      assertEquals(false, functionType2.isNumberValueType());
      assertEquals(false, functionType2.isUnionType());
      assertEquals(false, functionType2.isFunctionPrototypeType());
      assertEquals(false, functionType2.isResolved());
      assertNull(functionType2.getTemplateTypeName());
      assertEquals(true, functionType2.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(8239, node0.getType());
      assertEquals(-2147479553, node0.getSourceOffset());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33751039, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(8239, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(4095, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertNotNull(functionType2);
      assertFalse(functionType1.equals((Object)functionType2));
      assertFalse(functionType1.equals((Object)functionType0));
      assertTrue(boolean1 == boolean0);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType0.equals((Object)functionType2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0 == boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(functionType2.equals((Object)functionType1));
      assertFalse(functionType2.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(parameterizedType0);
      
      boolean boolean0 = false;
      JSType[] jSTypeArray0 = new JSType[3];
      jSTypeArray0[2] = (JSType) errorFunctionType0;
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSTypeArray0[2].isEnumElementType());
      assertEquals(false, jSTypeArray0[2].isStringValueType());
      assertEquals(false, jSTypeArray0[2].isAllType());
      assertEquals(false, jSTypeArray0[2].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[2].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[2].isNoResolvedType());
      assertEquals(false, jSTypeArray0[2].isRecordType());
      assertEquals(false, jSTypeArray0[2].isVoidType());
      assertEquals(false, jSTypeArray0[2].isInterface());
      assertEquals(false, jSTypeArray0[2].isTemplateType());
      assertEquals(true, jSTypeArray0[2].isConstructor());
      assertEquals(false, jSTypeArray0[2].isNoObjectType());
      assertEquals(false, jSTypeArray0[2].isBooleanValueType());
      assertEquals(false, jSTypeArray0[2].isNumberValueType());
      assertEquals(false, jSTypeArray0[2].isNullType());
      assertEquals(false, jSTypeArray0[2].isUnionType());
      assertEquals(false, jSTypeArray0[2].isNoType());
      assertEquals(false, jSTypeArray0[2].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[2].isResolved());
      assertEquals(true, jSTypeArray0[2].isFunctionType());
      assertEquals(false, jSTypeArray0[2].isEnumType());
      assertEquals(false, jSTypeArray0[2].isNominalType());
      assertNotNull(jSTypeArray0[2]);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) parameterizedType0, boolean0, jSTypeArray0);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      FunctionType functionType1 = (FunctionType)functionType0.getGreatestSubtype(jSTypeArray0[2]);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isInterface());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
      
      JSType jSType0 = functionType1.getLeastSupertype((JSType) functionType0);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isInterface());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(true, functionType1.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(3, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(voidType0);
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) voidType0);
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isInterface());
      assertNotNull(enumType0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNotNull(noResolvedType0);
      
      EnumType enumType1 = (EnumType)noResolvedType0.getLeastSupertype((JSType) enumType0);
      assertSame(enumType1, enumType0);
      assertSame(enumType0, enumType1);
      assertEquals(true, voidType0.isVoidType());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isNoType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, enumType1.isNullType());
      assertEquals(false, enumType1.isTemplateType());
      assertEquals(false, enumType1.isStringValueType());
      assertEquals(false, enumType1.isBooleanValueType());
      assertEquals(false, enumType1.isResolved());
      assertEquals(false, enumType1.isInterface());
      assertEquals(false, enumType1.isEnumElementType());
      assertEquals(false, enumType1.matchesNumberContext());
      assertEquals(false, enumType1.isNoType());
      assertEquals(false, enumType1.isFunctionType());
      assertEquals(false, enumType1.isNoObjectType());
      assertEquals(false, enumType1.isNoResolvedType());
      assertEquals(true, enumType1.matchesStringContext());
      assertEquals(true, enumType1.matchesObjectContext());
      assertEquals(false, enumType1.isVoidType());
      assertEquals(true, enumType1.isEnumType());
      assertEquals(false, enumType1.isNumberValueType());
      assertEquals(false, enumType1.isFunctionPrototypeType());
      assertEquals(false, enumType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, enumType1.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType1.isCheckedUnknownType());
      assertEquals(false, enumType1.isConstructor());
      assertEquals(false, enumType1.isOrdinaryFunction());
      assertEquals(false, enumType1.isUnionType());
      assertEquals(false, enumType1.isRecordType());
      assertEquals(false, enumType1.isAllType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isInterface());
      assertNotNull(enumType1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertNotNull(nullType0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertNotNull(functionType0);
      
      String string0 = "apply";
      FunctionType functionType1 = (FunctionType)functionType0.getPropertyType(string0);
      assertNotSame(functionType0, functionType1);
      assertNotSame(functionType1, functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(2, functionType1.getMaxArguments());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isNoResolvedType());
      assertNotNull(functionType1);
      assertFalse(functionType0.equals((Object)functionType1));
      assertFalse(functionType1.equals((Object)functionType0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      int int0 = 105;
      Node node0 = new Node(int0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertNotNull(node0);
      
      String string0 = "";
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertNotNull(functionType0);
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      functionType0.setExtendedInterfaces((List<ObjectType>) linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(105, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Vector<ObjectType> vector0 = new Vector<ObjectType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      try {
        noResolvedType0.setExtendedInterfaces((List<ObjectType>) vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getAllExtendedInterfaces();
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      Stack<ObjectType> stack0 = new Stack<ObjectType>();
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      functionType0.setImplementedInterfaces((List<ObjectType>) stack0);
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      Iterable<ObjectType> iterable0 = errorFunctionType0.getAllImplementedInterfaces();
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(noResolvedType0);
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.setPrototype((PrototypeObjectType) noResolvedType0);
      assertTrue(boolean0);
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNotNull(errorFunctionType0);
      
      int int0 = 3;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNotNull(namedType0);
      
      FunctionType functionType0 = namedType0.getConstructor();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertNull(functionType0);
      
      boolean boolean0 = errorFunctionType0.setPrototype((PrototypeObjectType) functionType0);
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isFunctionPrototypeType());
      assertEquals(false, namedType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "{";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertNotNull(nullType0);
      
      JSType[] jSTypeArray0 = new JSType[16];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(16, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertNotNull(functionType0);
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNotNull(errorFunctionType0);
      
      errorFunctionType0.setPrototypeBasedOn((ObjectType) functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(16, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      String string0 = "j";
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(functionType0);
      
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertNotNull(unresolvedTypeExpression0);
      
      functionType0.setPrototypeBasedOn((ObjectType) unresolvedTypeExpression0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertNotNull(parameterizedType0);
      
      Set<String> set0 = parameterizedType0.getOwnPropertyNames();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNotNull(errorFunctionType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) errorFunctionType0);
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNotNull(parameterizedType0);
      
      String string1 = errorFunctionType0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("function (new:\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000, *, *, *): \t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", string1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set0 = parameterizedType0.getOwnPropertyNames();
      assertNotSame(string0, string1);
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(true, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNotNull(set0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isInterface());
      assertNotNull(nullType0);
      
      String string0 = "4";
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertNotNull(functionType0);
      
      Node node0 = Node.newString(string0);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      String string1 = node0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("STRING 4", string1);
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      UnknownType unknownType0 = (UnknownType)functionType0.getPropertyType(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isInterface());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertNotNull(unknownType0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "...[";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNotNull(noResolvedType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) noResolvedType0, (JSType) noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertNotNull(parameterizedType0);
      
      Node node0 = parameterizedType0.getRootNode();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isEnumElementType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isFunctionPrototypeType());
      assertEquals(false, parameterizedType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "2U3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(3, int0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertNotNull(voidType0);
      
      String string0 = "AI/Vcu_w5u_5h";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) voidType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertNotNull(enumType0);
      
      JSType[] jSTypeArray0 = new JSType[5];
      jSTypeArray0[4] = (JSType) enumType0;
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, jSTypeArray0[4].isAllType());
      assertEquals(false, jSTypeArray0[4].isNullType());
      assertEquals(false, jSTypeArray0[4].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[4].isResolved());
      assertEquals(false, jSTypeArray0[4].isNominalType());
      assertEquals(false, jSTypeArray0[4].isNoType());
      assertEquals(false, jSTypeArray0[4].isCheckedUnknownType());
      assertEquals(true, jSTypeArray0[4].isEnumType());
      assertEquals(false, jSTypeArray0[4].isRecordType());
      assertEquals(false, jSTypeArray0[4].isStringValueType());
      assertEquals(false, jSTypeArray0[4].isFunctionType());
      assertEquals(false, jSTypeArray0[4].isUnionType());
      assertEquals(false, jSTypeArray0[4].isNumberValueType());
      assertEquals(false, jSTypeArray0[4].isEnumElementType());
      assertEquals(false, jSTypeArray0[4].isInterface());
      assertEquals(false, jSTypeArray0[4].isTemplateType());
      assertEquals(false, jSTypeArray0[4].isBooleanValueType());
      assertEquals(false, jSTypeArray0[4].isNoResolvedType());
      assertEquals(false, jSTypeArray0[4].isNoObjectType());
      assertEquals(false, jSTypeArray0[4].isVoidType());
      assertEquals(false, jSTypeArray0[4].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[4].isConstructor());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertNotNull(jSTypeArray0[4]);
      
      FunctionType functionType0 = jSTypeRegistry0.createConstructorTypeWithVarArgs((JSType) voidType0, jSTypeArray0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
      assertNotNull(functionType0);
      
      int int0 = functionType0.getMinArguments();
      assertEquals(4, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNominalType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "2U3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      int int0 = errorFunctionType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isConstructor());
      assertNotNull(nullType0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isConstructor());
      assertNotNull(functionType0);
      
      boolean boolean0 = functionType0.hasImplementedInterfaces();
      assertFalse(boolean0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(true, nullType0.isNullable());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
      assertNotNull(noResolvedType0);
      
      boolean boolean0 = noResolvedType0.hasImplementedInterfaces();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "9N:{W<uPiN-R6@*_";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("9N:{W<uPiN-R6@*_", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("9N:{W<uPiN-R6@*_", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isRecordType());
      assertNotNull(templateType0);
      
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      jSTypeRegistry0.registerTypeImplementingInterface(functionType0, templateType0);
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals("9N:{W<uPiN-R6@*_", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals("9N:{W<uPiN-R6@*_", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, templateType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      String string0 = "4";
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(functionType0);
      
      Node node0 = Node.newString(string0);
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      String string1 = node0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("STRING 4", string1);
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      // Undeclared exception!
      try {
        ObjectType objectType0 = functionType0.getTopMostDefiningType(string1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = null;
      Node node0 = null;
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "j";
      Node node0 = Node.newString(string0);
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isNoResolvedType());
      assertEquals(false, stringType0.isAllType());
      assertEquals("string", stringType0.toString());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals("string", stringType0.getDisplayName());
      assertEquals(false, stringType0.isCheckedUnknownType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isEnumType());
      assertEquals(false, stringType0.isInterface());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isConstructor());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isOrdinaryFunction());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isEnumElementType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isNominalType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isFunctionPrototypeType());
      assertNotNull(stringType0);
      
      String string0 = "2*R_2}<`(i}P_}3'";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(errorFunctionType0);
      
      Node node0 = errorFunctionType0.getParametersNode();
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) stringType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isInstanceType();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ErrorFunctionType[] errorFunctionTypeArray0 = new ErrorFunctionType[7];
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "2U3";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNotNull(errorFunctionType0);
      
      errorFunctionTypeArray0[0] = errorFunctionType0;
      assertEquals(3, errorFunctionTypeArray0[0].getMaxArguments());
      assertEquals(false, errorFunctionTypeArray0[0].isUnionType());
      assertEquals(false, errorFunctionTypeArray0[0].isEnumType());
      assertEquals(false, errorFunctionTypeArray0[0].isReturnTypeInferred());
      assertEquals(true, errorFunctionTypeArray0[0].isFunctionType());
      assertEquals(false, errorFunctionTypeArray0[0].isInterface());
      assertEquals(0, errorFunctionTypeArray0[0].getExtendedInterfacesCount());
      assertEquals(false, errorFunctionTypeArray0[0].isRecordType());
      assertEquals(true, errorFunctionTypeArray0[0].hasInstanceType());
      assertEquals(false, errorFunctionTypeArray0[0].hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionTypeArray0[0].getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, errorFunctionTypeArray0[0].isBooleanValueType());
      assertEquals(false, errorFunctionTypeArray0[0].isAllType());
      assertEquals(true, errorFunctionTypeArray0[0].canBeCalled());
      assertEquals(false, errorFunctionTypeArray0[0].isNumberValueType());
      assertEquals(false, errorFunctionTypeArray0[0].isNoObjectType());
      assertEquals(false, errorFunctionTypeArray0[0].isNominalType());
      assertEquals(true, errorFunctionTypeArray0[0].isConstructor());
      assertEquals(false, errorFunctionTypeArray0[0].isStringValueType());
      assertEquals(false, errorFunctionTypeArray0[0].isNoType());
      assertEquals(false, errorFunctionTypeArray0[0].isResolved());
      assertEquals(false, errorFunctionTypeArray0[0].isNullType());
      assertEquals(false, errorFunctionTypeArray0[0].isOrdinaryFunction());
      assertNull(errorFunctionTypeArray0[0].getTemplateTypeName());
      assertEquals(false, errorFunctionTypeArray0[0].isVoidType());
      assertEquals(false, errorFunctionTypeArray0[0].isEnumElementType());
      assertEquals(false, errorFunctionTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, errorFunctionTypeArray0[0].isTemplateType());
      assertEquals(false, errorFunctionTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertNotNull(errorFunctionTypeArray0[0]);
      
      errorFunctionTypeArray0[3] = errorFunctionTypeArray0[0];
      assertEquals(true, errorFunctionTypeArray0[3].isConstructor());
      assertEquals(false, errorFunctionTypeArray0[3].isTemplateType());
      assertEquals(false, errorFunctionTypeArray0[3].isCheckedUnknownType());
      assertEquals(false, errorFunctionTypeArray0[3].isFunctionPrototypeType());
      assertEquals(0, errorFunctionTypeArray0[3].getExtendedInterfacesCount());
      assertNull(errorFunctionTypeArray0[3].getTemplateTypeName());
      assertEquals(false, errorFunctionTypeArray0[3].hasCachedValues());
      assertEquals(true, errorFunctionTypeArray0[3].hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionTypeArray0[3].getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionTypeArray0[3].getMaxArguments());
      assertEquals(false, errorFunctionTypeArray0[3].isNoObjectType());
      assertEquals(false, errorFunctionTypeArray0[3].isNumberValueType());
      assertEquals(false, errorFunctionTypeArray0[3].isNominalType());
      assertEquals(false, errorFunctionTypeArray0[3].isNoResolvedType());
      assertEquals(false, errorFunctionTypeArray0[3].isOrdinaryFunction());
      assertEquals(false, errorFunctionTypeArray0[3].isNoType());
      assertEquals(false, errorFunctionTypeArray0[3].isResolved());
      assertEquals(true, errorFunctionTypeArray0[3].isFunctionType());
      assertEquals(false, errorFunctionTypeArray0[3].isBooleanValueType());
      assertEquals(false, errorFunctionTypeArray0[3].isStringValueType());
      assertEquals(false, errorFunctionTypeArray0[3].isVoidType());
      assertEquals(false, errorFunctionTypeArray0[3].isEnumType());
      assertEquals(true, errorFunctionTypeArray0[3].canBeCalled());
      assertEquals(false, errorFunctionTypeArray0[3].isInterface());
      assertEquals(false, errorFunctionTypeArray0[3].isAllType());
      assertEquals(false, errorFunctionTypeArray0[3].isRecordType());
      assertEquals(false, errorFunctionTypeArray0[3].isReturnTypeInferred());
      assertEquals(false, errorFunctionTypeArray0[3].isUnionType());
      assertEquals(false, errorFunctionTypeArray0[3].isEnumElementType());
      assertEquals(false, errorFunctionTypeArray0[3].isNullType());
      assertNotNull(errorFunctionTypeArray0[3]);
      
      boolean boolean0 = errorFunctionTypeArray0[3].hasEqualCallType((FunctionType) errorFunctionTypeArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNotNull(noResolvedType0);
      
      int int0 = noResolvedType0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.isReturnTypeInferred();
      assertFalse(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(errorFunctionType0);
      
      boolean boolean0 = errorFunctionType0.canBeCalled();
      assertTrue(boolean0);
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumType());
      assertNotNull(voidType0);
      
      String string0 = "";
      EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) voidType0);
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumType());
      assertNotNull(enumType0);
      
      Node node0 = enumType0.getRootNode();
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumType());
      assertNull(node0);
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertNotNull(functionType0);
      
      functionType0.setSource(node0);
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isFunctionPrototypeType());
      assertEquals(false, enumType0.isNoResolvedType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isOrdinaryFunction());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isConstructor());
      assertEquals(false, enumType0.isNominalType());
      assertEquals(false, enumType0.isNoType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isInterface());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, enumType0.isEnumElementType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isConstructor());
      assertEquals("undefined", voidType0.getDisplayName());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNominalType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEnumElementType());
      assertEquals(false, voidType0.isOrdinaryFunction());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isCheckedUnknownType());
      assertEquals(false, voidType0.isFunctionPrototypeType());
      assertEquals(false, voidType0.isInterface());
      assertEquals(false, voidType0.isNoResolvedType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(nullType0);
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) nullType0, (List<JSType>) vector0);
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(functionType0);
      
      List<FunctionType> list0 = functionType0.getSubTypes();
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isConstructor());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isOrdinaryFunction());
      assertEquals("null", nullType0.getDisplayName());
      assertEquals(false, nullType0.isNoResolvedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isEnumType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isCheckedUnknownType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEnumElementType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isFunctionPrototypeType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isConstructor());
      assertEquals(false, nullType0.isInterface());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(list0);
  }
}
