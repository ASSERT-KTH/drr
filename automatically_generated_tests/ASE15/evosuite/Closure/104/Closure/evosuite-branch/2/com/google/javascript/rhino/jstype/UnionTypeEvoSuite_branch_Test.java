/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:34:30 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionPrototypeType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      
      EmptyScope emptyScope0 = new EmptyScope();
      //  // Unstable assertion: assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)unionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      //  // Unstable assertion: assertNotNull(unionType1);
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(true, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, unionType1.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType1.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType1.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType1.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType1.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType1.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType1.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType1.isStringValueType());
      //  // Unstable assertion: assertEquals(true, unionType1.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoType());
      //  // Unstable assertion: assertEquals(true, unionType1.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType1.isNoObjectType());
      //  // Unstable assertion: assertSame(unionType0, unionType1);
      //  // Unstable assertion: assertSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      String string0 = "";
      int int0 = 4342;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals("", namedType0.toString());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      
      boolean boolean0 = hashSet0.add((JSType) namedType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals("", namedType0.toString());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNullType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)unionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertNotNull(unionType1);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      
      JSType jSType0 = errorFunctionType0.getParameterType();
      //  // Unstable assertion: assertNull(jSType0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality(jSType0);
      //  // Unstable assertion: assertNotNull(jSType_TypePair0);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals("string", stringType0.toString());
      
      UnionType unionType0 = (UnionType)nullType0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      
      JSType.TypePair jSType_TypePair0 = stringType0.getTypesUnderShallowInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals("string", stringType0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      
      boolean boolean0 = hashSet0.add((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[function (this:, *, *, *): ]", hashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[function (this:, *, *, *): ]", hashSet0.toString());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) nullType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[function (this:, *, *, *): ]", hashSet0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) nullType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.TOP_LEVEL_PROTOTYPE;
      FunctionPrototypeType functionPrototypeType0 = (FunctionPrototypeType)jSTypeRegistry0.getNativeType(jSTypeNative0);
      //  // Unstable assertion: assertNotNull(functionPrototypeType0);
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) functionPrototypeType0);
      //  // Unstable assertion: assertNotNull(jSType_TypePair0);
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.hasReferenceName());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isResolved());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNoType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNullType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isAllType());
      //  // Unstable assertion: assertEquals(false, functionPrototypeType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) noObjectType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertTrue(boolean0);
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) errorFunctionType0);
      assertNotNull(jSType_TypePair0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(1, booleanLiteralSet0.ordinal());
      //  // Unstable assertion: assertEquals("TRUE", booleanLiteralSet0.name());
      //  // Unstable assertion: assertEquals("TRUE", booleanLiteralSet0.toString());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) allType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isFunctionType());
      assertTrue(boolean0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) numberType0);
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      
      NumberType numberType1 = (NumberType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(numberType1);
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals("number", numberType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals(false, numberType1.isNamedType());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isRecordType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isAllType());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals("number", numberType1.toString());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isEmptyType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isBooleanValueType());
      assertSame(numberType0, numberType1);
      assertSame(numberType1, numberType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[0].toString());
      assertEquals(41, jSTypeNativeArray0[0].ordinal());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(41, jSTypeNativeArray0[1].ordinal());
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[3] = jSTypeNative0;
      assertEquals(41, jSTypeNativeArray0[3].ordinal());
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[3].toString());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[2].name());
      assertEquals(41, jSTypeNativeArray0[2].ordinal());
      
      UnionType unionType1 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals("[(Number|number)]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertTrue(boolean0);
      
      String string0 = unionType0.toString();
      assertNotNull(string0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[(Number|number)]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      assertEquals("((Number|number))", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType1.getRestrictedUnion((JSType) unionType0);
      assertNotNull(noType0);
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNullType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getReferenceName());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals("None", noType0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
  }

  @Test(timeout = 4000)
  public void test13() {}
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
//       assertNotNull(linkedHashSet0);
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
//       assertNotNull(unionType0);
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       
//       JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[4];
//       JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
//       jSTypeNativeArray0[0] = jSTypeNative0;
//       assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[0].name());
//       assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[0].toString());
//       assertEquals(41, jSTypeNativeArray0[0].ordinal());
//       
//       jSTypeNativeArray0[3] = jSTypeNative0;
//       assertEquals(41, jSTypeNativeArray0[3].ordinal());
//       assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[3].toString());
//       assertEquals("NUMBER_VALUE_OR_OBJECT_TYPE", jSTypeNativeArray0[3].name());
//       
//       JSTypeNative jSTypeNative1 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
//       assertNotSame(jSTypeNative1, jSTypeNative0);
//       
//       jSTypeNativeArray0[1] = jSTypeNativeArray0[0];
//       assertEquals("BOOLEAN_TYPE", jSTypeNativeArray0[1].name());
//       assertEquals("BOOLEAN_TYPE", jSTypeNativeArray0[1].toString());
//       assertEquals(2, jSTypeNativeArray0[1].ordinal());
//       
//       jSTypeNativeArray0[2] = jSTypeNative1;
//       assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].name());
//       assertEquals(46, jSTypeNativeArray0[2].ordinal());
//       assertEquals("U2U_CONSTRUCTOR_TYPE", jSTypeNativeArray0[2].toString());
//       
//       JSTypeNative jSTypeNative2 = JSTypeNative.BOOLEAN_TYPE;
//       assertNotSame(jSTypeNative2, jSTypeNative0);
//       assertNotSame(jSTypeNative2, jSTypeNative1);
//       
//       jSTypeNativeArray0[1] = jSTypeNative2;
//       UnionType unionType1 = (UnionType)jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
//       assertNotNull(unionType1);
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unionType1, unionType0);
//       
//       boolean boolean0 = linkedHashSet0.add((JSType) unionType1);
//       assertEquals("[(Function|Number|boolean|number)]", linkedHashSet0.toString());
//       assertEquals(1, linkedHashSet0.size());
//       assertEquals(false, linkedHashSet0.isEmpty());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unionType1, unionType0);
//       assertTrue(boolean0);
//       
//       TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) unionType0);
//       assertEquals("[(Function|Number|boolean|number)]", linkedHashSet0.toString());
//       assertEquals(1, linkedHashSet0.size());
//       assertEquals(false, linkedHashSet0.isEmpty());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals("unknown", ternaryValue0.toString());
//       assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
//       assertEquals("UNKNOWN", ternaryValue0.name());
//       assertEquals(2, ternaryValue0.ordinal());
//       assertFalse(unionType0.equals((Object)unionType1));
//       assertNotSame(unionType0, unionType1);
//   }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      //  // Unstable assertion: assertNotNull(treeSet0);
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = unionType0.equals((Object) linkedHashSet0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(noType0);
      assertNotNull(noObjectType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isEmptyType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isConstructor());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = (UnionType)nullType0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals("[]", treeSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      NoType noType0 = (NoType)unionType1.meet(unionType0);
      assertNotNull(noType0);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNoObjectType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNullType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) noObjectType0);
      assertEquals(true, noObjectType0.matchesStringContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.meet(unionType0);
      assertNotNull(noObjectType1);
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(true, noObjectType1.hasCachedValues());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isAllType());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(false, noObjectType1.isStringValueType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertSame(noObjectType1, noObjectType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isTemplateType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
  }

  @Test(timeout = 4000)
  public void test19() {}
//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       
//       NullType nullType0 = new NullType(jSTypeRegistry0);
//       assertNotNull(nullType0);
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isNamedType());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isRecordType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isEmptyType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isStringValueType());
//       
//       String string0 = "";
//       boolean boolean0 = hashSet0.add((JSType) nullType0);
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isNamedType());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isRecordType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isEmptyType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[null]", hashSet0.toString());
//       assertTrue(boolean0);
//       
//       TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
//       assertNotNull(treeSet0);
//       assertEquals("[]", treeSet0.toString());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
//       assertNotNull(unionType0);
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals("[]", treeSet0.toString());
//       
//       UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
//       assertNotNull(unknownType0);
//       assertEquals("??", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals("??", unknownType0.toString());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(true, unknownType0.isCheckedUnknownType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isNamedType());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isRecordType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isEmptyType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[null]", hashSet0.toString());
//       
//       boolean boolean1 = hashSet0.add((JSType) unknownType0);
//       assertEquals("??", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals("??", unknownType0.toString());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(true, unknownType0.isCheckedUnknownType());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(true, nullType0.isNullable());
//       assertEquals(false, nullType0.isNoObjectType());
//       assertEquals(false, nullType0.isResolved());
//       assertEquals("null", nullType0.toString());
//       assertEquals(false, nullType0.isFunctionType());
//       assertEquals(false, nullType0.isNamedType());
//       assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, nullType0.isUnionType());
//       assertEquals(false, nullType0.isRecordType());
//       assertEquals(false, nullType0.isBooleanValueType());
//       assertEquals(false, nullType0.isVoidType());
//       assertEquals(false, nullType0.isAllType());
//       assertEquals(false, nullType0.matchesObjectContext());
//       assertEquals(false, nullType0.isTemplateType());
//       assertEquals(false, nullType0.isEmptyType());
//       assertEquals(true, nullType0.matchesStringContext());
//       assertEquals(true, nullType0.matchesNumberContext());
//       assertEquals(true, nullType0.isNullType());
//       assertEquals(false, nullType0.isNumberValueType());
//       assertEquals(false, nullType0.isNoType());
//       assertEquals(false, nullType0.isStringValueType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[null, ??]", hashSet0.toString());
//       assertTrue(boolean1 == boolean0);
//       assertTrue(boolean0 == boolean1);
//       assertTrue(boolean1);
//       
//       UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType1);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[null, ??]", hashSet0.toString());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isAllType());
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unionType1, unionType0);
//       
//       EnumType enumType0 = jSTypeRegistry0.createEnumType(string0, (JSType) unionType0);
//       assertNotNull(enumType0);
//       assertEquals(false, enumType0.isEmptyType());
//       assertEquals(false, enumType0.isBooleanValueType());
//       assertEquals(false, enumType0.isNamedType());
//       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, enumType0.isNoType());
//       assertEquals(false, enumType0.isNullType());
//       assertEquals(false, enumType0.isVoidType());
//       assertEquals(false, enumType0.matchesNumberContext());
//       assertEquals(true, enumType0.matchesStringContext());
//       assertEquals(false, enumType0.isRecordType());
//       assertEquals(false, enumType0.isNumberValueType());
//       assertEquals(false, enumType0.isUnionType());
//       assertEquals(false, enumType0.isResolved());
//       assertEquals(false, enumType0.isStringValueType());
//       assertEquals(false, enumType0.isAllType());
//       assertEquals(true, enumType0.matchesObjectContext());
//       assertEquals(false, enumType0.isFunctionType());
//       assertEquals(false, enumType0.isNoObjectType());
//       assertEquals(false, enumType0.isTemplateType());
//       assertEquals(true, enumType0.isEnumType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals("[]", treeSet0.toString());
//       assertFalse(unionType0.equals((Object)unionType1));
//       assertNotSame(unionType0, unionType1);
//       
//       UnknownType unknownType1 = (UnknownType)unionType1.getLeastSupertype((JSType) enumType0);
//       assertNotNull(unknownType1);
//       assertEquals(false, enumType0.isEmptyType());
//       assertEquals(false, enumType0.isBooleanValueType());
//       assertEquals(false, enumType0.isNamedType());
//       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, enumType0.isNoType());
//       assertEquals(false, enumType0.isNullType());
//       assertEquals(false, enumType0.isVoidType());
//       assertEquals(false, enumType0.matchesNumberContext());
//       assertEquals(true, enumType0.matchesStringContext());
//       assertEquals(false, enumType0.isRecordType());
//       assertEquals(false, enumType0.isNumberValueType());
//       assertEquals(false, enumType0.isUnionType());
//       assertEquals(false, enumType0.isResolved());
//       assertEquals(false, enumType0.isStringValueType());
//       assertEquals(false, enumType0.isAllType());
//       assertEquals(true, enumType0.matchesObjectContext());
//       assertEquals(false, enumType0.isFunctionType());
//       assertEquals(false, enumType0.isNoObjectType());
//       assertEquals(false, enumType0.isTemplateType());
//       assertEquals(true, enumType0.isEnumType());
//       assertEquals(true, unknownType1.matchesNumberContext());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType1.isUnionType());
//       assertEquals(true, unknownType1.matchesStringContext());
//       assertEquals("??", unknownType1.getReferenceName());
//       assertEquals(true, unknownType1.isUnknownType());
//       assertEquals(false, unknownType1.isNativeObjectType());
//       assertEquals(false, unknownType1.isTemplateType());
//       assertEquals(false, unknownType1.isStringValueType());
//       assertEquals(false, unknownType1.isEmptyType());
//       assertEquals(false, unknownType1.isNoObjectType());
//       assertEquals(false, unknownType1.hasCachedValues());
//       assertEquals(true, unknownType1.isCheckedUnknownType());
//       assertEquals(false, unknownType1.isResolved());
//       assertEquals(false, unknownType1.isVoidType());
//       assertEquals(false, unknownType1.isNamedType());
//       assertEquals(false, unknownType1.isAllType());
//       assertEquals(false, unknownType1.isNullType());
//       assertEquals(2147483647, unknownType1.getPropertiesCount());
//       assertEquals(false, unknownType1.isBooleanValueType());
//       assertEquals(false, unknownType1.hasReferenceName());
//       assertEquals(false, unknownType1.isFunctionType());
//       assertEquals(false, unknownType1.isNoType());
//       assertEquals(false, unknownType1.isRecordType());
//       assertEquals(false, unknownType1.isNumberValueType());
//       assertEquals(true, unknownType1.canBeCalled());
//       assertEquals("??", unknownType1.toString());
//       assertEquals(true, unknownType1.isNullable());
//       assertEquals(true, unknownType1.matchesObjectContext());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[null, ??]", hashSet0.toString());
//       assertEquals(false, unionType1.isNoType());
//       assertEquals(false, unionType1.isBooleanValueType());
//       assertEquals(false, unionType1.isNamedType());
//       assertEquals(false, unionType1.isNullType());
//       assertEquals(false, unionType1.isEmptyType());
//       assertEquals(false, unionType1.isResolved());
//       assertEquals(false, unionType1.isNumberValueType());
//       assertEquals(false, unionType1.isTemplateType());
//       assertEquals(false, unionType1.isRecordType());
//       assertEquals(false, unionType1.isVoidType());
//       assertEquals(true, unionType1.isUnionType());
//       assertEquals(false, unionType1.isNoObjectType());
//       assertEquals(false, unionType1.isFunctionType());
//       assertEquals(false, unionType1.isStringValueType());
//       assertEquals(false, unionType1.isAllType());
//       assertEquals("[]", treeSet0.toString());
//       assertFalse(unknownType1.equals((Object)unknownType0));
//       assertFalse(unionType0.equals((Object)unionType1));
//       assertFalse(unionType1.equals((Object)unionType0));
//       assertNotSame(unknownType1, unknownType0);
//       assertNotSame(unionType0, unionType1);
//       assertNotSame(unionType1, unionType0);
//   }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", treeSet0.toString());
      
      String string0 = "o?Vqw;A";
      int int0 = 51;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("o?Vqw;A", namedType0.toString());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals("o?Vqw;A", namedType0.getReferenceName());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      
      NamedType namedType1 = (NamedType)namedType0.getLeastSupertype((JSType) unionType0);
      assertNotNull(namedType1);
      assertEquals("o?Vqw;A", namedType1.getReferenceName());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(true, namedType1.isNamedType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isEmptyType());
      assertEquals("o?Vqw;A", namedType1.toString());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("o?Vqw;A", namedType0.toString());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals("o?Vqw;A", namedType0.getReferenceName());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isNullType());
      assertSame(namedType1, namedType0);
      assertSame(namedType0, namedType1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      String string0 = "";
      int int0 = 4342;
      NamedType namedType0 = new NamedType(jSTypeRegistry0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals("", namedType0.getReferenceName());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals("", namedType0.toString());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      
      boolean boolean0 = hashSet0.add((JSType) namedType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals("", namedType0.toString());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isRecordType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      
      boolean boolean1 = JSType.isSubtype(unionType0, unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      
      boolean boolean1 = unionType0.isNullable();
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoObjectType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      
      boolean boolean2 = unionType0.isNullable();
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isResolved());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)noObjectType0.getTypeOfThis();
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isResolved());
      
      boolean boolean0 = linkedHashSet0.add((JSType) instanceObjectType0);
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      
      FunctionType functionType0 = errorFunctionType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) functionType0);
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null, function (this:Object, *): ?]", linkedHashSet0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null, function (this:Object, *): ?]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      
      boolean boolean2 = unionType0.canTestForEqualityWith((JSType) noObjectType0);
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.hasCachedValues());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null, function (this:Object, *): ?]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) recordType0);
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNumberValueType());
      assertTrue(boolean0);
      
      RecordType recordType1 = (RecordType)unionType0.dereference();
      assertNotNull(recordType1);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isEmptyType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isNamedType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(false, recordType1.isFunctionType());
      assertSame(recordType1, recordType0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) recordType0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isNoType());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.canBeCalled();
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      //  // Unstable assertion: assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      //  // Unstable assertion: assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      //  // Unstable assertion: assertNotNull(errorFunctionType0);
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) errorFunctionType0);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.hasInstanceType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.hasCachedValues());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(3, errorFunctionType0.getMaxArguments());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isAllType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isInterface());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.canBeCalled());
      //  // Unstable assertion: assertNull(errorFunctionType0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isNamedType());
      //  // Unstable assertion: assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(true, errorFunctionType0.isConstructor());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, errorFunctionType0.isBooleanValueType());
      //  // Unstable assertion: assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      //  // Unstable assertion: assertNotNull(unionType0);
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      
      boolean boolean1 = unionType0.canBeCalled();
      //  // Unstable assertion: assertEquals(1, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[function (this:, *, *, *): ]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(false, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(true, unionType0.isUnionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNamedType());
      //  // Unstable assertion: assertEquals(false, unionType0.isBooleanValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNumberValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isResolved());
      //  // Unstable assertion: assertEquals(false, unionType0.isTemplateType());
      //  // Unstable assertion: assertEquals(false, unionType0.isFunctionType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNoObjectType());
      //  // Unstable assertion: assertEquals(false, unionType0.isEmptyType());
      //  // Unstable assertion: assertEquals(false, unionType0.isVoidType());
      //  // Unstable assertion: assertEquals(false, unionType0.isStringValueType());
      //  // Unstable assertion: assertEquals(false, unionType0.isRecordType());
      //  // Unstable assertion: assertEquals(false, unionType0.isNullType());
      //  // Unstable assertion: assertEquals(false, unionType0.isAllType());
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      String string0 = "F6x/:w4-8S_W{Y";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertNotNull(recordType0);
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EnumType enumType0 = new EnumType(jSTypeRegistry0, string0, unionType0);
      assertNotNull(enumType0);
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", treeSet0.toString());
      assertTrue(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      
      boolean boolean0 = linkedHashSet0.add((JSType) recordType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isNoType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType1.canAssignTo((JSType) enumType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{  }]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, enumType0.isEnumType());
      assertEquals(false, enumType0.isBooleanValueType());
      assertEquals(false, enumType0.isNullType());
      assertEquals(false, enumType0.isNoObjectType());
      assertEquals(false, enumType0.isTemplateType());
      assertEquals(false, enumType0.isEmptyType());
      assertEquals(false, enumType0.isVoidType());
      assertEquals(false, enumType0.isNumberValueType());
      assertEquals(false, enumType0.isResolved());
      assertEquals(false, enumType0.isNoType());
      assertEquals(true, enumType0.matchesObjectContext());
      assertEquals(false, enumType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
      assertEquals(false, enumType0.isNamedType());
      assertEquals(false, enumType0.isFunctionType());
      assertEquals(false, enumType0.matchesNumberContext());
      assertEquals(true, enumType0.matchesStringContext());
      assertEquals(false, enumType0.isAllType());
      assertEquals(false, enumType0.isRecordType());
      assertEquals(false, enumType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", treeSet0.toString());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertNotNull(stringType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.isStringValueType());
      
      boolean boolean0 = true;
      ObjectType objectType0 = stringType0.toObjectType();
      assertNull(objectType0);
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.isStringValueType());
      
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.canBeCalled());
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      
      boolean boolean2 = unionType0.canAssignTo((JSType) objectType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isNoType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals("string", stringType0.toString());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test30() {}
//   @Test(timeout = 4000)
//   public void test30()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(true, hashSet0.isEmpty());
//       
//       String string0 = "";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNamedType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       
//       FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
//       assertNotNull(functionPrototypeType0);
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNamedType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
//       assertEquals(false, functionPrototypeType0.isTemplateType());
//       assertEquals(false, functionPrototypeType0.isNullType());
//       assertEquals(false, functionPrototypeType0.isNoObjectType());
//       assertEquals(false, functionPrototypeType0.isBooleanValueType());
//       assertEquals(false, functionPrototypeType0.isUnionType());
//       assertEquals(false, functionPrototypeType0.isResolved());
//       assertEquals(false, functionPrototypeType0.isNumberValueType());
//       assertEquals(false, functionPrototypeType0.isEmptyType());
//       assertEquals(false, functionPrototypeType0.isVoidType());
//       assertEquals(false, functionPrototypeType0.isStringValueType());
//       assertEquals(false, functionPrototypeType0.isRecordType());
//       assertEquals(false, functionPrototypeType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionPrototypeType0.hasReferenceName());
//       assertEquals(false, functionPrototypeType0.isNamedType());
//       assertEquals(false, functionPrototypeType0.isNoType());
//       assertEquals(false, functionPrototypeType0.isFunctionType());
//       
//       boolean boolean0 = false;
//       NoType noType0 = (NoType)functionPrototypeType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
//       assertNotNull(noType0);
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNamedType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(true, noType0.canBeCalled());
//       assertNull(noType0.getTemplateTypeName());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
//       assertEquals(false, functionPrototypeType0.isTemplateType());
//       assertEquals(false, functionPrototypeType0.isNullType());
//       assertEquals(false, functionPrototypeType0.isNoObjectType());
//       assertEquals(false, functionPrototypeType0.isBooleanValueType());
//       assertEquals(false, functionPrototypeType0.isUnionType());
//       assertEquals(false, functionPrototypeType0.isResolved());
//       assertEquals(false, functionPrototypeType0.isNumberValueType());
//       assertEquals(false, functionPrototypeType0.isEmptyType());
//       assertEquals(false, functionPrototypeType0.isVoidType());
//       assertEquals(false, functionPrototypeType0.isStringValueType());
//       assertEquals(false, functionPrototypeType0.isRecordType());
//       assertEquals(false, functionPrototypeType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionPrototypeType0.hasReferenceName());
//       assertEquals(false, functionPrototypeType0.isNamedType());
//       assertEquals(false, functionPrototypeType0.isNoType());
//       assertEquals(false, functionPrototypeType0.isFunctionType());
//       
//       boolean boolean1 = hashSet0.add((JSType) noType0);
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNamedType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(true, noType0.canBeCalled());
//       assertNull(noType0.getTemplateTypeName());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
//       assertEquals(false, functionPrototypeType0.isTemplateType());
//       assertEquals(false, functionPrototypeType0.isNullType());
//       assertEquals(false, functionPrototypeType0.isNoObjectType());
//       assertEquals(false, functionPrototypeType0.isBooleanValueType());
//       assertEquals(false, functionPrototypeType0.isUnionType());
//       assertEquals(false, functionPrototypeType0.isResolved());
//       assertEquals(false, functionPrototypeType0.isNumberValueType());
//       assertEquals(false, functionPrototypeType0.isEmptyType());
//       assertEquals(false, functionPrototypeType0.isVoidType());
//       assertEquals(false, functionPrototypeType0.isStringValueType());
//       assertEquals(false, functionPrototypeType0.isRecordType());
//       assertEquals(false, functionPrototypeType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionPrototypeType0.hasReferenceName());
//       assertEquals(false, functionPrototypeType0.isNamedType());
//       assertEquals(false, functionPrototypeType0.isNoType());
//       assertEquals(false, functionPrototypeType0.isFunctionType());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[None]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertTrue(boolean1);
//       
//       UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean1);
//       assertNotNull(unknownType0);
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNamedType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(true, noType0.canBeCalled());
//       assertNull(noType0.getTemplateTypeName());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
//       assertEquals(false, functionPrototypeType0.isTemplateType());
//       assertEquals(false, functionPrototypeType0.isNullType());
//       assertEquals(false, functionPrototypeType0.isNoObjectType());
//       assertEquals(false, functionPrototypeType0.isBooleanValueType());
//       assertEquals(false, functionPrototypeType0.isUnionType());
//       assertEquals(false, functionPrototypeType0.isResolved());
//       assertEquals(false, functionPrototypeType0.isNumberValueType());
//       assertEquals(false, functionPrototypeType0.isEmptyType());
//       assertEquals(false, functionPrototypeType0.isVoidType());
//       assertEquals(false, functionPrototypeType0.isStringValueType());
//       assertEquals(false, functionPrototypeType0.isRecordType());
//       assertEquals(false, functionPrototypeType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionPrototypeType0.hasReferenceName());
//       assertEquals(false, functionPrototypeType0.isNamedType());
//       assertEquals(false, functionPrototypeType0.isNoType());
//       assertEquals(false, functionPrototypeType0.isFunctionType());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[None]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(true, unknownType0.isCheckedUnknownType());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals("??", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals("??", unknownType0.toString());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertFalse(boolean0 == boolean1);
//       assertFalse(boolean1 == boolean0);
//       
//       boolean boolean2 = hashSet0.add((JSType) unknownType0);
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNamedType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isEmptyType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(2147483647, noType0.getMaxArguments());
//       assertEquals(false, noType0.isVoidType());
//       assertEquals(true, noType0.matchesStringContext());
//       assertEquals(false, noType0.isFunctionType());
//       assertEquals(false, noType0.isNoObjectType());
//       assertEquals(true, noType0.canBeCalled());
//       assertNull(noType0.getTemplateTypeName());
//       assertNull(noType0.getReferenceName());
//       assertEquals(false, noType0.isNullType());
//       assertEquals(false, noType0.isOrdinaryFunction());
//       assertEquals(true, noType0.matchesNumberContext());
//       assertEquals(false, noType0.isResolved());
//       assertEquals(false, noType0.isNumberValueType());
//       assertEquals(true, noType0.isConstructor());
//       assertEquals(true, noType0.isNoType());
//       assertEquals(true, noType0.matchesObjectContext());
//       assertEquals(true, noType0.isNullable());
//       assertEquals(false, noType0.isUnionType());
//       assertEquals(false, noType0.isAllType());
//       assertEquals(false, noType0.isNamedType());
//       assertEquals(false, noType0.isRecordType());
//       assertEquals(false, noType0.isInterface());
//       assertEquals(true, noType0.hasInstanceType());
//       assertEquals("None", noType0.toString());
//       assertEquals(false, noType0.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noType0.isTemplateType());
//       assertEquals(false, noType0.hasCachedValues());
//       assertEquals(true, noType0.isEmptyType());
//       assertEquals(2147483647, noType0.getPropertiesCount());
//       assertEquals(false, noType0.isStringValueType());
//       assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
//       assertEquals(false, functionPrototypeType0.isTemplateType());
//       assertEquals(false, functionPrototypeType0.isNullType());
//       assertEquals(false, functionPrototypeType0.isNoObjectType());
//       assertEquals(false, functionPrototypeType0.isBooleanValueType());
//       assertEquals(false, functionPrototypeType0.isUnionType());
//       assertEquals(false, functionPrototypeType0.isResolved());
//       assertEquals(false, functionPrototypeType0.isNumberValueType());
//       assertEquals(false, functionPrototypeType0.isEmptyType());
//       assertEquals(false, functionPrototypeType0.isVoidType());
//       assertEquals(false, functionPrototypeType0.isStringValueType());
//       assertEquals(false, functionPrototypeType0.isRecordType());
//       assertEquals(false, functionPrototypeType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, functionPrototypeType0.hasReferenceName());
//       assertEquals(false, functionPrototypeType0.isNamedType());
//       assertEquals(false, functionPrototypeType0.isNoType());
//       assertEquals(false, functionPrototypeType0.isFunctionType());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[??, None]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(true, unknownType0.isCheckedUnknownType());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals("??", unknownType0.getReferenceName());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals("??", unknownType0.toString());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertFalse(boolean2 == boolean0);
//       assertTrue(boolean2 == boolean1);
//       assertFalse(boolean0 == boolean2);
//       assertFalse(boolean0 == boolean1);
//       assertTrue(boolean1 == boolean2);
//       assertFalse(boolean1 == boolean0);
//       assertTrue(boolean2);
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType0);
//       assertEquals(2, hashSet0.size());
//       assertEquals("[??, None]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isStringValueType());
//       
//       UnknownType unknownType1 = (UnknownType)unionType0.findPropertyType(string0);
//       assertNotNull(unknownType1);
//       assertEquals(false, unknownType1.isNativeObjectType());
//       assertEquals(false, unknownType1.isBooleanValueType());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
//       assertEquals(false, unknownType1.isNoObjectType());
//       assertEquals("??", unknownType1.toString());
//       assertEquals(true, unknownType1.canBeCalled());
//       assertEquals(true, unknownType1.matchesNumberContext());
//       assertEquals(false, unknownType1.isNamedType());
//       assertEquals(true, unknownType1.matchesObjectContext());
//       assertEquals(false, unknownType1.hasReferenceName());
//       assertEquals(false, unknownType1.isVoidType());
//       assertEquals(false, unknownType1.isFunctionType());
//       assertEquals("??", unknownType1.getReferenceName());
//       assertEquals(false, unknownType1.isTemplateType());
//       assertEquals(false, unknownType1.isNumberValueType());
//       assertEquals(false, unknownType1.isStringValueType());
//       assertEquals(false, unknownType1.isNullType());
//       assertEquals(true, unknownType1.isNullable());
//       assertEquals(false, unknownType1.isAllType());
//       assertEquals(true, unknownType1.matchesStringContext());
//       assertEquals(2147483647, unknownType1.getPropertiesCount());
//       assertEquals(false, unknownType1.isEmptyType());
//       assertEquals(false, unknownType1.isNoType());
//       assertEquals(false, unknownType1.isResolved());
//       assertEquals(false, unknownType1.isRecordType());
//       assertEquals(true, unknownType1.isUnknownType());
//       assertEquals(false, unknownType1.isUnionType());
//       assertEquals(false, unknownType1.hasCachedValues());
//       assertEquals(true, unknownType1.isCheckedUnknownType());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[??, None]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertSame(unknownType1, unknownType0);
//   }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      
      String string0 = "";
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[null]", hashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      FunctionPrototypeType functionPrototypeType0 = errorFunctionType0.getPrototype();
      assertNotNull(functionPrototypeType0);
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      boolean boolean0 = hashSet0.add((JSType) functionPrototypeType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[.prototype]", hashSet0.toString());
      assertEquals(false, functionPrototypeType0.isStringValueType());
      assertEquals(false, functionPrototypeType0.isResolved());
      assertEquals(false, functionPrototypeType0.isFunctionType());
      assertEquals(false, functionPrototypeType0.isNoObjectType());
      assertEquals(false, functionPrototypeType0.isBooleanValueType());
      assertEquals(false, functionPrototypeType0.isVoidType());
      assertEquals(false, functionPrototypeType0.isUnionType());
      assertEquals(false, functionPrototypeType0.isAllType());
      assertEquals(false, functionPrototypeType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionPrototypeType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionPrototypeType0.isNamedType());
      assertEquals(true, functionPrototypeType0.isFunctionPrototypeType());
      assertEquals(true, functionPrototypeType0.hasReferenceName());
      assertEquals(false, functionPrototypeType0.isRecordType());
      assertEquals(false, functionPrototypeType0.isTemplateType());
      assertEquals(false, functionPrototypeType0.isNumberValueType());
      assertEquals(false, functionPrototypeType0.isNullType());
      assertEquals(false, functionPrototypeType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[.prototype]", hashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[.prototype]", hashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      
      boolean boolean0 = linkedHashSet0.add((JSType) noObjectType0);
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertNull(noObjectType0.getReferenceName());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertEquals("[NoObject]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean0);
      
      boolean boolean1 = unionType1.matchesObjectContext();
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isAllType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(unionType1, unionType0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      assertTrue(boolean0);
      
      boolean boolean1 = unionType1.matchesStringContext();
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(unionType1, unionType0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) numberType0);
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isVoidType());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, nullType0.isAllType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      
      boolean boolean1 = unionType0.matchesUint32Context();
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      String string0 = "";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      
      boolean boolean0 = hashSet0.add((JSType) errorFunctionType0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals("[function (this:, *, *, *): ]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[function (this:, *, *, *): ]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      
      boolean boolean1 = unionType0.matchesUint32Context();
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[function (this:, *, *, *): ]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertNotNull(allType0);
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.isAllType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      
      boolean boolean0 = linkedHashSet0.add((JSType) allType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.isAllType());
      assertTrue(boolean0);
      
      unionType0.forgiveUnknownNames();
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[]", treeSet0.toString());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.getGreatestSubtype((JSType) noObjectType0);
      assertNotNull(noObjectType1);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.canBeCalled());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNoType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isFunctionType());
      assertNull(noObjectType1.getReferenceName());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(false, noObjectType1.isResolved());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(false, noObjectType1.isNoType());
      assertFalse(noObjectType0.equals((Object)noObjectType1));
      assertFalse(noObjectType1.equals((Object)noObjectType0));
      assertNotSame(noObjectType0, noObjectType1);
      assertNotSame(noObjectType1, noObjectType0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertNotNull(nullType0);
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_STRING;
      UnionType unionType0 = (UnionType)nullType0.getNativeType(jSTypeNative0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
      
      NoType noType0 = (NoType)JSType.getGreatestSubtype(unionType0, nullType0);
      assertNotNull(noType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isFunctionType());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.isNullType());
  }
}
