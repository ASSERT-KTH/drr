/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:56:07 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.AllType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NullType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.RecordType;
import com.google.javascript.rhino.jstype.StringType;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.VoidType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      booleanType0.setResolvedTypeInternal(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isResolved());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertTrue(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)unionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotNull(unionType1);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
  }

  @Test
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertTrue(boolean0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)unionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertNotNull(unionType1);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
  }

  @Test
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test03()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      UnknownType[] unknownTypeArray0 = new UnknownType[1];
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertNotNull(unknownType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(unionType0);
      
      unknownTypeArray0[0] = unknownType0;
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownTypeArray0[0].matchesNumberContext());
      assertEquals(false, unknownTypeArray0[0].isRecordType());
      assertEquals(false, unknownTypeArray0[0].isNamedType());
      assertEquals(true, unknownTypeArray0[0].canBeCalled());
      assertEquals(false, unknownTypeArray0[0].isUnionType());
      assertEquals(false, unknownTypeArray0[0].isNullType());
      assertEquals(false, unknownTypeArray0[0].isFunctionType());
      assertEquals("??", unknownTypeArray0[0].getReferenceName());
      assertEquals(false, unknownTypeArray0[0].isResolved());
      assertEquals(true, unknownTypeArray0[0].isNullable());
      assertEquals(true, unknownTypeArray0[0].isUnknownType());
      assertEquals(false, unknownTypeArray0[0].isVoidType());
      assertEquals(false, unknownTypeArray0[0].isEmptyType());
      assertEquals(false, unknownTypeArray0[0].hasCachedValues());
      assertEquals(false, unknownTypeArray0[0].isTemplateType());
      assertEquals(false, unknownTypeArray0[0].isNoObjectType());
      assertEquals(false, unknownTypeArray0[0].isNumberValueType());
      assertEquals(false, unknownTypeArray0[0].isNativeObjectType());
      assertEquals(false, unknownTypeArray0[0].isAllType());
      assertEquals(true, unknownTypeArray0[0].matchesObjectContext());
      assertEquals(false, unknownTypeArray0[0].isStringValueType());
      assertEquals(true, unknownTypeArray0[0].matchesStringContext());
      assertEquals(true, unknownTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, unknownTypeArray0[0].isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownTypeArray0[0].getPossibleToBooleanOutcomes());
      assertEquals(false, unknownTypeArray0[0].hasReferenceName());
      assertEquals("??", unknownTypeArray0[0].toString());
      assertEquals(true, unknownTypeArray0[0].isObject());
      assertEquals(false, unknownTypeArray0[0].isBooleanValueType());
      assertEquals(2147483647, unknownTypeArray0[0].getPropertiesCount());
      assertNotNull(unknownTypeArray0[0]);
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownTypeArray0[0]);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try {
        JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unknownTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertNotNull(nullType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) nullType0);
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertNotNull(prototypeObjectType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, prototypeObjectType0);
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(unionType0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) proxyObjectType0);
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test06()  throws Throwable  {
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderEquality((JSType) booleanType0);
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertNotNull(jSType_TypePair0);
  }

  @Test
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.toString());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertNotNull(unknownType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.toString());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isStringValueType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
  }

  @Test
  public void test08()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("FALSE", booleanLiteralSet0.name());
      assertEquals("FALSE", booleanLiteralSet0.toString());
      assertEquals(2, booleanLiteralSet0.ordinal());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(BooleanLiteralSet.FALSE, booleanLiteralSet0);
  }

  @Test
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.isUnknownType();
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isStringValueType());
      assertNotNull(nullType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isStringValueType());
      assertTrue(boolean0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isObject());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(true, nullType0.isNullType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isStringValueType());
      assertNotNull(noType0);
  }

  @Test
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertNotNull(prototypeObjectType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) allType0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[*]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.isSubtype((JSType) prototypeObjectType0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.isAllType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertNotNull(prototypeObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.isSubtype((JSType) prototypeObjectType0);
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertNotNull(prototypeObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) allType0);
      assertEquals("[{...}, *]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isVoidType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = unionType0.toString();
      assertEquals("[{...}, *]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(string0);
      assertEquals("(*|{...})", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertNotNull(prototypeObjectType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, prototypeObjectType0);
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertNotNull(proxyObjectType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      AllType allType1 = (AllType)JSType.getLeastSupertype(proxyObjectType0, allType0);
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(false, allType1.isEmptyType());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isUnionType());
      assertEquals(false, allType1.isVoidType());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(true, allType1.isAllType());
      assertEquals(false, allType1.isFunctionType());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(false, allType1.isObject());
      assertEquals(false, allType1.isNoType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals(false, allType1.isNamedType());
      assertEquals("*", allType1.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertNotNull(allType1);
      assertSame(allType0, allType1);
      assertSame(allType1, allType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) allType1);
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isNoType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType1.isResolved());
      assertEquals(false, allType1.isBooleanValueType());
      assertEquals(false, allType1.isEmptyType());
      assertEquals(false, allType1.isStringValueType());
      assertEquals(false, allType1.isNullType());
      assertEquals(false, allType1.isUnionType());
      assertEquals(false, allType1.isVoidType());
      assertEquals(true, allType1.matchesObjectContext());
      assertEquals(false, allType1.canBeCalled());
      assertEquals(true, allType1.isAllType());
      assertEquals(false, allType1.isFunctionType());
      assertEquals(false, allType1.isNoObjectType());
      assertEquals(false, allType1.isTemplateType());
      assertEquals(false, allType1.isObject());
      assertEquals(false, allType1.isNoType());
      assertEquals(false, allType1.isRecordType());
      assertEquals(true, allType1.matchesStringContext());
      assertEquals(false, allType1.isNumberValueType());
      assertEquals(false, allType1.isNamedType());
      assertEquals("*", allType1.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType1.getPossibleToBooleanOutcomes());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertTrue(boolean0);
      assertSame(allType0, allType1);
      assertSame(allType1, allType0);
      
      AllType allType2 = (AllType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertEquals(true, allType2.matchesObjectContext());
      assertEquals(false, allType2.isResolved());
      assertEquals(false, allType2.isNumberValueType());
      assertEquals(false, allType2.isEmptyType());
      assertEquals(false, allType2.isVoidType());
      assertEquals(false, allType2.isRecordType());
      assertEquals(false, allType2.canBeCalled());
      assertEquals(false, allType2.isUnionType());
      assertEquals(false, allType2.isTemplateType());
      assertEquals(false, allType2.isNamedType());
      assertEquals(false, allType2.isFunctionType());
      assertEquals("*", allType2.toString());
      assertEquals(false, allType2.isNoType());
      assertEquals(false, allType2.isStringValueType());
      assertEquals(true, allType2.isAllType());
      assertEquals(false, allType2.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType2.getPossibleToBooleanOutcomes());
      assertEquals(false, allType2.isNoObjectType());
      assertEquals(true, allType2.matchesStringContext());
      assertEquals(false, allType2.isObject());
      assertEquals(false, allType2.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(allType2.equals((Object)allType1));
      assertFalse(allType2.equals((Object)allType0));
      assertNotNull(allType2);
      assertNotSame(allType2, allType1);
      assertNotSame(allType2, allType0);
  }

  @Test
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertNotNull(prototypeObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.isAllType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.getRestrictedUnion((JSType) unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isBooleanValueType());
      assertNotNull(noType0);
  }

  @Test
  public void test16()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedUnion((JSType) unknownType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNullType());
      assertNotNull(voidType0);
      
      boolean boolean0 = unionType0.contains((JSType) voidType0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isResolved());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.isObject();
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      assertNotNull(voidType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.equals((Object) voidType0);
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isRecordType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      StringType stringType0 = new StringType(jSTypeRegistry0);
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals("string", stringType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isObject());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertNotNull(stringType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      NoType noType0 = (NoType)unionType0.meet(stringType0);
      assertEquals(false, stringType0.isAllType());
      assertEquals(false, stringType0.isUnionType());
      assertEquals(false, stringType0.isNoObjectType());
      assertEquals("string", stringType0.toString());
      assertEquals(BooleanLiteralSet.BOTH, stringType0.getPossibleToBooleanOutcomes());
      assertEquals(false, stringType0.isRecordType());
      assertEquals(false, stringType0.isBooleanValueType());
      assertEquals(false, stringType0.isNamedType());
      assertEquals(false, stringType0.isResolved());
      assertEquals(true, stringType0.isStringValueType());
      assertEquals(false, stringType0.isEmptyType());
      assertEquals(false, stringType0.isNoType());
      assertEquals(true, stringType0.matchesNumberContext());
      assertEquals(true, stringType0.matchesStringContext());
      assertEquals(false, stringType0.isFunctionType());
      assertEquals(false, stringType0.isTemplateType());
      assertEquals(false, stringType0.isNullType());
      assertEquals(false, stringType0.isObject());
      assertEquals(true, stringType0.matchesObjectContext());
      assertEquals(false, stringType0.isNumberValueType());
      assertEquals(false, stringType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals("None", noType0.toString());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isAllType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(noType0);
  }

  @Test
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertNotNull(allType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) allType0);
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(unionType0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isFunctionType());
      assertNotNull(voidType0);
      
      NoType noType0 = (NoType)voidType0.dereference();
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isFunctionType());
      assertNotNull(noType0);
      
      NoType noType1 = (NoType)unionType0.meet(noType0);
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals(false, voidType0.isObject());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isAllType());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(true, noType1.isObject());
      assertEquals("None", noType1.toString());
      assertEquals(false, noType1.isNamedType());
      assertEquals(false, noType1.isResolved());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isInterface());
      assertEquals(true, noType1.isNoType());
      assertEquals(false, noType1.isAllType());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(true, noType1.hasInstanceType());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.matchesNumberContext());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(true, noType1.isNullable());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(true, noType1.isEmptyType());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(noType1);
      assertSame(noType0, noType1);
      assertSame(noType1, noType0);
  }

  @Test
  public void test22()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertNotNull(numberType0);
      
      boolean boolean0 = hashSet0.add((JSType) numberType0);
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet1 = new HashSet<JSType>();
      assertEquals("[]", hashSet1.toString());
      assertEquals(0, hashSet1.size());
      assertEquals(true, hashSet1.isEmpty());
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertNotNull(hashSet1);
      assertNotSame(hashSet1, hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet1);
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals("[]", hashSet1.toString());
      assertEquals(0, hashSet1.size());
      assertEquals(true, hashSet1.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(hashSet1.equals((Object)hashSet0));
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(hashSet1, hashSet0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType1.meet(unionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertNotNull(numberType0);
      
      boolean boolean0 = hashSet0.add((JSType) numberType0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isNullable());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(unionType0);
      
      NumberType numberType1 = (NumberType)unionType0.meet(unionType0);
      assertEquals(false, numberType1.isRecordType());
      assertEquals(true, numberType1.matchesNumberContext());
      assertEquals(false, numberType1.isNullType());
      assertEquals(false, numberType1.isNullable());
      assertEquals(false, numberType1.isBooleanValueType());
      assertEquals(false, numberType1.isEmptyType());
      assertEquals(false, numberType1.isFunctionType());
      assertEquals(false, numberType1.isStringValueType());
      assertEquals(false, numberType1.isNoType());
      assertEquals(false, numberType1.isResolved());
      assertEquals(false, numberType1.isUnionType());
      assertEquals(false, numberType1.isTemplateType());
      assertEquals(true, numberType1.matchesObjectContext());
      assertEquals(true, numberType1.matchesStringContext());
      assertEquals("number", numberType1.toString());
      assertEquals(false, numberType1.isNoObjectType());
      assertEquals(false, numberType1.isVoidType());
      assertEquals(false, numberType1.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, numberType1.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType1.isObject());
      assertEquals(true, numberType1.isNumberValueType());
      assertEquals(false, numberType1.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(numberType1);
      assertSame(numberType1, numberType0);
  }

  @Test
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertNotNull(prototypeObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isNullType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotNull(unionType0);
      
      HashMap<String, JSType> hashMap0 = new HashMap<String, JSType>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      RecordType recordType0 = new RecordType(jSTypeRegistry0, hashMap0);
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(recordType0);
      
      RecordType recordType1 = (RecordType)recordType0.getLeastSupertype((JSType) unionType0);
      assertEquals(false, recordType0.isVoidType());
      assertEquals(false, recordType0.isResolved());
      assertEquals(false, recordType0.isNumberValueType());
      assertEquals(true, recordType0.isRecordType());
      assertEquals(false, recordType0.isTemplateType());
      assertEquals(false, recordType0.isAllType());
      assertEquals(true, recordType0.isObject());
      assertEquals(false, recordType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, recordType0.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType0.isBooleanValueType());
      assertEquals(false, recordType0.isNoObjectType());
      assertEquals(false, recordType0.isNullType());
      assertEquals(false, recordType0.isUnionType());
      assertEquals(false, recordType0.isNamedType());
      assertEquals(false, recordType0.isStringValueType());
      assertEquals(false, recordType0.isEmptyType());
      assertEquals(false, recordType0.isFunctionType());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, recordType1.isEmptyType());
      assertEquals(false, recordType1.isUnionType());
      assertEquals(true, recordType1.isRecordType());
      assertEquals(false, recordType1.isNullType());
      assertEquals(false, recordType1.isNoObjectType());
      assertEquals(false, recordType1.isTemplateType());
      assertEquals(false, recordType1.isResolved());
      assertEquals(false, recordType1.isBooleanValueType());
      assertEquals(false, recordType1.isNumberValueType());
      assertEquals(false, recordType1.isVoidType());
      assertEquals(false, recordType1.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, recordType1.getPossibleToBooleanOutcomes());
      assertEquals(false, recordType1.isAllType());
      assertEquals(false, recordType1.isNamedType());
      assertEquals(false, recordType1.isStringValueType());
      assertEquals(false, recordType1.isNoType());
      assertEquals(true, recordType1.isObject());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotNull(recordType1);
      assertSame(recordType0, recordType1);
      assertSame(recordType1, recordType0);
  }

  @Test
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertNotNull(booleanType0);
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getLeastSupertype((JSType) booleanType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesStringContext());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesStringContext());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesStringContext());
      assertNotNull(prototypeObjectType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNoType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) proxyObjectType0);
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isNullType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isNoType());
      assertNotNull(unionType1);
      assertSame(unionType1, unionType0);
      assertSame(unionType0, unionType1);
  }

  @Test
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      String string0 = "d?@jj";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("d?@jj", templateType0.toString());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(true, templateType0.isObject());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNamedType());
      assertEquals("d?@jj", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertNotNull(templateType0);
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) templateType0, (JSType) templateType0);
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("d?@jj", templateType0.toString());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(true, templateType0.isObject());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNamedType());
      assertEquals("d?@jj", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertNotNull(parameterizedType0);
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.getLeastSupertype((JSType) unionType0);
      assertEquals(false, templateType0.isNoObjectType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals("d?@jj", templateType0.toString());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isEmptyType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isNoType());
      assertEquals(true, templateType0.isObject());
      assertEquals(false, templateType0.isNativeObjectType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNamedType());
      assertEquals("d?@jj", templateType0.getReferenceName());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(false, parameterizedType1.isRecordType());
      assertEquals(false, parameterizedType1.isEmptyType());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(true, parameterizedType1.isObject());
      assertEquals(false, parameterizedType1.isNoObjectType());
      assertEquals(false, parameterizedType1.isAllType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNativeObjectType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isFunctionType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isUnionType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isNoType());
      assertEquals(false, parameterizedType1.isNamedType());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(parameterizedType1);
      assertSame(parameterizedType1, parameterizedType0);
      assertSame(parameterizedType0, parameterizedType1);
  }

  @Test
  public void test28()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnknownType[] unknownTypeArray0 = new UnknownType[1];
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isVoidType());
      assertNotNull(unknownType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      unknownTypeArray0[0] = unknownType0;
      assertEquals("??", unknownTypeArray0[0].toString());
      assertEquals(false, unknownTypeArray0[0].isNullType());
      assertEquals(false, unknownTypeArray0[0].isEmptyType());
      assertEquals(false, unknownTypeArray0[0].isUnionType());
      assertEquals(false, unknownTypeArray0[0].isNativeObjectType());
      assertEquals(true, unknownTypeArray0[0].matchesStringContext());
      assertEquals(true, unknownTypeArray0[0].isUnknownType());
      assertEquals(false, unknownTypeArray0[0].isNoType());
      assertEquals(false, unknownTypeArray0[0].isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownTypeArray0[0].getPossibleToBooleanOutcomes());
      assertEquals(true, unknownTypeArray0[0].isObject());
      assertEquals(true, unknownTypeArray0[0].isNullable());
      assertEquals(false, unknownTypeArray0[0].isTemplateType());
      assertEquals(false, unknownTypeArray0[0].isNoObjectType());
      assertEquals(false, unknownTypeArray0[0].isAllType());
      assertEquals(false, unknownTypeArray0[0].isRecordType());
      assertEquals(false, unknownTypeArray0[0].isNamedType());
      assertEquals(false, unknownTypeArray0[0].isFunctionType());
      assertEquals(true, unknownTypeArray0[0].matchesNumberContext());
      assertEquals(false, unknownTypeArray0[0].isNumberValueType());
      assertEquals(2147483647, unknownTypeArray0[0].getPropertiesCount());
      assertEquals(true, unknownTypeArray0[0].canBeCalled());
      assertEquals(true, unknownTypeArray0[0].matchesObjectContext());
      assertEquals(true, unknownTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, unknownTypeArray0[0].hasReferenceName());
      assertEquals(false, unknownTypeArray0[0].hasCachedValues());
      assertEquals("??", unknownTypeArray0[0].getReferenceName());
      assertEquals(false, unknownTypeArray0[0].isStringValueType());
      assertEquals(false, unknownTypeArray0[0].isVoidType());
      assertEquals(false, unknownTypeArray0[0].isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isVoidType());
      assertNotNull(unknownTypeArray0[0]);
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownTypeArray0[0]);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = unionType0.isUnknownType();
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test
  public void test29()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      UnknownType[] unknownTypeArray0 = new UnknownType[1];
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isObject());
      assertNotNull(unknownType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      unknownTypeArray0[0] = unknownType0;
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownTypeArray0[0].hasCachedValues());
      assertEquals(true, unknownTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, unknownTypeArray0[0].isTemplateType());
      assertEquals(false, unknownTypeArray0[0].isNoType());
      assertEquals(false, unknownTypeArray0[0].hasReferenceName());
      assertEquals(false, unknownTypeArray0[0].isNoObjectType());
      assertEquals(false, unknownTypeArray0[0].isBooleanValueType());
      assertEquals(false, unknownTypeArray0[0].isUnionType());
      assertEquals(false, unknownTypeArray0[0].isResolved());
      assertEquals(false, unknownTypeArray0[0].isNamedType());
      assertEquals(false, unknownTypeArray0[0].isNumberValueType());
      assertEquals(false, unknownTypeArray0[0].isRecordType());
      assertEquals(2147483647, unknownTypeArray0[0].getPropertiesCount());
      assertEquals(false, unknownTypeArray0[0].isVoidType());
      assertEquals(false, unknownTypeArray0[0].isFunctionType());
      assertEquals(true, unknownTypeArray0[0].isObject());
      assertEquals(true, unknownTypeArray0[0].isUnknownType());
      assertEquals("??", unknownTypeArray0[0].getReferenceName());
      assertEquals("??", unknownTypeArray0[0].toString());
      assertEquals(false, unknownTypeArray0[0].isEmptyType());
      assertEquals(true, unknownTypeArray0[0].matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownTypeArray0[0].getPossibleToBooleanOutcomes());
      assertEquals(false, unknownTypeArray0[0].isAllType());
      assertEquals(true, unknownTypeArray0[0].matchesStringContext());
      assertEquals(true, unknownTypeArray0[0].isNullable());
      assertEquals(false, unknownTypeArray0[0].isNativeObjectType());
      assertEquals(false, unknownTypeArray0[0].isNullType());
      assertEquals(true, unknownTypeArray0[0].matchesNumberContext());
      assertEquals(false, unknownTypeArray0[0].isStringValueType());
      assertEquals(true, unknownTypeArray0[0].canBeCalled());
      assertNotNull(unknownTypeArray0[0]);
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownTypeArray0[0]);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = unionType0.isNullable();
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNumberValueType());
      assertTrue(boolean0);
      
      boolean boolean1 = unionType0.isNullable();
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       JSTypeRegistry jSTypeRegistry0 = null;
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertNotNull(hashSet0);
//       
//       boolean boolean0 = true;
//       VoidType voidType0 = new VoidType(jSTypeRegistry0);
//       assertEquals(false, voidType0.isRecordType());
//       assertEquals(false, voidType0.isFunctionType());
//       assertEquals(false, voidType0.matchesObjectContext());
//       assertEquals(false, voidType0.isNamedType());
//       assertEquals(false, voidType0.isEmptyType());
//       assertEquals(false, voidType0.isNumberValueType());
//       assertEquals(true, voidType0.isVoidType());
//       assertEquals(false, voidType0.isStringValueType());
//       assertEquals(false, voidType0.isNoObjectType());
//       assertEquals(false, voidType0.isObject());
//       assertEquals(false, voidType0.isNoType());
//       assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, voidType0.isNullType());
//       assertEquals(false, voidType0.isUnionType());
//       assertEquals(false, voidType0.isAllType());
//       assertEquals(false, voidType0.isBooleanValueType());
//       assertEquals(false, voidType0.isTemplateType());
//       assertEquals(false, voidType0.isResolved());
//       assertEquals(true, voidType0.matchesStringContext());
//       assertEquals(false, voidType0.matchesNumberContext());
//       assertEquals("undefined", voidType0.toString());
//       assertNotNull(voidType0);
//       
//       boolean boolean1 = hashSet0.add((JSType) voidType0);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[undefined]", hashSet0.toString());
//       assertEquals(false, voidType0.isRecordType());
//       assertEquals(false, voidType0.isFunctionType());
//       assertEquals(false, voidType0.matchesObjectContext());
//       assertEquals(false, voidType0.isNamedType());
//       assertEquals(false, voidType0.isEmptyType());
//       assertEquals(false, voidType0.isNumberValueType());
//       assertEquals(true, voidType0.isVoidType());
//       assertEquals(false, voidType0.isStringValueType());
//       assertEquals(false, voidType0.isNoObjectType());
//       assertEquals(false, voidType0.isObject());
//       assertEquals(false, voidType0.isNoType());
//       assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, voidType0.isNullType());
//       assertEquals(false, voidType0.isUnionType());
//       assertEquals(false, voidType0.isAllType());
//       assertEquals(false, voidType0.isBooleanValueType());
//       assertEquals(false, voidType0.isTemplateType());
//       assertEquals(false, voidType0.isResolved());
//       assertEquals(true, voidType0.matchesStringContext());
//       assertEquals(false, voidType0.matchesNumberContext());
//       assertEquals("undefined", voidType0.toString());
//       assertTrue(boolean1 == boolean0);
//       assertTrue(boolean1);
//       
//       UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals("??", unknownType0.toString());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals("??", unknownType0.getReferenceName());
//       assertEquals(true, unknownType0.isCheckedUnknownType());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertTrue(boolean0 == boolean1);
//       assertNotNull(unknownType0);
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(1, hashSet0.size());
//       assertEquals("[undefined]", hashSet0.toString());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNoType());
//       assertNotNull(unionType0);
//       
//       boolean boolean2 = hashSet0.add((JSType) unknownType0);
//       assertEquals(false, unknownType0.hasReferenceName());
//       assertEquals("??", unknownType0.toString());
//       assertEquals(false, unknownType0.isVoidType());
//       assertEquals(true, unknownType0.matchesNumberContext());
//       assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, unknownType0.matchesStringContext());
//       assertEquals(false, unknownType0.isNoObjectType());
//       assertEquals(false, unknownType0.isNamedType());
//       assertEquals(true, unknownType0.isNullable());
//       assertEquals(false, unknownType0.isBooleanValueType());
//       assertEquals(false, unknownType0.isResolved());
//       assertEquals(true, unknownType0.matchesObjectContext());
//       assertEquals(false, unknownType0.isStringValueType());
//       assertEquals(false, unknownType0.hasCachedValues());
//       assertEquals(false, unknownType0.isTemplateType());
//       assertEquals(true, unknownType0.isUnknownType());
//       assertEquals(false, unknownType0.isUnionType());
//       assertEquals(false, unknownType0.isEmptyType());
//       assertEquals(false, unknownType0.isNativeObjectType());
//       assertEquals(false, unknownType0.isNullType());
//       assertEquals(false, unknownType0.isFunctionType());
//       assertEquals(false, unknownType0.isNoType());
//       assertEquals(2147483647, unknownType0.getPropertiesCount());
//       assertEquals(true, unknownType0.isObject());
//       assertEquals(false, unknownType0.isAllType());
//       assertEquals("??", unknownType0.getReferenceName());
//       assertEquals(true, unknownType0.isCheckedUnknownType());
//       assertEquals(false, unknownType0.isRecordType());
//       assertEquals(true, unknownType0.canBeCalled());
//       assertEquals(false, unknownType0.isNumberValueType());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[undefined, ??]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertTrue(boolean2 == boolean0);
//       assertTrue(boolean2 == boolean1);
//       assertTrue(boolean0 == boolean2);
//       assertTrue(boolean0 == boolean1);
//       assertTrue(boolean2);
//       
//       TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) voidType0);
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[undefined, ??]", hashSet0.toString());
//       assertEquals(2, hashSet0.size());
//       assertEquals("UNKNOWN", ternaryValue0.name());
//       assertEquals("unknown", ternaryValue0.toString());
//       assertEquals(2, ternaryValue0.ordinal());
//       assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
//       assertEquals(false, voidType0.isRecordType());
//       assertEquals(false, voidType0.isFunctionType());
//       assertEquals(false, voidType0.matchesObjectContext());
//       assertEquals(false, voidType0.isNamedType());
//       assertEquals(false, voidType0.isEmptyType());
//       assertEquals(false, voidType0.isNumberValueType());
//       assertEquals(true, voidType0.isVoidType());
//       assertEquals(false, voidType0.isStringValueType());
//       assertEquals(false, voidType0.isNoObjectType());
//       assertEquals(false, voidType0.isObject());
//       assertEquals(false, voidType0.isNoType());
//       assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, voidType0.isNullType());
//       assertEquals(false, voidType0.isUnionType());
//       assertEquals(false, voidType0.isAllType());
//       assertEquals(false, voidType0.isBooleanValueType());
//       assertEquals(false, voidType0.isTemplateType());
//       assertEquals(false, voidType0.isResolved());
//       assertEquals(true, voidType0.matchesStringContext());
//       assertEquals(false, voidType0.matchesNumberContext());
//       assertEquals("undefined", voidType0.toString());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isNoType());
//   }

  @Test
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertNull(objectType0);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry0.createObjectType(objectType0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertNotNull(prototypeObjectType0);
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry0, prototypeObjectType0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertNotNull(proxyObjectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) prototypeObjectType0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean1 = linkedHashSet0.add((JSType) allType0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals("[{...}, *]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) proxyObjectType0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isNamedType());
      assertEquals("*", allType0.toString());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("[{...}, *]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
  }

  @Test
  public void test33()  throws Throwable  {
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)unionType0.dereference();
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertNotNull(instanceObjectType0);
  }

  @Test
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertNotNull(nullType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals("null", nullType0.toString());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isResolved());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(false, nullType0.isObject());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isRecordType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.canBeCalled();
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = false;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(false, unknownType0.isNullType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.canBeCalled();
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(1, hashSet0.size());
      assertEquals("[?]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("*", allType0.toString());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("*", allType0.toString());
      assertNull(objectType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) allType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[*]", linkedHashSet0.toString());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isNoType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("*", allType0.toString());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[*]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = unionType0.canAssignTo((JSType) objectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.canAssignTo((JSType) unknownType0);
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertNotNull(allType0);
      
      ObjectType objectType0 = allType0.dereference();
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertNull(objectType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertNotNull(unionType0);
      
      boolean boolean0 = unionType0.canAssignTo((JSType) objectType0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isResolved());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(true, allType0.isAllType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNamedType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(false, allType0.isUnionType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isNoType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertTrue(boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullType());
      assertNotNull(booleanType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertNotNull(unionType0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isObject());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullType());
      assertTrue(boolean0);
      
      String string0 = "M";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertNull(jSType0);
  }

  @Test
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      VoidType voidType0 = new VoidType(jSTypeRegistry0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertNotNull(voidType0);
      
      boolean boolean0 = hashSet0.add((JSType) voidType0);
      assertEquals(false, voidType0.isAllType());
      assertEquals(false, voidType0.isNamedType());
      assertEquals(BooleanLiteralSet.FALSE, voidType0.getPossibleToBooleanOutcomes());
      assertEquals(false, voidType0.matchesObjectContext());
      assertEquals("undefined", voidType0.toString());
      assertEquals(false, voidType0.isUnionType());
      assertEquals(false, voidType0.isNumberValueType());
      assertEquals(false, voidType0.isEmptyType());
      assertEquals(true, voidType0.matchesStringContext());
      assertEquals(false, voidType0.isBooleanValueType());
      assertEquals(false, voidType0.isNoObjectType());
      assertEquals(false, voidType0.isNoType());
      assertEquals(false, voidType0.isResolved());
      assertEquals(false, voidType0.isTemplateType());
      assertEquals(false, voidType0.isNullType());
      assertEquals(false, voidType0.isFunctionType());
      assertEquals(false, voidType0.isObject());
      assertEquals(true, voidType0.isVoidType());
      assertEquals(false, voidType0.matchesNumberContext());
      assertEquals(false, voidType0.isStringValueType());
      assertEquals(false, voidType0.isRecordType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNotNull(unionType0);
      
      String string0 = "com.google.javascript.rhino.jstype.UnionType";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[undefined]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertNull(jSType0);
  }

  @Test
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertNotNull(unionType0);
      
      String string0 = "";
      UnknownType unknownType1 = (UnknownType)unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(true, unknownType1.isCheckedUnknownType());
      assertEquals("??", unknownType1.toString());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals("??", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isEmptyType());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType1.isObject());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertNotNull(unknownType1);
      assertSame(unknownType1, unknownType0);
  }

  @Test
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertNotNull(nullType0);
      
      boolean boolean0 = hashSet0.add((JSType) nullType0);
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals(false, nullType0.matchesObjectContext());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals("null", nullType0.toString());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.isRecordType());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNotNull(unionType0);
      
      String string0 = "";
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[null]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertNull(jSType0);
  }

  @Test
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      UnknownType[] unknownTypeArray0 = new UnknownType[1];
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertNotNull(unknownType0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(unionType0);
      
      unknownTypeArray0[0] = unknownType0;
      assertEquals(false, unknownTypeArray0[0].isNumberValueType());
      assertEquals(false, unknownTypeArray0[0].isResolved());
      assertEquals(true, unknownTypeArray0[0].matchesObjectContext());
      assertEquals(false, unknownTypeArray0[0].isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownTypeArray0[0].getPossibleToBooleanOutcomes());
      assertEquals(false, unknownTypeArray0[0].isNativeObjectType());
      assertEquals(false, unknownTypeArray0[0].isUnionType());
      assertEquals(true, unknownTypeArray0[0].matchesStringContext());
      assertEquals(false, unknownTypeArray0[0].isBooleanValueType());
      assertEquals(true, unknownTypeArray0[0].isNullable());
      assertEquals(false, unknownTypeArray0[0].isNoObjectType());
      assertEquals(true, unknownTypeArray0[0].matchesNumberContext());
      assertEquals(false, unknownTypeArray0[0].hasReferenceName());
      assertEquals(true, unknownTypeArray0[0].isUnknownType());
      assertEquals(false, unknownTypeArray0[0].isVoidType());
      assertEquals(false, unknownTypeArray0[0].isNoType());
      assertEquals(false, unknownTypeArray0[0].isNamedType());
      assertEquals(2147483647, unknownTypeArray0[0].getPropertiesCount());
      assertEquals(false, unknownTypeArray0[0].isRecordType());
      assertEquals("??", unknownTypeArray0[0].getReferenceName());
      assertEquals(true, unknownTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, unknownTypeArray0[0].isNullType());
      assertEquals(true, unknownTypeArray0[0].isObject());
      assertEquals(false, unknownTypeArray0[0].isFunctionType());
      assertEquals(false, unknownTypeArray0[0].hasCachedValues());
      assertEquals(false, unknownTypeArray0[0].isStringValueType());
      assertEquals("??", unknownTypeArray0[0].toString());
      assertEquals(true, unknownTypeArray0[0].canBeCalled());
      assertEquals(false, unknownTypeArray0[0].isTemplateType());
      assertEquals(false, unknownTypeArray0[0].isAllType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertNotNull(unknownTypeArray0[0]);
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownTypeArray0[0]);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = unionType0.matchesObjectContext();
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[]", treeSet0.toString());
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      
      boolean boolean1 = unionType1.matchesObjectContext();
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isVoidType());
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1);
      assertNotSame(unionType1, unionType0);
  }

  @Test
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NullType nullType0 = new NullType(jSTypeRegistry0);
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertNotNull(nullType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) nullType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, nullType0.isEmptyType());
      assertEquals(true, nullType0.matchesNumberContext());
      assertEquals("null", nullType0.toString());
      assertEquals(false, nullType0.isRecordType());
      assertEquals(false, nullType0.isStringValueType());
      assertEquals(false, nullType0.isVoidType());
      assertEquals(false, nullType0.isAllType());
      assertEquals(BooleanLiteralSet.FALSE, nullType0.getPossibleToBooleanOutcomes());
      assertEquals(true, nullType0.isNullable());
      assertEquals(false, nullType0.isBooleanValueType());
      assertEquals(false, nullType0.isNumberValueType());
      assertEquals(false, nullType0.isUnionType());
      assertEquals(false, nullType0.isResolved());
      assertEquals(false, nullType0.isFunctionType());
      assertEquals(false, nullType0.isNoType());
      assertEquals(true, nullType0.matchesStringContext());
      assertEquals(true, nullType0.isNullType());
      assertEquals(false, nullType0.isTemplateType());
      assertEquals(false, nullType0.isNoObjectType());
      assertEquals(false, nullType0.isObject());
      assertEquals(false, nullType0.isNamedType());
      assertEquals(false, nullType0.matchesObjectContext());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(unionType0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(boolean0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      boolean boolean1 = unionType1.matchesStringContext();
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1);
      assertNotSame(unionType1, unionType0);
  }

  @Test
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      AllType allType0 = new AllType(jSTypeRegistry0);
      assertEquals(false, allType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertNotNull(allType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((JSType) allType0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, allType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, allType0.getPossibleToBooleanOutcomes());
      assertEquals(false, allType0.isResolved());
      assertEquals("*", allType0.toString());
      assertEquals(false, allType0.canBeCalled());
      assertEquals(false, allType0.isNumberValueType());
      assertEquals(false, allType0.isVoidType());
      assertEquals(false, allType0.isFunctionType());
      assertEquals(false, allType0.isStringValueType());
      assertEquals(false, allType0.isBooleanValueType());
      assertEquals(false, allType0.isUnionType());
      assertEquals(true, allType0.matchesStringContext());
      assertEquals(false, allType0.isEmptyType());
      assertEquals(true, allType0.matchesObjectContext());
      assertEquals(true, allType0.isAllType());
      assertEquals(false, allType0.isNoObjectType());
      assertEquals(false, allType0.isTemplateType());
      assertEquals(false, allType0.isObject());
      assertEquals(false, allType0.isNullType());
      assertEquals(false, allType0.isRecordType());
      assertEquals(false, allType0.isNoType());
      assertTrue(boolean0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertNotNull(unionType0);
      
      boolean boolean1 = unionType0.matchesNumberContext();
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[*]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test48()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertNotNull(unknownType0);
      
      boolean boolean1 = hashSet0.add((JSType) unknownType0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isObject());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.hasReferenceName());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertNotNull(unionType0);
      
      boolean boolean2 = unionType0.matchesNumberContext();
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[??]", hashSet0.toString());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(unionType0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotNull(unionType1);
      assertNotSame(unionType1, unionType0);
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", treeSet0.toString());
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      
      unionType1.forgiveUnknownNames();
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isRecordType());
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
  }

  //@Test
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(unionType0);
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertNotNull(noObjectType0);
      
      NoObjectType noObjectType1 = (NoObjectType)unionType0.getGreatestSubtype((JSType) noObjectType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isFunctionType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(true, noObjectType1.isObject());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isAllType());
      assertNull(noObjectType1.getTemplateTypeName());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertNotNull(noObjectType1);
      assertSame(noObjectType0, noObjectType1);
      assertSame(noObjectType1, noObjectType0);
  }
}
