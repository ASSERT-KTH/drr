/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:25:10 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "J\t\nE\f\r 2\u2029\u205F\u3000\u00A03\u202F";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("J\\u0009\\u000aE\\u000c\\u000d 2\\u2029\\u205f\\u3000\\u00a03\\u202f", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "}DP ->.f8d";
      char char0 = 'L';
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.strEscape(string0, char0, string0, string0, string0, charsetEncoder0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("L}DP ->.f8dL", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = ">";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\">\"", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "&_]>m!-\\c1R)";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"&_]>m!-\\\\c1R)\"", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "<!--qnB1k|HSdAG'";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"<\\!--qnB1k|HSd\\u007fAG'\"", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "E_DOUBLEA\u0001\u0012\u000E\n\nTYPE_FLOAT\u0010\u0002\u0012\u000E\n\nTYPE_INT64\u0010\u0003\u0012\u000F\n\u000BTYPE_UINT64\u0010\u0004\u0012\u000E\n\nTYPE_INT32\u0010\u0005\u0012\u0010\n\fTYPE_FIXED64\u0010\u0006\u0012\u0010\n\fTYPE_FIXED32\u0010\u0007\u0012\r\n\tTYPE_BOOL\u0010\b\u0012\u000F\n\u000BTYPE_STRING\u0010\t\u0012\u000E\n\n)YPE_GROUP\u0010\n\u0012\u0010\n\fTYPE_MESSAGE\u0010\u000B\u0012\u000E\n\nTYPE_BYTES\f\u0012\u000F\n\u000BTYPE_UINT32\u0010\r\u0012\r\n\tTYPE_ENUM\u0010\u000E\u0012\u0011\n\rTYPE_SFIXED32\u0010\u000F\u0012\u0011\n\rTYPE_SFIXED64\u0010\u0010\u0012\u000F\n\u000BTYPE_SINT32\u0010\u0011\u0012\u000F\n\u000BTYPE_SINT64\u0010\u0012\"C\n\u0005Label\u0012\u0012\n\u000ELABEL_OPTIONAL\u0010\u0001\u0012\u0012\n\u000ELABEL_REQUIRED\u0010\u0002\u0012\u0012\n\u000ELABEL_REPEATED\u0010\u0003\"\u008C\u0001\n\u0013EnumDescriptorProto\u0012\f\nname\u0018\u0001";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("/E_DOUBLEA\\u0001\\u0012\\u000e\\n\\nTYPE_FLOAT\\u0010\\u0002\\u0012\\u000e\\n\\nTYPE_INT64\\u0010\\u0003\\u0012\\u000f\\n\\u000bTYPE_UINT64\\u0010\\u0004\\u0012\\u000e\\n\\nTYPE_INT32\\u0010\\u0005\\u0012\\u0010\\n\\u000cTYPE_FIXED64\\u0010\\u0006\\u0012\\u0010\\n\\u000cTYPE_FIXED32\\u0010\\u0007\\u0012\\r\\n\\tTYPE_BOOL\\u0010\\u0008\\u0012\\u000f\\n\\u000bTYPE_STRING\\u0010\\t\\u0012\\u000e\\n\\n)YPE_GROUP\\u0010\\n\\u0012\\u0010\\n\\u000cTYPE_MESSAGE\\u0010\\u000b\\u0012\\u000e\\n\\nTYPE_BYTES\\u000c\\u0012\\u000f\\n\\u000bTYPE_UINT32\\u0010\\r\\u0012\\r\\n\\tTYPE_ENUM\\u0010\\u000e\\u0012\\u0011\\n\\rTYPE_SFIXED32\\u0010\\u000f\\u0012\\u0011\\n\\rTYPE_SFIXED64\\u0010\\u0010\\u0012\\u000f\\n\\u000bTYPE_SINT32\\u0010\\u0011\\u0012\\u000f\\n\\u000bTYPE_SINT64\\u0010\\u0012\"C\\n\\u0005Label\\u0012\\u0012\\n\\u000eLABEL_OPTIONAL\\u0010\\u0001\\u0012\\u0012\\n\\u000eLABEL_REQUIRED\\u0010\\u0002\\u0012\\u0012\\n\\u000eLABEL_REPEATED\\u0010\\u0003\"\\u008c\\u0001\\n\\u0013EnumDescriptorProto\\u0012\\u000c\\nname\\u0018\\u0001/", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "}DP ->.f8d";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertEquals("}DP ->.f8d", string1);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      double double0 = CodeGenerator.getSimpleNumber(string1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "6";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(6.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "*vv;r";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "!jwP|[?P<-->!~#DB\"e:";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\"!jwP|[?P<--\\>!~#DB\\\"e:\"", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "/5}0`</scriptTm4/";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("//5}0`\\u007f<\\/scriptTm4//", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }
}
