/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:46:26 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.ast.ArrayComprehensionLoop;
import com.google.javascript.rhino.head.ast.AstNode;
import com.google.javascript.rhino.head.ast.AstRoot;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.Label;
import com.google.javascript.rhino.head.ast.ObjectProperty;
import com.google.javascript.rhino.head.ast.UnaryExpression;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = (-546);
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-546, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-546, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      
      String string0 = "OIr9seAG@Uz";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("OIr9seAG@Uz", simpleSourceFile0.getName());
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("OIr9seAG@Uz", simpleSourceFile0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop(int0);
      assertNotNull(arrayComprehensionLoop0);
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-546, arrayComprehensionLoop0.getPosition());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-546, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      
      astRoot0.addChildrenToFront((Node) arrayComprehensionLoop0);
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-546, arrayComprehensionLoop0.getPosition());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-546, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertNull(astRoot0.getSourceName());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-546, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-546, astRoot0.getAbsolutePosition());
      assertEquals(1, astRoot0.getLength());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test1()  throws Throwable  {
      int int0 = 184;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(184, astRoot0.getPosition());
      assertEquals(184, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      
      String string0 = "com.google.javascript.rhino.head.VMBridge_custom";
      boolean boolean0 = false;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("com.google.javascript.rhino.head.VMBridge_custom", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("com.google.javascript.rhino.head.VMBridge_custom", simpleSourceFile0.toString());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      String string1 = "/u(\n[ \t]*))\\[ \t]*<[azA-Z]";
      assertNotSame(string1, string0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string1, config0, (ErrorReporter) errorCollector0);
      assertNotNull(node0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", treeSet0.toString());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(184, astRoot0.getPosition());
      assertEquals(184, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals("com.google.javascript.rhino.head.VMBridge_custom", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals("com.google.javascript.rhino.head.VMBridge_custom", simpleSourceFile0.getName());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("com.google.javascript.rhino.head.VMBridge_custom", simpleSourceFile0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 57;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1, astRoot0.getLength());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(57, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(57, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      
      String string0 = "use strict";
      Label label0 = new Label();
      assertNotNull(label0);
      assertEquals(-1, label0.getLineno());
      assertEquals(-1, label0.getPosition());
      assertNull(label0.getJsDoc());
      assertNull(label0.getName());
      assertEquals(false, label0.hasChildren());
      assertEquals("130", label0.toString());
      assertEquals(130, label0.getType());
      assertEquals(1, label0.getLength());
      assertEquals(0, label0.depth());
      assertEquals(-1, label0.getAbsolutePosition());
      
      astRoot0.addChild((AstNode) label0);
      assertEquals(-1, label0.getLineno());
      assertNull(label0.getJsDoc());
      assertNull(label0.getName());
      assertEquals(false, label0.hasChildren());
      assertEquals("130", label0.toString());
      assertEquals(130, label0.getType());
      assertEquals(1, label0.getLength());
      assertEquals(-1, label0.getAbsolutePosition());
      assertEquals(-58, label0.getPosition());
      assertEquals(1, label0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-57, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(57, astRoot0.getAbsolutePosition());
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(57, astRoot0.getPosition());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getLineno());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.depth());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getFunctionCount());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals("use strict", simpleSourceFile0.toString());
      assertEquals(false, simpleSourceFile0.isExtern());
      assertEquals("use strict", simpleSourceFile0.getName());
      
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test
  public void test3() {}
//   @Test
//   public void test3()  throws Throwable  {
//       int int0 = 63;
//       AstRoot astRoot0 = new AstRoot(int0);
//       //  // Unstable assertion: assertNotNull(astRoot0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(false, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(63, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(63, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       
//       String string0 = "iOIr9sse9A\\GZA'@ki%6";
//       boolean boolean0 = true;
//       UnaryExpression unaryExpression0 = new UnaryExpression(int0);
//       //  // Unstable assertion: assertNotNull(unaryExpression0);
//       //  // Unstable assertion: assertEquals(-1, unaryExpression0.getOperator());
//       //  // Unstable assertion: assertEquals(-1, unaryExpression0.getLineno());
//       //  // Unstable assertion: assertEquals(0, unaryExpression0.depth());
//       //  // Unstable assertion: assertEquals(-1, unaryExpression0.getType());
//       //  // Unstable assertion: assertNull(unaryExpression0.getJsDoc());
//       //  // Unstable assertion: assertEquals("-1", unaryExpression0.toString());
//       //  // Unstable assertion: assertEquals(63, unaryExpression0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(63, unaryExpression0.getPosition());
//       //  // Unstable assertion: assertEquals(true, unaryExpression0.isPrefix());
//       //  // Unstable assertion: assertEquals(false, unaryExpression0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, unaryExpression0.isPostfix());
//       //  // Unstable assertion: assertEquals(1, unaryExpression0.getLength());
//       
//       SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
//       //  // Unstable assertion: assertNotNull(simpleSourceFile0);
//       //  // Unstable assertion: assertEquals("iOIr9sse9A\\GZA'@ki%6", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals("iOIr9sse9A\\GZA'@ki%6", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(true, simpleSourceFile0.isExtern());
//       
//       astRoot0.addChildToBack((Node) unaryExpression0);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(63, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(63, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, unaryExpression0.getOperator());
//       //  // Unstable assertion: assertEquals(-1, unaryExpression0.getLineno());
//       //  // Unstable assertion: assertEquals(0, unaryExpression0.depth());
//       //  // Unstable assertion: assertEquals(-1, unaryExpression0.getType());
//       //  // Unstable assertion: assertNull(unaryExpression0.getJsDoc());
//       //  // Unstable assertion: assertEquals("-1", unaryExpression0.toString());
//       //  // Unstable assertion: assertEquals(63, unaryExpression0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(63, unaryExpression0.getPosition());
//       //  // Unstable assertion: assertEquals(true, unaryExpression0.isPrefix());
//       //  // Unstable assertion: assertEquals(false, unaryExpression0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, unaryExpression0.isPostfix());
//       //  // Unstable assertion: assertEquals(1, unaryExpression0.getLength());
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(63, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(63, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       
//       com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) toolErrorReporter0);
//       //  // Unstable assertion: assertNotNull(node0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceStart());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getFunctionCount());
//       //  // Unstable assertion: assertEquals(1, astRoot0.getLength());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getRegexpCount());
//       //  // Unstable assertion: assertEquals(63, astRoot0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEndLineno());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getBaseLineno());
//       //  // Unstable assertion: assertNull(astRoot0.getEncodedSource());
//       //  // Unstable assertion: assertNull(astRoot0.getJsDoc());
//       //  // Unstable assertion: assertNull(astRoot0.getSourceName());
//       //  // Unstable assertion: assertEquals(0, astRoot0.getParamCount());
//       //  // Unstable assertion: assertEquals(63, astRoot0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, astRoot0.isInStrictMode());
//       //  // Unstable assertion: assertEquals(0, astRoot0.depth());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getLineno());
//       //  // Unstable assertion: assertEquals(136, astRoot0.getType());
//       //  // Unstable assertion: assertEquals(-1, astRoot0.getEncodedSourceEnd());
//       //  // Unstable assertion: assertEquals("136", astRoot0.toString());
//       //  // Unstable assertion: assertEquals(true, astRoot0.hasChildren());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals("iOIr9sse9A\\GZA'@ki%6", node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(true, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(132, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(1, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(true, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(1, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(true, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals("iOIr9sse9A\\GZA'@ki%6", simpleSourceFile0.toString());
//       //  // Unstable assertion: assertEquals("iOIr9sse9A\\GZA'@ki%6", simpleSourceFile0.getName());
//       //  // Unstable assertion: assertEquals(true, simpleSourceFile0.isExtern());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isSealed());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(63, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//   }

  @Test
  public void test4()  throws Throwable  {
      int int0 = 4586;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(4586, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(4586, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(1, astRoot0.getLength());
      
      String string0 = "0";
      boolean boolean0 = true;
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      assertNotNull(simpleSourceFile0);
      assertEquals(true, simpleSourceFile0.isExtern());
      assertEquals("0", simpleSourceFile0.getName());
      assertEquals("0", simpleSourceFile0.toString());
      
      ObjectProperty objectProperty0 = new ObjectProperty(int0, int0);
      assertNotNull(objectProperty0);
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(0, objectProperty0.depth());
      assertEquals(4586, objectProperty0.getAbsolutePosition());
      assertEquals("103", objectProperty0.toString());
      assertEquals(4586, objectProperty0.getPosition());
      assertEquals(4586, objectProperty0.getLength());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      
      astRoot0.addChild((AstNode) objectProperty0);
      assertEquals(false, objectProperty0.hasChildren());
      assertEquals(false, objectProperty0.isSetter());
      assertEquals(false, objectProperty0.isGetter());
      assertEquals(103, objectProperty0.getType());
      assertEquals(-1, objectProperty0.getOperatorPosition());
      assertEquals(1, objectProperty0.depth());
      assertEquals(4586, objectProperty0.getAbsolutePosition());
      assertEquals(0, objectProperty0.getPosition());
      assertEquals("103", objectProperty0.toString());
      assertEquals(4586, objectProperty0.getLength());
      assertNull(objectProperty0.getJsDoc());
      assertEquals(-1, objectProperty0.getLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(4586, astRoot0.getLength());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(4586, astRoot0.getPosition());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.depth());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(4586, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, (StaticSourceFile) simpleSourceFile0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 103
         //
      }
  }
}
