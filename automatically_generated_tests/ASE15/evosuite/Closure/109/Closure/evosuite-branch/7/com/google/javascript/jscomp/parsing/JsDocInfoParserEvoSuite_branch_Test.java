/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:31:40 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.ArrayComprehensionLoop;
import com.google.javascript.rhino.head.ast.Assignment;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.ExpressionStatement;
import com.google.javascript.rhino.head.ast.NumberLiteral;
import com.google.javascript.rhino.head.ast.PropertyGet;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.io.PrintStream;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = ":ux0W1hvlhV%=$5JW";
      int int0 = (-2);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0, int0);
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(0, assignment0.depth());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals("-1", assignment0.toString());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-2, assignment0.getPosition());
      assertNotNull(assignment0);
      
      Comment comment0 = assignment0.getJsDocNode();
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(0, assignment0.depth());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals("-1", assignment0.toString());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-2, assignment0.getPosition());
      assertNull(comment0);
      
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAnd());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(0, assignment0.depth());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals("-1", assignment0.toString());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-2, assignment0.getPosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVar());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isNull());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAnd());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "?{?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "/]ButJ<$gB7O8$)_m\"";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      PropertyGet propertyGet0 = new PropertyGet(int0);
      assertEquals(0, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(1, propertyGet0.getLength());
      assertEquals(0, propertyGet0.getPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals("33", propertyGet0.toString());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(33, propertyGet0.getType());
      assertNotNull(propertyGet0);
      
      Comment comment0 = propertyGet0.getJsDocNode();
      assertEquals(0, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(1, propertyGet0.getLength());
      assertEquals(0, propertyGet0.getPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals("33", propertyGet0.toString());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(33, propertyGet0.getType());
      assertNull(comment0);
      
      Node node0 = null;
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(1, propertyGet0.getLength());
      assertEquals(0, propertyGet0.getPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals("33", propertyGet0.toString());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(33, propertyGet0.getType());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(1, propertyGet0.getLength());
      assertEquals(0, propertyGet0.getPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals("33", propertyGet0.toString());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(33, propertyGet0.getType());
      assertEquals("[]", treeSet0.toString());
      assertNull(node1);
      
      JsDocToken jsDocToken1 = JsDocToken.LB;
      assertNotSame(jsDocToken1, jsDocToken0);
      
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, propertyGet0.getAbsolutePosition());
      assertEquals(false, propertyGet0.hasChildren());
      assertEquals(1, propertyGet0.getLength());
      assertEquals(0, propertyGet0.getPosition());
      assertEquals(0, propertyGet0.depth());
      assertEquals(-1, propertyGet0.getOperatorPosition());
      assertEquals("33", propertyGet0.toString());
      assertNull(propertyGet0.getJsDoc());
      assertEquals(-1, propertyGet0.getLineno());
      assertEquals(33, propertyGet0.getType());
      assertEquals(false, node2.isExprResult());
      assertEquals(false, node2.isTrue());
      assertEquals(false, node2.isEmpty());
      assertEquals(false, node2.isCatch());
      assertEquals(false, node2.isLabel());
      assertEquals(false, node2.isSetterDef());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isThis());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.mayMutateArguments());
      assertEquals(false, node2.isGetProp());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getChangeTime());
      assertEquals(false, node2.isCast());
      assertEquals(false, node2.isThrow());
      assertEquals(false, node2.isRegExp());
      assertEquals(false, node2.isNull());
      assertEquals(false, node2.isGetterDef());
      assertEquals(false, node2.isFromExterns());
      assertEquals(false, node2.isScript());
      assertEquals(false, node2.isDec());
      assertEquals(false, node2.isContinue());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isFor());
      assertEquals(0, node2.getSideEffectFlags());
      assertNull(node2.getSourceFileName());
      assertEquals(false, node2.isVoid());
      assertEquals(false, node2.isArrayLit());
      assertEquals(false, node2.isParamList());
      assertEquals(false, node2.isSwitch());
      assertEquals(false, node2.isOnlyModifiesArgumentsCall());
      assertEquals(false, node2.isOr());
      assertEquals(false, node2.isReturn());
      assertEquals(false, node2.isBreak());
      assertEquals(false, node2.isNumber());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isLabelName());
      assertEquals(false, node2.isCase());
      assertEquals(false, node2.isObjectLit());
      assertEquals(-1, node2.getCharno());
      assertEquals(0, node2.getLength());
      assertEquals(false, node2.isStringKey());
      assertEquals(false, node2.isVar());
      assertEquals(false, node2.isFalse());
      assertEquals(false, node2.isCall());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isBlock());
      assertEquals(false, node2.isName());
      assertEquals(false, node2.isComma());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isWhile());
      assertEquals(false, node2.isNot());
      assertEquals(false, node2.isGetElem());
      assertEquals(false, node2.isAdd());
      assertEquals(false, node2.isAssignAdd());
      assertEquals(308, node2.getType());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isTypeOf());
      assertEquals(false, node2.isDebugger());
      assertEquals(false, node2.isNE());
      assertEquals(false, node2.isDo());
      assertEquals(false, node2.isAssign());
      assertEquals(false, node2.isString());
      assertEquals(false, node2.isInc());
      assertEquals(false, node2.isTry());
      assertEquals(false, node2.isFunction());
      assertEquals(false, node2.isWith());
      assertEquals(false, node2.isInstanceOf());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isNew());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(true, node2.mayMutateGlobalStateOrThrow());
      assertEquals(false, node2.isDelProp());
      assertEquals(false, node2.isIf());
      assertEquals(false, node2.isHook());
      assertEquals(false, node2.isAnd());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isDefaultCase());
      assertEquals(false, node2.isIn());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(node2);
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertNotSame(jsDocToken1, jsDocToken0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "?[j,0:K?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "z?6";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.hasOneChild());
      assertEquals(304, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      int int0 = 0;
      String string1 = "(Ljava/lang/String;)Ljava/lang/StringBuffer;";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertNotNull(jsDocTokenStream0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement(int0, int0);
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getPosition());
      assertEquals(0, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertNotNull(expressionStatement0);
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getPosition());
      assertEquals(0, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertNull(comment0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.hasOneChild());
      assertEquals(304, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getPosition());
      assertEquals(0, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.hasOneChild());
      assertEquals(304, node0.getType());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals("133", expressionStatement0.toString());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getPosition());
      assertEquals(0, expressionStatement0.getLength());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(133, expressionStatement0.getType());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jSDocInfo0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "wlx|{`Q:+e";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "%^.|MCi^$?|Fmq";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.hasChildren());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(3, node0.getChildCount());
      assertEquals(false, node0.isAdd());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(9, node0.getLength());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWith());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFromExterns());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isInc());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertNotNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "function (";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "3";
      int int0 = (-2);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0, int0);
      assertEquals(-2, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-2, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertNotNull(assignment0);
      
      Comment comment0 = assignment0.getJsDocNode();
      assertEquals(-2, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-2, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertNull(comment0);
      
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(-2, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-2, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isWhile());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isDec());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isVoid());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isScript());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isEmpty());
      assertEquals(0, node1.getChildCount());
      assertEquals(302, node1.getType());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isDo());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isContinue());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isAnd());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isContinue());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isName());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(-2, assignment0.getPosition());
      assertEquals(-1, assignment0.getType());
      assertEquals(-2, assignment0.getLength());
      assertNull(assignment0.getJsDoc());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-1, assignment0.getLineno());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "/ButJ<!B7O8$)_m\"";
      int int0 = 6;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertNotNull(arrayComprehensionLoop0);
      
      Comment comment0 = arrayComprehensionLoop0.getJsDocNode();
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertNull(comment0);
      
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(6, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertNotNull(node0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getChildCount());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(6, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try {
        Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "/ButJ<$0B7O8$)_m\\\"";
      int int0 = 5;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString(string0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      EmptyExpression emptyExpression0 = new EmptyExpression();
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNull(emptyExpression0.getJsDoc());
      assertNotNull(emptyExpression0);
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNull(emptyExpression0.getJsDoc());
      assertNull(comment0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNull(emptyExpression0.getJsDoc());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isFunction());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isAdd());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isRegExp());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isCall());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isInc());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isNew());
      assertEquals(20498, node1.getSourcePosition());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isThis());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isWhile());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isDo());
      assertEquals(18, node1.getCharno());
      assertEquals(5, node1.getLineno());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isNot());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isParamList());
      assertEquals(306, node1.getType());
      assertEquals(false, node1.isLabel());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFalse());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isName());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isNE());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNull(emptyExpression0.getJsDoc());
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = ">";
      int int0 = 48;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(">", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(48, comment0.getLength());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertNotNull(comment0);
      
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(">", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(48, comment0.getLength());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isRegExp());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isTrue());
      assertEquals(196656, node1.getSourcePosition());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isGetterDef());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isBreak());
      assertEquals(false, node1.isThis());
      assertEquals(48, node1.getCharno());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isInc());
      assertEquals(0, node1.getLength());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isCase());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.isGetProp());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isObjectLit());
      assertEquals(false, node1.isContinue());
      assertEquals(304, node1.getType());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isOr());
      assertEquals(48, node1.getLineno());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isSwitch());
      assertEquals(false, node1.isCast());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isVar());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(">", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(48, comment0.getLength());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "?,g/\\+!YE3MS`A";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertNotNull(node0);
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       String string0 = "/ButJ<$0B7O8$)_m\\\"";
//       int int0 = 6;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Assignment assignment0 = new Assignment(int0, int0);
//       //  // Unstable assertion: assertEquals(6, assignment0.getPosition());
//       //  // Unstable assertion: assertEquals(6, assignment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getType());
//       //  // Unstable assertion: assertEquals(0, assignment0.depth());
//       //  // Unstable assertion: assertEquals(6, assignment0.getLength());
//       //  // Unstable assertion: assertEquals(false, assignment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getLineno());
//       //  // Unstable assertion: assertEquals("-1", assignment0.toString());
//       //  // Unstable assertion: assertNull(assignment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getOperatorPosition());
//       //  // Unstable assertion: assertNotNull(assignment0);
//       
//       Comment comment0 = assignment0.getJsDocNode();
//       //  // Unstable assertion: assertEquals(6, assignment0.getPosition());
//       //  // Unstable assertion: assertEquals(6, assignment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getType());
//       //  // Unstable assertion: assertEquals(0, assignment0.depth());
//       //  // Unstable assertion: assertEquals(6, assignment0.getLength());
//       //  // Unstable assertion: assertEquals(false, assignment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getLineno());
//       //  // Unstable assertion: assertEquals("-1", assignment0.toString());
//       //  // Unstable assertion: assertNull(assignment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getOperatorPosition());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
//       //  // Unstable assertion: assertEquals(4, jsDocToken0.ordinal());
//       //  // Unstable assertion: assertEquals("STRING", jsDocToken0.toString());
//       //  // Unstable assertion: assertEquals("STRING", jsDocToken0.name());
//       
//       Node node0 = Node.newString(string0);
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertNotNull(node0);
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(10, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(10, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(10, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(6, assignment0.getPosition());
//       //  // Unstable assertion: assertEquals(6, assignment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getType());
//       //  // Unstable assertion: assertEquals(0, assignment0.depth());
//       //  // Unstable assertion: assertEquals(6, assignment0.getLength());
//       //  // Unstable assertion: assertEquals(false, assignment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getLineno());
//       //  // Unstable assertion: assertEquals("-1", assignment0.toString());
//       //  // Unstable assertion: assertNull(assignment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test18()  throws Throwable  {
      String string0 = ">";
      int int0 = 48;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(48, comment0.getLength());
      assertEquals(">", comment0.getValue());
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(48, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(48, comment0.getAbsolutePosition());
      assertNotNull(comment0);
      
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNot());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCase());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isRegExp());
      assertEquals(48, comment0.getLength());
      assertEquals(">", comment0.getValue());
      assertEquals(-1, comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(false, comment0.hasChildren());
      assertEquals(48, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "z?6";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertNotNull(node0);
      
      int int0 = 0;
      ExpressionStatement expressionStatement0 = new ExpressionStatement(int0, int0);
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getLength());
      assertNotNull(expressionStatement0);
      
      Comment comment0 = expressionStatement0.getJsDocNode();
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getLength());
      assertNull(comment0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string1 = "\n";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0);
      assertNotNull(jsDocTokenStream0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(133, expressionStatement0.getType());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(0, expressionStatement0.getAbsolutePosition());
      assertEquals(0, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(0, expressionStatement0.getLength());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isParamList());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isOr());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(jSDocInfo0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "/ButJ<$0B7O8$)_m\\\"";
      int int0 = 5;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      node0.setSourceFileForTesting(string0);
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("/ButJ<$0B7O8$)_m\\\"", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      
      EmptyExpression emptyExpression0 = new EmptyExpression();
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertEquals("128", emptyExpression0.toString());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNotNull(emptyExpression0);
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertEquals("128", emptyExpression0.toString());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertNull(comment0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("/ButJ<$0B7O8$)_m\\\"", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertEquals("128", emptyExpression0.toString());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNew());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals("/ButJ<$0B7O8$)_m\\\"", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNE());
      assertEquals(40, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, emptyExpression0.depth());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertEquals("128", emptyExpression0.toString());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals("/ButJ<$0B7O8$)_m\\\"", jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertNotNull(jSDocInfo0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "/ButJ<$0B7O8$)_m\\\"";
      int int0 = 5;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString(string0);
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      EmptyExpression emptyExpression0 = new EmptyExpression();
      assertEquals(128, emptyExpression0.getType());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNotNull(emptyExpression0);
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertEquals(128, emptyExpression0.getType());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNull(comment0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
      assertNotNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDelProp());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isNew());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isDisposes());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExpose());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(true, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isStableIdGenerator());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isMappedIdGenerator());
      assertEquals(true, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.makesDicts());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isJaggerInject());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isWizaction());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.makesStructs());
      assertEquals(false, jSDocInfo0.isJaggerModule());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(0, emptyExpression0.depth());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(-1, emptyExpression0.getPosition());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(-1, emptyExpression0.getAbsolutePosition());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "(8,M<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "%^.<|MCi^$WkFmq";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isReturn());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isThis());
      assertEquals(5, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isEmpty());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "?{j,0:K?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ">";
      int int0 = 48;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(48, comment0.getPosition());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals(">", comment0.getValue());
      assertEquals(48, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNotNull(comment0);
      
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCase());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(48, comment0.getPosition());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals(">", comment0.getValue());
      assertEquals(48, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCase());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals("[]", treeSet0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(48, comment0.getPosition());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals(">", comment0.getValue());
      assertEquals(48, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDebugger());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCast());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCase());
      assertEquals(48, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "%.<%MCi$WkFmq";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "3";
      int int0 = (-2);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Assignment assignment0 = new Assignment(int0, int0);
      assertEquals(-1, assignment0.getLineno());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-2, assignment0.getPosition());
      assertNotNull(assignment0);
      
      Comment comment0 = assignment0.getJsDocNode();
      assertEquals(-1, assignment0.getLineno());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-2, assignment0.getPosition());
      assertNull(comment0);
      
      Node node0 = Node.newString(string0);
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, assignment0.getLineno());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-2, assignment0.getPosition());
      assertNotNull(jsDocInfoParser0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertNotNull(node_FileLevelJsDocBuilder0);
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, assignment0.getLineno());
      assertNull(assignment0.getJsDoc());
      assertEquals(-1, assignment0.getType());
      assertEquals(false, assignment0.hasChildren());
      assertEquals(-2, assignment0.getLength());
      assertEquals(-2, assignment0.getAbsolutePosition());
      assertEquals(0, assignment0.depth());
      assertEquals("-1", assignment0.toString());
      assertEquals(-1, assignment0.getOperatorPosition());
      assertEquals(-2, assignment0.getPosition());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "/ButJ<!B7O8$)_m\"";
      int int0 = 6;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      ArrayComprehensionLoop arrayComprehensionLoop0 = new ArrayComprehensionLoop();
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertNotNull(arrayComprehensionLoop0);
      
      Comment comment0 = arrayComprehensionLoop0.getJsDocNode();
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertNull(comment0);
      
      Node node0 = Node.newString(int0, string0);
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertNotNull(node0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(0, arrayComprehensionLoop0.depth());
      assertEquals(false, arrayComprehensionLoop0.hasChildren());
      assertEquals(1, arrayComprehensionLoop0.getLength());
      assertEquals(-1, arrayComprehensionLoop0.getLineno());
      assertEquals(-1, arrayComprehensionLoop0.getLp());
      assertEquals(-1, arrayComprehensionLoop0.getAbsolutePosition());
      assertEquals(-1, arrayComprehensionLoop0.getInPosition());
      assertEquals(-1, arrayComprehensionLoop0.getEachPosition());
      assertEquals(false, arrayComprehensionLoop0.isForEach());
      assertEquals("119", arrayComprehensionLoop0.toString());
      assertEquals(-1, arrayComprehensionLoop0.getRp());
      assertNull(arrayComprehensionLoop0.getJsDoc());
      assertEquals(119, arrayComprehensionLoop0.getType());
      assertEquals(-1, arrayComprehensionLoop0.getPosition());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isVar());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isParamList());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFalse());
      assertEquals(6, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals("[]", treeSet0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "?=h2+Yu1qg8usj3Pt";
      int int0 = (-2522);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      NumberLiteral numberLiteral0 = new NumberLiteral(int0, int0);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-2522, numberLiteral0.getPosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-2522, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-2522, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertNotNull(numberLiteral0);
      
      Comment comment0 = numberLiteral0.getJsDocNode();
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-2522, numberLiteral0.getPosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-2522, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-2522, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertNull(comment0);
      
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(-2522, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-2522, numberLiteral0.getPosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-2522, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-2522, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(-2522, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, node1.isGetProp());
      assertEquals(304, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isString());
      assertEquals(false, node1.isFunction());
      assertEquals(false, node1.isEmpty());
      assertEquals(false, node1.isCase());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isThis());
      assertEquals(false, node1.isDo());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isName());
      assertEquals(false, node1.isAdd());
      assertEquals(false, node1.isDec());
      assertEquals(false, node1.isArrayLit());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isInstanceOf());
      assertEquals(false, node1.isTrue());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isAnd());
      assertEquals(false, node1.isStringKey());
      assertEquals(false, node1.hasOneChild());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isCatch());
      assertEquals(false, node1.isSetterDef());
      assertEquals(false, node1.isOnlyModifiesArgumentsCall());
      assertEquals(true, node1.mayMutateGlobalStateOrThrow());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isNot());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNumber());
      assertEquals(false, node1.isDelProp());
      assertEquals(false, node1.isWhile());
      assertEquals(false, node1.isFalse());
      assertEquals(false, node1.isOr());
      assertEquals(false, node1.isTypeOf());
      assertEquals(false, node1.isAssign());
      assertEquals(false, node1.isBlock());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isLabelName());
      assertEquals(false, node1.isGetElem());
      assertEquals(false, node1.isNew());
      assertEquals(false, node1.isDefaultCase());
      assertEquals(true, node1.mayMutateArguments());
      assertEquals(false, node1.isReturn());
      assertEquals(false, node1.isComma());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isBreak());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isGetterDef());
      assertEquals(0, node1.getChangeTime());
      assertEquals(false, node1.isIf());
      assertEquals(false, node1.isNull());
      assertEquals(false, node1.isNE());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isTry());
      assertEquals(false, node1.isIn());
      assertEquals(false, node1.isCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isHook());
      assertEquals(false, node1.isDebugger());
      assertEquals(false, node1.isRegExp());
      assertEquals(false, node1.isScript());
      assertEquals(false, node1.isFor());
      assertEquals(false, node1.isVoid());
      assertEquals(false, node1.isLabel());
      assertEquals(false, node1.isCast());
      assertEquals(0, node1.getLength());
      assertEquals(false, node1.isVar());
      assertEquals(false, node1.isAssignAdd());
      assertEquals(false, node1.isWith());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isThrow());
      assertEquals(false, node1.isSwitch());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isExprResult());
      assertEquals(false, node1.isParamList());
      assertEquals(false, node1.isObjectLit());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isContinue());
      assertEquals(false, node1.isInc());
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(-2522, numberLiteral0.getPosition());
      assertEquals(0, numberLiteral0.depth());
      assertEquals(-2522, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals("40", numberLiteral0.toString());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-2522, numberLiteral0.getAbsolutePosition());
      assertNull(numberLiteral0.getJsDoc());
      assertNull(numberLiteral0.getValue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.mayMutateArguments());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDelProp());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.mayMutateGlobalStateOrThrow());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isScript());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOnlyModifiesArgumentsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isRegExp());
      assertEquals(-2522, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isStringKey());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isCast());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isContinue());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       String string0 = "(Gz]z,Vy]M 9UavipO";
//       int int0 = 6;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       Assignment assignment0 = new Assignment(int0, int0);
//       //  // Unstable assertion: assertEquals("-1", assignment0.toString());
//       //  // Unstable assertion: assertEquals(6, assignment0.getPosition());
//       //  // Unstable assertion: assertEquals(0, assignment0.depth());
//       //  // Unstable assertion: assertNull(assignment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(6, assignment0.getLength());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, assignment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getType());
//       //  // Unstable assertion: assertEquals(6, assignment0.getAbsolutePosition());
//       //  // Unstable assertion: assertNotNull(assignment0);
//       
//       Comment comment0 = assignment0.getJsDocNode();
//       //  // Unstable assertion: assertEquals("-1", assignment0.toString());
//       //  // Unstable assertion: assertEquals(6, assignment0.getPosition());
//       //  // Unstable assertion: assertEquals(0, assignment0.depth());
//       //  // Unstable assertion: assertNull(assignment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(6, assignment0.getLength());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, assignment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getType());
//       //  // Unstable assertion: assertEquals(6, assignment0.getAbsolutePosition());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       Node node0 = Node.newString(string0);
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertNotNull(node0);
//       
//       TreeSet<String> treeSet0 = new TreeSet<String>();
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(treeSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
//       Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       Context context0 = Context.enter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(10, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertNotNull(context0);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(10, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertEquals(10, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals("-1", assignment0.toString());
//       //  // Unstable assertion: assertEquals(6, assignment0.getPosition());
//       //  // Unstable assertion: assertEquals(0, assignment0.depth());
//       //  // Unstable assertion: assertNull(assignment0.getJsDoc());
//       //  // Unstable assertion: assertEquals(6, assignment0.getLength());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getOperatorPosition());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getLineno());
//       //  // Unstable assertion: assertEquals(false, assignment0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, assignment0.getType());
//       //  // Unstable assertion: assertEquals(6, assignment0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(false, node0.isReturn());
//       //  // Unstable assertion: assertEquals(false, node0.isParamList());
//       //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
//       //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
//       //  // Unstable assertion: assertEquals(40, node0.getType());
//       //  // Unstable assertion: assertEquals(false, node0.isScript());
//       //  // Unstable assertion: assertEquals(false, node0.isIn());
//       //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isNumber());
//       //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isHook());
//       //  // Unstable assertion: assertEquals(false, node0.isNot());
//       //  // Unstable assertion: assertEquals(false, node0.isIf());
//       //  // Unstable assertion: assertEquals(-1, node0.getCharno());
//       //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
//       //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
//       //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
//       //  // Unstable assertion: assertEquals(false, node0.isNE());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateArguments());
//       //  // Unstable assertion: assertEquals(false, node0.hasChildren());
//       //  // Unstable assertion: assertEquals(false, node0.isLabelName());
//       //  // Unstable assertion: assertEquals(0, node0.getChildCount());
//       //  // Unstable assertion: assertEquals(false, node0.isContinue());
//       //  // Unstable assertion: assertEquals(false, node0.isWith());
//       //  // Unstable assertion: assertEquals(false, node0.isVoid());
//       //  // Unstable assertion: assertEquals(false, node0.isEmpty());
//       //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
//       //  // Unstable assertion: assertEquals(false, node0.isTrue());
//       //  // Unstable assertion: assertEquals(false, node0.isCall());
//       //  // Unstable assertion: assertEquals(false, node0.isFor());
//       //  // Unstable assertion: assertEquals(false, node0.isRegExp());
//       //  // Unstable assertion: assertEquals(false, node0.isThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isWhile());
//       //  // Unstable assertion: assertEquals(false, node0.isAnd());
//       //  // Unstable assertion: assertEquals(false, node0.isStringKey());
//       //  // Unstable assertion: assertEquals(0, node0.getLength());
//       //  // Unstable assertion: assertEquals(false, node0.isFalse());
//       //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
//       //  // Unstable assertion: assertEquals(true, node0.isString());
//       //  // Unstable assertion: assertEquals(false, node0.isSwitch());
//       //  // Unstable assertion: assertNull(node0.getSourceFileName());
//       //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
//       //  // Unstable assertion: assertEquals(false, node0.isThis());
//       //  // Unstable assertion: assertEquals(false, node0.isCast());
//       //  // Unstable assertion: assertEquals(false, node0.isNull());
//       //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
//       //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
//       //  // Unstable assertion: assertEquals(false, node0.isCatch());
//       //  // Unstable assertion: assertEquals(false, node0.isNew());
//       //  // Unstable assertion: assertEquals(false, node0.isAssign());
//       //  // Unstable assertion: assertEquals(false, node0.isGetProp());
//       //  // Unstable assertion: assertEquals(false, node0.isOr());
//       //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
//       //  // Unstable assertion: assertEquals(false, node0.isDelProp());
//       //  // Unstable assertion: assertEquals(false, node0.isExprResult());
//       //  // Unstable assertion: assertEquals(false, node0.isCase());
//       //  // Unstable assertion: assertEquals(false, node0.isBreak());
//       //  // Unstable assertion: assertEquals(false, node0.isName());
//       //  // Unstable assertion: assertEquals(false, node0.isTry());
//       //  // Unstable assertion: assertEquals(false, node0.isBlock());
//       //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesArgumentsCall());
//       //  // Unstable assertion: assertEquals(false, node0.isAdd());
//       //  // Unstable assertion: assertEquals(false, node0.isLabel());
//       //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
//       //  // Unstable assertion: assertEquals(true, node0.mayMutateGlobalStateOrThrow());
//       //  // Unstable assertion: assertEquals(false, node0.isDebugger());
//       //  // Unstable assertion: assertEquals(false, node0.isDec());
//       //  // Unstable assertion: assertEquals(0, node0.getChangeTime());
//       //  // Unstable assertion: assertEquals(-1, node0.getLineno());
//       //  // Unstable assertion: assertEquals(false, node0.isFunction());
//       //  // Unstable assertion: assertEquals(false, node0.isInc());
//       //  // Unstable assertion: assertEquals(false, node0.isVar());
//       //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
//       //  // Unstable assertion: assertEquals(false, node0.isGetElem());
//       //  // Unstable assertion: assertEquals(false, node0.isComma());
//       //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
//       //  // Unstable assertion: assertEquals(false, node0.isDo());
//       //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
//       //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
//       //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
//       //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
//       //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }
}
