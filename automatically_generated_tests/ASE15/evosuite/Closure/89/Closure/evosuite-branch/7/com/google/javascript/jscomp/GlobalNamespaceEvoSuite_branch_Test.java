/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 01:05:41 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.Node;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class GlobalNamespaceEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref1.isSet();
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "'=GyaFOd)cY[";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      String string1 = globalNamespace_Name2.fullName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(string1, string0);
      assertEquals("'=GyaFOd)cY[.'=GyaFOd)cY[", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "=1lEYo\\w~1LrgjNK";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleName();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "UM$)9MX,i=d*";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name2.isSimpleName();
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "=1lEYo\\w~1LrgjNK";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean0 == boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      globalNamespace_Name2.setIsClassOrEnum();
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean0 == boolean1);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "=1lEYo\\w~1LrgjNK";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "'=GyaFOd)cY[";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "local";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "'=GyaFOd)cY[";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.shouldKeepKeys();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "=1lEYo\\w~1LrgjNK";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "): globalSets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(globalNamespace_Name1);
      
      int int0 = 115;
      globalNamespace_Name1.globalSets = int0;
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      
      boolean boolean0 = globalNamespace_Name1.canCollapse();
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.removeUnusedLocalVars);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "): globalSets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = new GlobalNamespace.Name(string0, globalNamespace_Name1, boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      boolean boolean2 = globalNamespace_Name2.canCollapse();
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "UM$)9MX,i=d*";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.setIsClassOrEnum();
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "'=GyaFOd)cY[";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "): globalSets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "'=GyaFOd)cY[";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "=1lEYo\\_w~1LrNK";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.DIRECT_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "local";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "=1lEYo\\_w~1LrNK";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
      assertNull(globalNamespace_Ref1);
      
      // Undeclared exception!
      try {
        globalNamespace_Name1.removeRef(globalNamespace_Ref1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "): globalSets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref1);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = "mz#4T?*71T,S[c";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      String string0 = "mz#4T?*71T,S[c";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "): globalSets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      // Undeclared exception!
      try {
        globalNamespace_Name1.removeRef(globalNamespace_Ref0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "local";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "-QP";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertNotNull(node0);
      
      int int0 = 799;
      Node node1 = Node.newString(string0, int0, int0);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(40, node1.getType());
      assertEquals(799, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(799, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertNotSame(node1, node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node1, node1);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(40, node1.getType());
      assertEquals(799, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(799, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(globalNamespace0);
      assertNotSame(node1, node0);
      
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(40, node1.getType());
      assertEquals(799, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(799, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(map0);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "t";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(globalNamespace0);
      
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
      assertNotNull(map0);
      
      Map<String, GlobalNamespace.Name> map1 = globalNamespace0.getNameIndex();
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, map1.isEmpty());
      assertEquals(0, map1.size());
      assertNotNull(map1);
      assertSame(map1, map0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0, node0);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertNotNull(globalNamespace0);
      
      // Undeclared exception!
      try {
        List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.initCompilerOptionsIfTesting();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      
      int int0 = 0;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getType());
      assertNotNull(node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(globalNamespace0);
      
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getType());
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(map0);
      
      List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getType());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "'=GyaFOd)cY[";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      String string1 = globalNamespace_Name1.toString();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("'=GyaFOd)cY[ (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "-QP";
      Compiler compiler0 = new Compiler();
      //  // Unstable assertion: assertNotNull(compiler0);
      
      Node node0 = compiler0.parseTestCode(string0);
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertNotNull(node0);
      
      Node node1 = RuntimeTypeCheck.getBoilerplateCode(compiler0, string0);
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertNotNull(node1);
      //  // Unstable assertion: assertNotSame(node1, node0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node1);
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertNotNull(globalNamespace0);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(false, map0.isEmpty());
      //  // Unstable assertion: assertEquals(26, map0.size());
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertNotNull(map0);
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 204;
      String string0 = "): globalSets=";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(204, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(204, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(204, node0.getType());
      assertNotNull(node0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      LoggerErrorManager loggerErrorManager0 = (LoggerErrorManager)compiler0.getErrorManager();
      assertEquals(0, loggerErrorManager0.getWarningCount());
      assertEquals(0.0, loggerErrorManager0.getTypedPercent(), 0.01D);
      assertEquals(0, loggerErrorManager0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(loggerErrorManager0);
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(204, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(204, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(204, node0.getType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(globalNamespace0);
      
      CodingConvention codingConvention0 = null;
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(typedScopeCreator0);
      
      Scope scope0 = typedScopeCreator0.createInitialScope(node0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(204, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(204, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(204, node0.getType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(scope0);
      
      HashSet<Node> hashSet0 = new HashSet<Node>();
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertNotNull(hashSet0);
      
      globalNamespace0.scanNewNodes(scope0, hashSet0);
      assertEquals(33, scope0.getVarCount());
      assertEquals(true, scope0.isGlobal());
      assertEquals(false, scope0.isLocal());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(204, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(204, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(204, node0.getType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
  }
}
