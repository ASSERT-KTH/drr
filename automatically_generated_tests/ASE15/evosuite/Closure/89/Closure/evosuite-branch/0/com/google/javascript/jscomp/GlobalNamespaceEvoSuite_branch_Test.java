/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:36:33 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.GlobalNamespace;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.RuntimeTypeCheck;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypedScopeCreator;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.junit.runner.RunWith;

 
public class GlobalNamespaceEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
  }

  @Test
  public void test01()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
  }

  @Test
  public void test02()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref1, globalNamespace_Ref0);
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
  }

  @Test
  public void test03()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.ALIASING_GET;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
  }

  @Test
  public void test04()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      // Undeclared exception!
      try {
        GlobalNamespace.Ref.markTwins(globalNamespace_Ref0, globalNamespace_Ref0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      boolean boolean0 = globalNamespace_Ref0.isSet();
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean1 == boolean0);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      String string1 = globalNamespace_Name2.fullName();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean1 == boolean0);
      assertNotNull(string1);
      assertEquals("OTouHER.OTouHER", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isSimpleName();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = ", caUyGets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name2.isSimpleName();
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      globalNamespace_Name2.setIsClassOrEnum();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      boolean boolean2 = globalNamespace_Name1.isNamespace();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertFalse(boolean2);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = ", caUyGets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.isNamespace();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "?L<IsBoy`H{";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      boolean boolean1 = globalNamespace_Name1.needsToBeStubbed();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.shouldKeepKeys();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_LOCAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.cloneAndReclassify(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertFalse(globalNamespace_Ref_Type0.equals((Object)globalNamespace_Ref_Type1));
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref0.equals((Object)globalNamespace_Ref1));
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      assertNotSame(globalNamespace_Ref_Type0, globalNamespace_Ref_Type1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref0, globalNamespace_Ref1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      
      GlobalNamespace.Name globalNamespace_Name2 = globalNamespace_Name1.addProperty(string0, boolean1);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean0 == boolean1);
      assertNotNull(globalNamespace_Name2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
      
      boolean boolean2 = globalNamespace_Name2.canCollapse();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(globalNamespace_Name2.equals((Object)globalNamespace_Name1));
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertFalse(globalNamespace_Name1.equals((Object)globalNamespace_Name2));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean2);
      assertNotSame(globalNamespace_Name2, globalNamespace_Name1);
      assertNotSame(globalNamespace_Name1, globalNamespace_Name2);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      globalNamespace_Name1.setIsClassOrEnum();
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = ", caUyGets=";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canCollapse();
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      boolean boolean1 = globalNamespace_Name1.canEliminate();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.CALL_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.addRefInternal(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type1 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotNull(globalNamespace_Ref1);
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref1);
      assertFalse(globalNamespace_Ref1.equals((Object)globalNamespace_Ref0));
      assertFalse(globalNamespace_Ref_Type1.equals((Object)globalNamespace_Ref_Type0));
      assertNotSame(globalNamespace_Ref1, globalNamespace_Ref0);
      assertNotSame(globalNamespace_Ref_Type1, globalNamespace_Ref_Type0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = true;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.ALIASING_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = null;
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.PROTOTYPE_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.addRef(globalNamespace_Ref0);
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.SET_FROM_GLOBAL;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      globalNamespace_Name1.removeRef(globalNamespace_Ref0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "ALIAkING_GET";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      GlobalNamespace.Ref globalNamespace_Ref0 = null;
      // Undeclared exception!
      try {
        globalNamespace_Name1.removeRef(globalNamespace_Ref0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      //  // Unstable assertion: assertNotNull(compiler0);
      
      String string0 = "_";
      Node node0 = compiler0.parseTestCode(string0);
      //  // Unstable assertion: assertNotNull(node0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      //  // Unstable assertion: assertNotNull(globalNamespace0);
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.getCodingConvention();
      //  // Unstable assertion: assertNotNull(googleCodingConvention0);
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      
      TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, googleCodingConvention0);
      //  // Unstable assertion: assertNotNull(typedScopeCreator0);
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      
      Scope scope0 = null;
      Scope scope1 = typedScopeCreator0.createScope(node0, scope0);
      //  // Unstable assertion: assertNotNull(scope1);
      //  // Unstable assertion: assertEquals(false, scope1.isLocal());
      //  // Unstable assertion: assertEquals(true, scope1.isGlobal());
      //  // Unstable assertion: assertEquals(33, scope1.getVarCount());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(0, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      
      HashSet<Node> hashSet0 = new HashSet<Node>();
      //  // Unstable assertion: assertNotNull(hashSet0);
      //  // Unstable assertion: assertEquals(0, hashSet0.size());
      //  // Unstable assertion: assertEquals(true, hashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", hashSet0.toString());
      
      Node node1 = RuntimeTypeCheck.getBoilerplateCode(compiler0, string0);
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertNotNull(node1);
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertNotSame(node1, node0);
      
      node0.addChildrenToBack(node1);
      //  // Unstable assertion: assertFalse(node1.equals((Object)node0));
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertEquals(false, node1.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node1.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node1.isOptionalArg());
      //  // Unstable assertion: assertEquals(1, node1.getLineno());
      //  // Unstable assertion: assertEquals(true, node1.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node1.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node1.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(35, node1.getChildCount());
      //  // Unstable assertion: assertEquals(false, node1.isQualifiedName());
      //  // Unstable assertion: assertEquals(true, node1.hasChildren());
      //  // Unstable assertion: assertEquals(true, node1.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(132, node1.getType());
      //  // Unstable assertion: assertEquals(0, node1.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node1.isQuotedString());
      //  // Unstable assertion: assertEquals(0, node1.getCharno());
      //  // Unstable assertion: assertEquals(false, node1.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node1.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node1.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertNotSame(node1, node0);
      //  // Unstable assertion: assertNotSame(node0, node1);
      
      globalNamespace0.scanNewNodes(scope1, hashSet0);
      //  // Unstable assertion: assertFalse(node0.equals((Object)node1));
      //  // Unstable assertion: assertEquals(0, hashSet0.size());
      //  // Unstable assertion: assertEquals(true, hashSet0.isEmpty());
      //  // Unstable assertion: assertEquals("[]", hashSet0.toString());
      //  // Unstable assertion: assertEquals(false, scope1.isLocal());
      //  // Unstable assertion: assertEquals(true, scope1.isGlobal());
      //  // Unstable assertion: assertEquals(33, scope1.getVarCount());
      //  // Unstable assertion: assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      //  // Unstable assertion: assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      //  // Unstable assertion: assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      //  // Unstable assertion: assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      //  // Unstable assertion: assertNull(googleCodingConvention0.getDelegateSuperclassName());
      //  // Unstable assertion: assertEquals(false, compiler0.isIdeMode());
      //  // Unstable assertion: assertEquals(68, compiler0.getWarningCount());
      //  // Unstable assertion: assertEquals(false, compiler0.isTypeCheckingEnabled());
      //  // Unstable assertion: assertEquals(false, compiler0.hasErrors());
      //  // Unstable assertion: assertEquals(0, compiler0.getErrorCount());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(true, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(2, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(true, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(132, node0.getType());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(1, node0.getLineno());
      //  // Unstable assertion: assertEquals(0, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertNotSame(node0, node1);
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      AbstractCompiler abstractCompiler0 = null;
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.U2U_CONSTRUCTOR_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      
      Node node0 = functionType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isEmptyType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      
      // Undeclared exception!
      try {
        Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      AbstractCompiler abstractCompiler0 = null;
      String string0 = "com.oogNecommon.collect.HashMSltiset";
      int int0 = 0;
      Node node0 = Node.newString(string0, int0, int0);
      assertNotNull(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(abstractCompiler0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      Map<String, GlobalNamespace.Name> map0 = globalNamespace0.getNameIndex();
      assertNotNull(map0);
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "OTouHER";
      GlobalNamespace.Name globalNamespace_Name0 = null;
      boolean boolean0 = false;
      GlobalNamespace.Name globalNamespace_Name1 = new GlobalNamespace.Name(string0, globalNamespace_Name0, boolean0);
      assertNotNull(globalNamespace_Name1);
      
      String string1 = globalNamespace_Name1.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("OTouHER (OTHER): globalSets=0, localSets=0, totalGets=0, aliasingGets=0, callGets=0", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test34()  throws Throwable  {
      PrintStream printStream0 = null;
      Compiler compiler0 = new Compiler(printStream0);
      assertNotNull(compiler0);
      
      String string0 = "_";
      Node node0 = compiler0.parseTestCode(string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      
      GlobalNamespace globalNamespace0 = new GlobalNamespace(compiler0, node0, node0);
      assertNotNull(globalNamespace0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      
      Node node1 = RuntimeTypeCheck.getBoilerplateCode(compiler0, string0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(68, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(132, node1.getType());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(35, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getCharno());
      assertNotSame(node1, node0);
      
      node0.addChildrenToBack(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(68, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(132, node1.getType());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(35, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      List<GlobalNamespace.Name> list0 = globalNamespace0.getNameForest();
      assertFalse(node0.equals((Object)node1));
      assertNotNull(list0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(68, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotSame(node0, node1);
  }

  @Test
  public void test35()  throws Throwable  {
      GlobalNamespace.Ref.Type globalNamespace_Ref_Type0 = GlobalNamespace.Ref.Type.DIRECT_GET;
      GlobalNamespace.Ref globalNamespace_Ref0 = GlobalNamespace.Ref.createRefForTesting(globalNamespace_Ref_Type0);
      assertNotNull(globalNamespace_Ref0);
      
      GlobalNamespace.Ref globalNamespace_Ref1 = globalNamespace_Ref0.getTwin();
      assertNull(globalNamespace_Ref1);
  }
}
