/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:25:56 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticType;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JsMessageVisitor;
import com.google.javascript.jscomp.LightweightMessageFormatter;
import com.google.javascript.jscomp.Region;
import com.google.javascript.jscomp.SimpleRegion;
import com.google.javascript.jscomp.SourceExcerptProvider;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.StrictModeCheck;
import com.google.javascript.jscomp.TypeCheck;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LightweightMessageFormatterEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = (-10);
      String string0 = "^\n";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-10, simpleRegion0.getEndingLineNumber());
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-10, simpleRegion0.getBeginningLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(-10, simpleRegion0.getEndingLineNumber());
      assertEquals("^\n", simpleRegion0.getSourceExcerpt());
      assertEquals(-10, simpleRegion0.getBeginningLineNumber());
      assertEquals("  -10| ^", string1);
  }

  @Test
  public void test1()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      int int0 = 431;
      String string0 = "";
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(431, simpleRegion0.getBeginningLineNumber());
      assertEquals(431, simpleRegion0.getEndingLineNumber());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertNull(string1);
      assertEquals("", simpleRegion0.getSourceExcerpt());
      assertEquals(431, simpleRegion0.getBeginningLineNumber());
      assertEquals(431, simpleRegion0.getEndingLineNumber());
  }

  @Test
  public void test2()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "9";
      SourceFile.Preloaded sourceFile_Preloaded0 = new SourceFile.Preloaded(string0, string0, string0);
      assertNotNull(sourceFile_Preloaded0);
      assertEquals("9", sourceFile_Preloaded0.toString());
      assertEquals("9", sourceFile_Preloaded0.getName());
      assertEquals("9", sourceFile_Preloaded0.getOriginalPath());
      
      int int0 = 0;
      SimpleRegion simpleRegion0 = (SimpleRegion)sourceFile_Preloaded0.getRegion(int0);
      assertNotNull(simpleRegion0);
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("9", simpleRegion0.getSourceExcerpt());
      assertEquals("9", sourceFile_Preloaded0.toString());
      assertEquals("9", sourceFile_Preloaded0.getName());
      assertEquals("9", sourceFile_Preloaded0.getOriginalPath());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("9", simpleRegion0.getSourceExcerpt());
      assertEquals("9", sourceFile_Preloaded0.toString());
      assertEquals("9", sourceFile_Preloaded0.getName());
      assertEquals("9", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("  1| 9", string1);
      
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      int int1 = 1550;
      DiagnosticType diagnosticType0 = TypeCheck.INEXISTENT_ENUM_ELEMENT;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[7];
      JSError jSError0 = JSError.make(string1, int1, int1, diagnosticType0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(jSError0);
      assertEquals(1550, jSError0.getCharno());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("9", simpleRegion0.getSourceExcerpt());
      assertEquals("9", sourceFile_Preloaded0.toString());
      assertEquals("9", sourceFile_Preloaded0.getName());
      assertEquals("9", sourceFile_Preloaded0.getOriginalPath());
      
      String string2 = lightweightMessageFormatter0.formatWarning(jSError0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals(1550, jSError0.getCharno());
      assertEquals(1, simpleRegion0.getBeginningLineNumber());
      assertEquals(1, simpleRegion0.getEndingLineNumber());
      assertEquals("9", simpleRegion0.getSourceExcerpt());
      assertEquals("9", sourceFile_Preloaded0.toString());
      assertEquals("9", sourceFile_Preloaded0.getName());
      assertEquals("9", sourceFile_Preloaded0.getOriginalPath());
      assertEquals("  1| 9:1550: WARNING - element null does not exist on this enum\n", string2);
  }

  @Test
  public void test3()  throws Throwable  {
      LightweightMessageFormatter lightweightMessageFormatter0 = LightweightMessageFormatter.withoutSource();
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = JsMessageVisitor.MESSAGE_HAS_NO_VALUE;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[8];
      JSError jSError0 = JSError.make(diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-1, jSError0.getCharno());
      
      String string0 = lightweightMessageFormatter0.formatError(jSError0);
      assertNotNull(string0);
      assertEquals(-1, jSError0.getCharno());
      assertEquals("ERROR - message node null has no value\n", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      int int0 = (-10);
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      SourceExcerptProvider.SourceExcerpt sourceExcerptProvider_SourceExcerpt0 = SourceExcerptProvider.SourceExcerpt.REGION;
      LightweightMessageFormatter lightweightMessageFormatter0 = new LightweightMessageFormatter((SourceExcerptProvider) compiler0, sourceExcerptProvider_SourceExcerpt0);
      assertNotNull(lightweightMessageFormatter0);
      
      DiagnosticType diagnosticType0 = StrictModeCheck.EVAL_ASSIGNMENT;
      assertNotNull(diagnosticType0);
      
      String[] stringArray0 = new String[3];
      JSError jSError0 = JSError.make(string0, int0, int0, diagnosticType0, stringArray0);
      assertNotNull(jSError0);
      assertEquals(-10, jSError0.getCharno());
      
      String string1 = lightweightMessageFormatter0.formatError(jSError0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(-10, jSError0.getCharno());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000: ERROR - the \"eval\" object cannot be reassigned in ES5 strict mode\n", string1);
  }

  @Test
  public void test5()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      compiler0.initCompilerOptionsIfTesting();
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test
  public void test6()  throws Throwable  {
      LightweightMessageFormatter.LineNumberingFormatter lightweightMessageFormatter_LineNumberingFormatter0 = new LightweightMessageFormatter.LineNumberingFormatter();
      assertNotNull(lightweightMessageFormatter_LineNumberingFormatter0);
      
      String string0 = "\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000";
      int int0 = (-10);
      SimpleRegion simpleRegion0 = new SimpleRegion(int0, int0, string0);
      assertNotNull(simpleRegion0);
      assertEquals(-10, simpleRegion0.getBeginningLineNumber());
      assertEquals(-10, simpleRegion0.getEndingLineNumber());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", simpleRegion0.getSourceExcerpt());
      
      String string1 = lightweightMessageFormatter_LineNumberingFormatter0.formatRegion((Region) simpleRegion0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(-10, simpleRegion0.getBeginningLineNumber());
      assertEquals(-10, simpleRegion0.getEndingLineNumber());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", simpleRegion0.getSourceExcerpt());
      assertEquals("  -10| \t\n   -9| \u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", string1);
      
      String string2 = lightweightMessageFormatter_LineNumberingFormatter0.formatLine(string1, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertEquals(-10, simpleRegion0.getBeginningLineNumber());
      assertEquals(-10, simpleRegion0.getEndingLineNumber());
      assertEquals("\t\n\u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", simpleRegion0.getSourceExcerpt());
      assertEquals("  -10| \t\n   -9| \u000B\f\r \u0085\u1680\u2028\u2029\u205F\u3000", string2);
  }
}
