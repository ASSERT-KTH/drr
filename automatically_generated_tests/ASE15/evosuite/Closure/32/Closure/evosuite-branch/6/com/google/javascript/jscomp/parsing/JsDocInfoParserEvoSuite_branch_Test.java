/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:55:45 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ContinueStatement;
import com.google.javascript.rhino.head.ast.EmptyExpression;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.ast.RegExpLiteral;
import com.google.javascript.rhino.head.ast.VariableDeclaration;
import com.google.javascript.rhino.head.ast.XmlPropRef;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import com.google.javascript.rhino.jstype.StaticSourceFile;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "{n:)rH";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "{oxAyIjJSE?O(#n,~";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "{7n:br}:";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(309, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInc());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isParamList());
      assertNotNull(node0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "{,Anxrn";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "[\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "[Y%r,bn";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "(new Date(";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "4\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDec());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(1, node0.getLength());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOr());
      assertNotNull(node0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "/.\n";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isString());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isThrow());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFalse());
      assertEquals(2, node0.getLength());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertNotNull(node0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertNull(node0.getSourceFileName());
      assertEquals(9, node0.getLength());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertNotNull(node0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDelProp());
      assertEquals(4, node0.getLength());
      assertEquals(false, node0.isContinue());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertNotNull(node0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "[%]r";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isContinue());
      assertEquals(308, node0.getType());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSwitch());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertNotNull(node0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Daqb!";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInc());
      assertEquals(306, node0.getType());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(5, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isComma());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(5, node0.getSourcePosition());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertNotNull(node0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "?|xSND?\"G)_JN";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isEmpty());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isIn());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNot());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "?;@^\\,";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(2, node0.getSourcePosition());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isRegExp());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isDelProp());
      assertEquals(2, node0.getCharno());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetterDef());
      assertNotNull(node0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "j.<jNL.L\\X";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "Hc|R8,LmEmuW|";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "* 6b}~Ui=";
      int int0 = 888;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(888, regExpLiteral0.getPosition());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(888, regExpLiteral0.getAbsolutePosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertNotNull(regExpLiteral0);
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(888, regExpLiteral0.getPosition());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(888, regExpLiteral0.getAbsolutePosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertNull(comment0);
      
      Node node0 = Node.newNumber((double) int0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(888, regExpLiteral0.getPosition());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(888, regExpLiteral0.getAbsolutePosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(888, regExpLiteral0.getPosition());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(888, regExpLiteral0.getAbsolutePosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(48, regExpLiteral0.getType());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVar());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetElem());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.wasEmptyNode());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ")3#C\\BX";
      int int0 = 874;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral(int0);
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(874, regExpLiteral0.getAbsolutePosition());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(874, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNotNull(regExpLiteral0);
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(874, regExpLiteral0.getAbsolutePosition());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(874, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(comment0);
      
      Node node0 = Node.newNumber((double) int0);
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertNotNull(node0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(874, regExpLiteral0.getAbsolutePosition());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(874, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isGetProp());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(true, node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isWith());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isEmpty());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(874, regExpLiteral0.getAbsolutePosition());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(874, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "]Ocuo/lmq";
      int int0 = (-4);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(true, variableDeclaration0.isVar());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "]Ocuo/lmq";
      int int0 = (-290);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isStatement());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isStatement());
      assertNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int1 = 124;
      jsDocTokenStream0.ungetChar(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isStatement());
      assertFalse(int0 == int1);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isStatement());
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ",EokrMrw`k1gO";
      int int0 = 1949;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "!";
      int int0 = 595;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      EmptyExpression emptyExpression0 = new EmptyExpression(int0);
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(595, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(595, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertNotNull(emptyExpression0);
      
      Comment comment0 = emptyExpression0.getJsDocNode();
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(595, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(595, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertNull(comment0);
      
      Node node0 = Node.newNumber((double) int0);
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertNotNull(node0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("128", emptyExpression0.toString());
      assertEquals(-1, emptyExpression0.getLineno());
      assertEquals(595, emptyExpression0.getAbsolutePosition());
      assertEquals(128, emptyExpression0.getType());
      assertEquals(595, emptyExpression0.getPosition());
      assertNull(emptyExpression0.getJsDoc());
      assertEquals(1, emptyExpression0.getLength());
      assertEquals(false, emptyExpression0.hasChildren());
      assertEquals(0, emptyExpression0.depth());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isHook());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.isNumber());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isEmpty());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isComma());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = ",@okrMrw`k1g!";
      int int0 = 2;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertNotNull(variableDeclaration0);
      
      int int1 = jsDocTokenStream0.getChar();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(44, int1);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertFalse(int0 == int1);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(int0 == int1);
      assertFalse(boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "msg.jsdoc.meaning.extra";
      int int0 = (-1680);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Node node0 = Node.newString(string0, int0, int0);
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertNull(node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertNotNull(node0);
      
      Charset charset0 = Charset.defaultCharset();
      //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
      //  // Unstable assertion: assertEquals(true, charset0.canEncode());
      //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
      //  // Unstable assertion: assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      //  // Unstable assertion: assertEquals(false, set0.isEmpty());
      //  // Unstable assertion: assertEquals(2, set0.size());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
      //  // Unstable assertion: assertEquals(true, charset0.canEncode());
      //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
      //  // Unstable assertion: assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(false, set0.isEmpty());
      //  // Unstable assertion: assertEquals(2, set0.size());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
      //  // Unstable assertion: assertEquals(true, charset0.canEncode());
      //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
      //  // Unstable assertion: assertNotNull(config0);
      
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile(string0, boolean0);
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", simpleSourceFile0.getName());
      //  // Unstable assertion: assertEquals(true, simpleSourceFile0.isExtern());
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", simpleSourceFile0.toString());
      //  // Unstable assertion: assertNotNull(simpleSourceFile0);
      
      node0.setStaticSourceFile((StaticSourceFile) simpleSourceFile0);
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", simpleSourceFile0.getName());
      //  // Unstable assertion: assertEquals(true, simpleSourceFile0.isExtern());
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", simpleSourceFile0.toString());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertNotNull(contextFactory0);
      
      Context context0 = contextFactory0.enterContext();
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertNotNull(context0);
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(context0.generateObserverCount);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, set0.isEmpty());
      //  // Unstable assertion: assertEquals(2, set0.size());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
      //  // Unstable assertion: assertEquals(true, charset0.canEncode());
      //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
      //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
      //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
      //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
      //  // Unstable assertion: assertEquals(true, context0.isSealed());
      //  // Unstable assertion: assertEquals(false, set0.isEmpty());
      //  // Unstable assertion: assertEquals(2, set0.size());
      //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
      //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(0, node0.getLength());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(false, node0.isFunction());
      //  // Unstable assertion: assertEquals(false, node0.isNot());
      //  // Unstable assertion: assertEquals(false, node0.isExprResult());
      //  // Unstable assertion: assertEquals(false, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isGetProp());
      //  // Unstable assertion: assertEquals(false, node0.isBreak());
      //  // Unstable assertion: assertEquals(false, node0.isVar());
      //  // Unstable assertion: assertEquals(false, node0.isDefaultCase());
      //  // Unstable assertion: assertEquals(true, node0.isString());
      //  // Unstable assertion: assertEquals(40, node0.getType());
      //  // Unstable assertion: assertEquals(false, node0.isParamList());
      //  // Unstable assertion: assertEquals(-1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isGetElem());
      //  // Unstable assertion: assertEquals(false, node0.isInstanceOf());
      //  // Unstable assertion: assertEquals(false, node0.isSetterDef());
      //  // Unstable assertion: assertEquals(-1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isNumber());
      //  // Unstable assertion: assertEquals(false, node0.isOr());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(true, node0.isFromExterns());
      //  // Unstable assertion: assertEquals(false, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isArrayLit());
      //  // Unstable assertion: assertEquals(false, node0.isInc());
      //  // Unstable assertion: assertEquals(false, node0.isFalse());
      //  // Unstable assertion: assertEquals(false, node0.isReturn());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(false, node0.isObjectLit());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(false, node0.isAdd());
      //  // Unstable assertion: assertEquals(false, node0.isComma());
      //  // Unstable assertion: assertEquals(-1, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isThrow());
      //  // Unstable assertion: assertEquals(false, node0.isIn());
      //  // Unstable assertion: assertEquals(0, node0.getChildCount());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(false, node0.isAssignAdd());
      //  // Unstable assertion: assertEquals(false, node0.isLabel());
      //  // Unstable assertion: assertEquals(false, node0.isBlock());
      //  // Unstable assertion: assertEquals(false, node0.isHook());
      //  // Unstable assertion: assertEquals(false, node0.isTrue());
      //  // Unstable assertion: assertEquals(false, node0.isContinue());
      //  // Unstable assertion: assertEquals(false, node0.isTypeOf());
      //  // Unstable assertion: assertEquals(false, node0.isCatch());
      //  // Unstable assertion: assertEquals(false, node0.isCase());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isAnd());
      //  // Unstable assertion: assertEquals(false, node0.isTry());
      //  // Unstable assertion: assertEquals("msg.jsdoc.meaning.extra", node0.getSourceFileName());
      //  // Unstable assertion: assertEquals(false, node0.isName());
      //  // Unstable assertion: assertEquals(false, node0.isDec());
      //  // Unstable assertion: assertEquals(false, node0.isRegExp());
      //  // Unstable assertion: assertEquals(false, node0.isNE());
      //  // Unstable assertion: assertEquals(false, node0.isNew());
      //  // Unstable assertion: assertEquals(false, node0.isEmpty());
      //  // Unstable assertion: assertEquals(false, node0.isIf());
      //  // Unstable assertion: assertEquals(false, node0.isFor());
      //  // Unstable assertion: assertEquals(false, node0.isSwitch());
      //  // Unstable assertion: assertEquals(false, node0.isWith());
      //  // Unstable assertion: assertEquals(false, node0.isDo());
      //  // Unstable assertion: assertEquals(false, node0.isVoid());
      //  // Unstable assertion: assertEquals(false, node0.isDelProp());
      //  // Unstable assertion: assertEquals(false, node0.isDebugger());
      //  // Unstable assertion: assertEquals(false, node0.isGetterDef());
      //  // Unstable assertion: assertEquals(false, node0.isWhile());
      //  // Unstable assertion: assertEquals(false, node0.isNull());
      //  // Unstable assertion: assertEquals(false, node0.isAssign());
      //  // Unstable assertion: assertEquals(false, node0.isScript());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isLabelName());
      //  // Unstable assertion: assertEquals(false, node0.isThis());
      //  // Unstable assertion: assertEquals(false, node0.isCall());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.toString());
      //  // Unstable assertion: assertEquals(true, charset0.canEncode());
      //  // Unstable assertion: assertEquals(true, charset0.isRegistered());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.displayName());
      //  // Unstable assertion: assertEquals("UTF-8", charset0.name());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(context0.generateObserverCount);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "this";
      int int0 = (-16);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(-16, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("this", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(-16, comment0.getAbsolutePosition());
      assertEquals(-16, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.hasChildren());
      assertNotNull(comment0);
      
      Node node0 = Node.newString(string0, int0, int0);
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(-16, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("this", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(-16, comment0.getAbsolutePosition());
      assertEquals(-16, comment0.getLength());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.hasChildren());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isExprResult());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFunction());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isContinue());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNE());
      assertNotNull(jsDocInfoParser0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "]Ocuo/lmq";
      int int0 = (-4);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertNotNull(variableDeclaration0);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(-1, variableDeclaration0.getPosition());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "(I)Ljavalang/tNing;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInc());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(0, node0.getLength());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
  }

  //@Test
  public void test29()  throws Throwable  {
      String string0 = "7N~GrC";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertNotNull(node0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = (-15);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlPropRef xmlPropRef0 = new XmlPropRef();
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertNull(xmlPropRef0.getJsDoc());
      assertNotNull(xmlPropRef0);
      
      Name name0 = xmlPropRef0.getPropName();
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertNull(xmlPropRef0.getJsDoc());
      assertNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, int0, name0);
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertNotNull(continueStatement0);
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isRegExp());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isCase());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLabelName());
      assertNull(jSDocInfo0);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "!|n[j`3&gm";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  //@Test
  public void test31()  throws Throwable  {
      String string0 = "7N~GrC";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = (-15);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlPropRef xmlPropRef0 = new XmlPropRef();
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertNotNull(xmlPropRef0);
      
      Name name0 = xmlPropRef0.getPropName();
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, int0, name0);
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertNotNull(continueStatement0);
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = null;
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(79, xmlPropRef0.getType());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(false, node0.isContinue());
      assertEquals(true, node0.isString());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.hasOneChild());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(-15, continueStatement0.getPosition());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
  }

  //@Test
  public void test32()  throws Throwable  {
      String string0 = "7N~GrC";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isString());
      assertNotNull(node0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      int int0 = (-15);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlPropRef xmlPropRef0 = new XmlPropRef();
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(79, xmlPropRef0.getType());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertNotNull(xmlPropRef0);
      
      Name name0 = xmlPropRef0.getPropName();
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(79, xmlPropRef0.getType());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertNull(name0);
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, int0, name0);
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getPosition());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(79, xmlPropRef0.getType());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertNotNull(continueStatement0);
      
      Comment comment0 = continueStatement0.getJsDocNode();
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getPosition());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(79, xmlPropRef0.getType());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getPosition());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(79, xmlPropRef0.getType());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isScript());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isParamList());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isInc());
      assertEquals(6, node0.getLength());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isFor());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isString());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(-15, continueStatement0.getPosition());
      assertEquals(-15, continueStatement0.getAbsolutePosition());
      assertEquals(false, continueStatement0.hasChildren());
      assertEquals(121, continueStatement0.getType());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-15, continueStatement0.getLength());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals(-1, xmlPropRef0.getAbsolutePosition());
      assertEquals(0, xmlPropRef0.depth());
      assertEquals(false, xmlPropRef0.hasChildren());
      assertEquals(79, xmlPropRef0.getType());
      assertNull(xmlPropRef0.getJsDoc());
      assertEquals(-1, xmlPropRef0.getPosition());
      assertEquals(1, xmlPropRef0.getLength());
      assertEquals(false, xmlPropRef0.isAttributeAccess());
      assertEquals(-1, xmlPropRef0.getLineno());
      assertEquals(-1, xmlPropRef0.getAtPos());
      assertEquals(-1, xmlPropRef0.getColonPos());
      assertEquals("79", xmlPropRef0.toString());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = ",@okrMrw`k1g!";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableDeclaration variableDeclaration0 = new VariableDeclaration();
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertNotNull(variableDeclaration0);
      
      int int1 = jsDocTokenStream0.getChar();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(44, int1);
      
      Comment comment0 = variableDeclaration0.getJsDocNode();
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertNull(comment0);
      
      Node node0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(int0 == int1);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNull(variableDeclaration0.getJsDoc());
      assertEquals(0, variableDeclaration0.depth());
      assertEquals(122, variableDeclaration0.getType());
      assertEquals(-1, variableDeclaration0.getPosition());
      assertEquals(-1, variableDeclaration0.getLineno());
      assertEquals(true, variableDeclaration0.isVar());
      assertEquals(1, variableDeclaration0.getLength());
      assertEquals(-1, variableDeclaration0.getAbsolutePosition());
      assertEquals(false, variableDeclaration0.isLet());
      assertEquals("122", variableDeclaration0.toString());
      assertEquals(false, variableDeclaration0.isStatement());
      assertEquals(false, variableDeclaration0.isConst());
      assertEquals(false, variableDeclaration0.hasChildren());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int0 == int1);
      assertFalse(boolean1);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = " *4";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertNotNull(node0);
      
      int int0 = 31;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jsDocInfoParser0);
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isScript());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAssign());
      assertEquals(1, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabel());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(false, context0.isSealed());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(context0.generateObserverCount);
  }
}
