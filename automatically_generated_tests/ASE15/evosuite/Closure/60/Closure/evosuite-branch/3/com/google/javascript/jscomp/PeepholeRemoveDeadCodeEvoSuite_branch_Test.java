/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:24:10 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.CheckPropertyOrder;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.PeepholeRemoveDeadCode;
import com.google.javascript.jscomp.SyntheticAst;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;

 
public class PeepholeRemoveDeadCodeEvoSuite_branch_Test   {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
//       assertNotNull(peepholeRemoveDeadCode0);
//       
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = "LIBRARY_SCOPE";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getOriginalPath());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.toString());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFile0);
//       
//       Node node0 = compiler0.parse(jSSourceFile0);
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals("LIBRARY_SCOPE", node0.getSourceFileName());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getOriginalPath());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.toString());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertNotNull(node0);
//       
//       // Undeclared exception!
//       try {
//         Node node1 = peepholeRemoveDeadCode0.tryFoldDo(node0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test01()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      byte byte0 = (byte)115;
      Node node0 = new Node((int) byte0, (int) byte0, (int) byte0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(115, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(115, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(471155, node0.getSourcePosition());
      assertEquals(115, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.tryFoldFor(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      double double0 = 0.0;
      int int0 = 12;
      Node node0 = Node.newNumber(double0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(12, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(39, node0.getType());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(12, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isFromExterns());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.tryFoldFor(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 134;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(134, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(134, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.tryFoldWhile(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 124;
      int int1 = 108;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(false, node0.isFromExterns());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(124, node0.getCharno());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(108, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(node0);
      
      String string0 = "go{Qm|4-S0(Dw.D";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) compiler0);
      assertNotSame(node1, node0);
      assertEquals(false, node1.hasOneChild());
      assertEquals("go{Qm|4-S0(Dw.D", node1.getSourceFileName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFromExterns());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node0.addChildrenToFront(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(124, node0.getCharno());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(108, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals("go{Qm|4-S0(Dw.D", node1.getSourceFileName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFromExterns());
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      
      node0.addChildToFront(node0);
      assertNotSame(node0, node1);
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(124, node0.getCharno());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(108, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Closure/60/3/run_evosuite.pl_107703_1418336006/b");
      String string0 = "SE:ELEM";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckPropertyOrder checkPropertyOrder0 = new CheckPropertyOrder(compiler0, checkLevel0, boolean0);
      assertNotNull(checkPropertyOrder0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkPropertyOrder0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      peepholeRemoveDeadCode0.beginTraversal(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      String string1 = "b";
      assertNotSame(string1, string0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string1);
      assertNotSame(string1, string0);
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jSSourceFile0);
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotSame(string1, string0);
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals("b", node0.getSourceFileName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.toString());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node0);
      
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotSame(string1, string0);
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.hasChildren());
      assertEquals("b", node1.getSourceFileName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals("b", node0.getSourceFileName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.toString());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node1);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeRemoveDeadCode0.tryOptimizeBlock(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Closure/60/3/run_evosuite.pl_107703_1418336006/b");
      String string0 = "SEXELEU";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckPropertyOrder checkPropertyOrder0 = new CheckPropertyOrder(compiler0, checkLevel0, boolean0);
      assertNotNull(checkPropertyOrder0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkPropertyOrder0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      peepholeRemoveDeadCode0.beginTraversal(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      String string1 = "b";
      assertNotSame(string1, string0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string1);
      assertNotSame(string1, string0);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.toString());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jSSourceFile0);
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotSame(string1, string0);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.toString());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(132, node0.getType());
      assertEquals("b", node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node0);
      
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      assertSame(node1, node0);
      assertNotSame(string1, string0);
      assertSame(node0, node1);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.toString());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isFromExterns());
      assertEquals("b", node1.getSourceFileName());
      assertEquals(0, node1.getCharno());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(132, node0.getType());
      assertEquals("b", node0.getSourceFileName());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node1);
  }

  @Test
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Closure/60/3/run_evosuite.pl_107703_1418336006/b");
      String string0 = "S=EELEU";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertTrue(boolean0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      CheckLevel checkLevel0 = CheckLevel.ERROR;
      CheckPropertyOrder checkPropertyOrder0 = new CheckPropertyOrder(compiler0, checkLevel0, boolean0);
      assertNotNull(checkPropertyOrder0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) checkPropertyOrder0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      peepholeRemoveDeadCode0.beginTraversal(nodeTraversal0);
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      
      String string1 = "b";
      assertNotSame(string1, string0);
      
      JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string1);
      assertNotSame(string1, string0);
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals("b", jSSourceFile0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jSSourceFile0);
      
      Node node0 = compiler0.parse(jSSourceFile0);
      assertNotSame(string1, string0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals("b", node0.getSourceFileName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals("b", jSSourceFile0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node0);
      
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      assertNotSame(string1, string0);
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getCharno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isFromExterns());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(1, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals("b", node1.getSourceFileName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(132, node1.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals("b", node0.getSourceFileName());
      assertEquals(false, jSSourceFile0.isExtern());
      assertEquals("b", jSSourceFile0.getOriginalPath());
      assertEquals("b", jSSourceFile0.getName());
      assertEquals("b", jSSourceFile0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(node1);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 124;
      int int1 = 110;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(124, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(110, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(node0);
      
      String string0 = "go{Qm|4-S0(Dw.D";
      SyntheticAst syntheticAst0 = new SyntheticAst(string0);
      assertNotNull(syntheticAst0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node1 = syntheticAst0.getAstRoot((AbstractCompiler) compiler0);
      assertNotSame(node1, node0);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(132, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals("go{Qm|4-S0(Dw.D", node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node0.addChildrenToFront(node1);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isFromExterns());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(132, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals("go{Qm|4-S0(Dw.D", node1.getSourceFileName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(124, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(110, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      node0.addChildToFront(node0);
      assertNotSame(node0, node1);
      assertEquals(124, node0.getCharno());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(124, node0.getLineno());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(110, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 124;
      int int1 = 110;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(124, node0.getCharno());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(110, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasChildren());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(node0);
      
      node0.addChildToFront(node0);
      assertEquals(124, node0.getCharno());
      assertEquals(124, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(110, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1866;
      int int1 = 85;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(7645002, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1866, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1866, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(85, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(node0);
      
      node0.addChildToFront(node0);
      assertEquals(7645002, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1866, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1866, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(85, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 124;
      int int1 = 86;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(124, node0.getLineno());
      assertEquals(124, node0.getCharno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(node0);
      
      node0.addChildToFront(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(124, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(124, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertEquals(86, node1.getType());
      assertEquals(124, node1.getCharno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(124, node1.getLineno());
      assertEquals(508028, node1.getSourcePosition());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(124, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(124, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(node1);
  }

  @Test
  public void test13()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 134;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(134, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertNotNull(node0);
      
      Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertEquals(548998, node1.getSourcePosition());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(134, node1.getLineno());
      assertEquals(false, node1.isFromExterns());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(134, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(134, node1.getType());
      assertNull(node1.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(548998, node0.getSourcePosition());
      assertEquals(134, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(134, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(134, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertNotNull(node1);
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
//       assertNotNull(peepholeRemoveDeadCode0);
//       
//       Compiler compiler0 = new Compiler();
//       assertNotNull(compiler0);
//       
//       String string0 = "LIBRARY_SCOPE";
//       JSSourceFile jSSourceFile0 = JSSourceFile.fromFile(string0);
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getOriginalPath());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.toString());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(jSSourceFile0);
//       
//       Node node0 = compiler0.parse(jSSourceFile0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals("LIBRARY_SCOPE", node0.getSourceFileName());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getOriginalPath());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.toString());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertNotNull(node0);
//       
//       Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
//       assertSame(node0, node1);
//       assertSame(node1, node0);
//       assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
//       assertEquals(1, compiler0.getErrorCount());
//       assertEquals(true, compiler0.hasErrors());
//       assertEquals(false, compiler0.acceptConstKeyword());
//       assertEquals(0, compiler0.getWarningCount());
//       assertEquals(false, compiler0.isTypeCheckingEnabled());
//       assertEquals(false, compiler0.isIdeMode());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(125, node0.getType());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals("LIBRARY_SCOPE", node0.getSourceFileName());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getOriginalPath());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.toString());
//       assertEquals("LIBRARY_SCOPE", jSSourceFile0.getName());
//       assertEquals(false, jSSourceFile0.isExtern());
//       assertEquals(false, node1.isSyntheticBlock());
//       assertEquals(false, node1.hasChildren());
//       assertEquals(false, node1.wasEmptyNode());
//       assertEquals(false, node1.hasMoreThanOneChild());
//       assertEquals(-1, node1.getCharno());
//       assertEquals(false, node1.isLocalResultCall());
//       assertEquals(false, node1.isVarArgs());
//       assertEquals(false, node1.isNoSideEffectsCall());
//       assertEquals(125, node1.getType());
//       assertEquals(0, node1.getChildCount());
//       assertEquals(false, node1.hasOneChild());
//       assertEquals(false, node1.isOnlyModifiesThisCall());
//       assertEquals(false, node1.isQualifiedName());
//       assertEquals("LIBRARY_SCOPE", node1.getSourceFileName());
//       assertEquals(-1, node1.getSourcePosition());
//       assertEquals(false, node1.isFromExterns());
//       assertEquals(false, node1.isOptionalArg());
//       assertEquals(false, node1.isUnscopedQualifiedName());
//       assertEquals(0, node1.getSideEffectFlags());
//       assertEquals(-1, node1.getLineno());
//       assertEquals(false, node1.isQuotedString());
//       assertNotNull(node1);
//   }

  @Test
  public void test15()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 131;
      int int1 = 115;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(115, node0.getType());
      assertEquals(131, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(131, node0.getLineno());
      assertEquals(536707, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // malformed 'for' statement FOR 131
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 124;
      int int1 = 114;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(124, node0.getLineno());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(114, node0.getType());
      assertEquals(124, node0.getCharno());
      assertEquals(false, node0.isFromExterns());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 113;
      String string0 = "";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(113, node0.getType());
      assertEquals(462961, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(113, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(113, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 98;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(98, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(98, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(401506, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(98, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 124;
      int int1 = 77;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(124, node0.getLineno());
      assertNull(node0.getSourceFileName());
      assertEquals(124, node0.getCharno());
      assertEquals(508028, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(77, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      int int0 = 137;
      int int1 = 130;
      Node node0 = new Node(int1, int0, int0);
      assertEquals(137, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(561289, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(130, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(137, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isFromExterns());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeRemoveDeadCode0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      PeepholeRemoveDeadCode peepholeRemoveDeadCode0 = new PeepholeRemoveDeadCode();
      assertNotNull(peepholeRemoveDeadCode0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = peepholeRemoveDeadCode0.hasBreakOrContinue(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
